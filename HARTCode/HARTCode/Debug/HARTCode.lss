
HARTCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800200  00002f44  00002fd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000106  00800278  00800278  00003050  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000030ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000448  00000000  00000000  000030ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004469  00000000  00000000  00003534  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018e6  00000000  00000000  0000799d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002878  00000000  00000000  00009283  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e7c  00000000  00000000  0000bafc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e1a  00000000  00000000  0000c978  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d6b  00000000  00000000  0000d792  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  000104fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b0 c0       	rjmp	.+352    	; 0x162 <__ctors_end>
       2:	00 00       	nop
       4:	ce c0       	rjmp	.+412    	; 0x1a2 <__bad_interrupt>
       6:	00 00       	nop
       8:	cc c0       	rjmp	.+408    	; 0x1a2 <__bad_interrupt>
       a:	00 00       	nop
       c:	ca c0       	rjmp	.+404    	; 0x1a2 <__bad_interrupt>
       e:	00 00       	nop
      10:	c8 c0       	rjmp	.+400    	; 0x1a2 <__bad_interrupt>
      12:	00 00       	nop
      14:	c6 c0       	rjmp	.+396    	; 0x1a2 <__bad_interrupt>
      16:	00 00       	nop
      18:	c4 c0       	rjmp	.+392    	; 0x1a2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c2 c0       	rjmp	.+388    	; 0x1a2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c0 c0       	rjmp	.+384    	; 0x1a2 <__bad_interrupt>
      22:	00 00       	nop
      24:	be c0       	rjmp	.+380    	; 0x1a2 <__bad_interrupt>
      26:	00 00       	nop
      28:	bc c0       	rjmp	.+376    	; 0x1a2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ba c0       	rjmp	.+372    	; 0x1a2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b8 c0       	rjmp	.+368    	; 0x1a2 <__bad_interrupt>
      32:	00 00       	nop
      34:	b6 c0       	rjmp	.+364    	; 0x1a2 <__bad_interrupt>
      36:	00 00       	nop
      38:	b4 c0       	rjmp	.+360    	; 0x1a2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b2 c0       	rjmp	.+356    	; 0x1a2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b0 c0       	rjmp	.+352    	; 0x1a2 <__bad_interrupt>
      42:	00 00       	nop
      44:	ae c0       	rjmp	.+348    	; 0x1a2 <__bad_interrupt>
      46:	00 00       	nop
      48:	ac c0       	rjmp	.+344    	; 0x1a2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c0       	rjmp	.+340    	; 0x1a2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a8 c0       	rjmp	.+336    	; 0x1a2 <__bad_interrupt>
      52:	00 00       	nop
      54:	a6 c0       	rjmp	.+332    	; 0x1a2 <__bad_interrupt>
      56:	00 00       	nop
      58:	a4 c0       	rjmp	.+328    	; 0x1a2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a2 c0       	rjmp	.+324    	; 0x1a2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a0 c0       	rjmp	.+320    	; 0x1a2 <__bad_interrupt>
      62:	00 00       	nop
      64:	15 c6       	rjmp	.+3114   	; 0xc90 <__vector_25>
      66:	00 00       	nop
      68:	9c c0       	rjmp	.+312    	; 0x1a2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9a c0       	rjmp	.+308    	; 0x1a2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	98 c0       	rjmp	.+304    	; 0x1a2 <__bad_interrupt>
      72:	00 00       	nop
      74:	96 c0       	rjmp	.+300    	; 0x1a2 <__bad_interrupt>
      76:	00 00       	nop
      78:	94 c0       	rjmp	.+296    	; 0x1a2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	92 c0       	rjmp	.+292    	; 0x1a2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	90 c0       	rjmp	.+288    	; 0x1a2 <__bad_interrupt>
      82:	00 00       	nop
      84:	8e c0       	rjmp	.+284    	; 0x1a2 <__bad_interrupt>
      86:	00 00       	nop
      88:	8c c0       	rjmp	.+280    	; 0x1a2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8a c0       	rjmp	.+276    	; 0x1a2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	88 c0       	rjmp	.+272    	; 0x1a2 <__bad_interrupt>
      92:	00 00       	nop
      94:	86 c0       	rjmp	.+268    	; 0x1a2 <__bad_interrupt>
      96:	00 00       	nop
      98:	84 c0       	rjmp	.+264    	; 0x1a2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	82 c0       	rjmp	.+260    	; 0x1a2 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	80 c0       	rjmp	.+256    	; 0x1a2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	7e c0       	rjmp	.+252    	; 0x1a2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7c c0       	rjmp	.+248    	; 0x1a2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7a c0       	rjmp	.+244    	; 0x1a2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	78 c0       	rjmp	.+240    	; 0x1a2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	76 c0       	rjmp	.+236    	; 0x1a2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	74 c0       	rjmp	.+232    	; 0x1a2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	72 c0       	rjmp	.+228    	; 0x1a2 <__bad_interrupt>
      be:	00 00       	nop
      c0:	70 c0       	rjmp	.+224    	; 0x1a2 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	6e c0       	rjmp	.+220    	; 0x1a2 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	6c c0       	rjmp	.+216    	; 0x1a2 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	08 00       	.word	0x0008	; ????
      ce:	00 00       	nop
      d0:	be 92       	st	-X, r11
      d2:	24 49       	sbci	r18, 0x94	; 148
      d4:	12 3e       	cpi	r17, 0xE2	; 226
      d6:	ab aa       	std	Y+51, r10	; 0x33
      d8:	aa 2a       	or	r10, r26
      da:	be cd       	rjmp	.-1156   	; 0xfffffc58 <__eeprom_end+0xff7efc58>
      dc:	cc cc       	rjmp	.-1640   	; 0xfffffa76 <__eeprom_end+0xff7efa76>
      de:	4c 3e       	cpi	r20, 0xEC	; 236
      e0:	00 00       	nop
      e2:	00 80       	ld	r0, Z
      e4:	be ab       	std	Y+54, r27	; 0x36
      e6:	aa aa       	std	Y+50, r10	; 0x32
      e8:	aa 3e       	cpi	r26, 0xEA	; 234
      ea:	00 00       	nop
      ec:	00 00       	nop
      ee:	bf 00       	.word	0x00bf	; ????
      f0:	00 00       	nop
      f2:	80 3f       	cpi	r24, 0xF0	; 240
      f4:	00 00       	nop
      f6:	00 00       	nop
      f8:	00 08       	sbc	r0, r0
      fa:	41 78       	andi	r20, 0x81	; 129
      fc:	d3 bb       	out	0x13, r29	; 19
      fe:	43 87       	std	Z+11, r20	; 0x0b
     100:	d1 13       	cpse	r29, r17
     102:	3d 19       	sub	r19, r13
     104:	0e 3c       	cpi	r16, 0xCE	; 206
     106:	c3 bd       	out	0x23, r28	; 35
     108:	42 82       	std	Z+2, r4	; 0x02
     10a:	ad 2b       	or	r26, r29
     10c:	3e 68       	ori	r19, 0x8E	; 142
     10e:	ec 82       	std	Y+4, r14	; 0x04
     110:	76 be       	out	0x36, r7	; 54
     112:	d9 8f       	std	Y+25, r29	; 0x19
     114:	e1 a9       	ldd	r30, Z+49	; 0x31
     116:	3e 4c       	sbci	r19, 0xCE	; 206
     118:	80 ef       	ldi	r24, 0xF0	; 240
     11a:	ff be       	out	0x3f, r15	; 63
     11c:	01 c4       	rjmp	.+2050   	; 0x920 <CalcPT+0x42>
     11e:	ff 7f       	andi	r31, 0xFF	; 255
     120:	3f 00       	.word	0x003f	; ????
     122:	00 00       	nop
	...

00000126 <__trampolines_end>:
     126:	4e 41       	sbci	r20, 0x1E	; 30
     128:	4e 49       	Address 0x00000128 is out of bounds.
.word	0xffff	; ????

00000129 <pstr_inity>:
     129:	49 4e 49 54 59                                      INITY

0000012e <pstr_inf>:
     12e:	49 4e 46                                            INF

00000131 <pwr_m10>:
     131:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     141:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000149 <pwr_p10>:
     149:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     159:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d1 e2       	ldi	r29, 0x21	; 33
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61
     16e:	00 e0       	ldi	r16, 0x00	; 0
     170:	0c bf       	out	0x3c, r16	; 60

00000172 <__do_copy_data>:
     172:	12 e0       	ldi	r17, 0x02	; 2
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b2 e0       	ldi	r27, 0x02	; 2
     178:	e4 e4       	ldi	r30, 0x44	; 68
     17a:	ff e2       	ldi	r31, 0x2F	; 47
     17c:	00 e0       	ldi	r16, 0x00	; 0
     17e:	0b bf       	out	0x3b, r16	; 59
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x14>
     182:	07 90       	elpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a8 37       	cpi	r26, 0x78	; 120
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0x10>

0000018c <__do_clear_bss>:
     18c:	23 e0       	ldi	r18, 0x03	; 3
     18e:	a8 e7       	ldi	r26, 0x78	; 120
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	ae 37       	cpi	r26, 0x7E	; 126
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	df d0       	rcall	.+446    	; 0x35c <main>
     19e:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <_exit>

000001a2 <__bad_interrupt>:
     1a2:	2e cf       	rjmp	.-420    	; 0x0 <__vectors>

000001a4 <readEmatch>:
	FIREPORT &= ~(1 << SEPIGNITE2);
	return;
}

uint8_t readEmatch(void){
	return CHECKPIN;
     1a4:	80 b1       	in	r24, 0x00	; 0
     1a6:	08 95       	ret

000001a8 <Initdt>:
	TCNT1 = 0;
	return;
}

void Resetdt(void){
	TCNT1 = 0;
     1a8:	83 e0       	ldi	r24, 0x03	; 3
     1aa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
     1ae:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     1b2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     1b6:	08 95       	ret

000001b8 <Readdt>:
	return;
}

float Readdt(void){
	float cnt;
	cnt = TCNT1;
     1b8:	e4 e8       	ldi	r30, 0x84	; 132
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	60 81       	ld	r22, Z
     1be:	71 81       	ldd	r23, Z+1	; 0x01
	TCNT1 = 0;
	return;
}

void Resetdt(void){
	TCNT1 = 0;
     1c0:	11 82       	std	Z+1, r1	; 0x01
     1c2:	10 82       	st	Z, r1
	return;
}

float Readdt(void){
	float cnt;
	cnt = TCNT1;
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 75 10 	call	0x20ea	; 0x20ea <__floatunsisf>
	Resetdt();
	return cnt/((float)F_CPU*(float)KALMANPRSCL);
     1cc:	20 e0       	ldi	r18, 0x00	; 0
     1ce:	34 e2       	ldi	r19, 0x24	; 36
     1d0:	44 ef       	ldi	r20, 0xF4	; 244
     1d2:	57 e4       	ldi	r21, 0x47	; 71
     1d4:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <__divsf3>
}
     1d8:	08 95       	ret

000001da <Estimate>:

void Estimate(struct KalmanStruct* estimate, struct AccelStruct* accelData, float altitude){
     1da:	2f 92       	push	r2
     1dc:	3f 92       	push	r3
     1de:	4f 92       	push	r4
     1e0:	5f 92       	push	r5
     1e2:	6f 92       	push	r6
     1e4:	7f 92       	push	r7
     1e6:	8f 92       	push	r8
     1e8:	9f 92       	push	r9
     1ea:	af 92       	push	r10
     1ec:	bf 92       	push	r11
     1ee:	cf 92       	push	r12
     1f0:	df 92       	push	r13
     1f2:	ef 92       	push	r14
     1f4:	ff 92       	push	r15
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
     202:	2c 97       	sbiw	r28, 0x0c	; 12
     204:	0f b6       	in	r0, 0x3f	; 63
     206:	f8 94       	cli
     208:	de bf       	out	0x3e, r29	; 62
     20a:	0f be       	out	0x3f, r0	; 63
     20c:	cd bf       	out	0x3d, r28	; 61
     20e:	1c 01       	movw	r2, r24
     210:	8b 01       	movw	r16, r22
     212:	49 01       	movw	r8, r18
     214:	5a 01       	movw	r10, r20
	struct KalmanStruct propogated;
	float dt;
	dt = Readdt();
     216:	d0 df       	rcall	.-96     	; 0x1b8 <Readdt>
     218:	69 83       	std	Y+1, r22	; 0x01
     21a:	7a 83       	std	Y+2, r23	; 0x02
     21c:	8b 83       	std	Y+3, r24	; 0x03
     21e:	9c 83       	std	Y+4, r25	; 0x04
	propogated.kAltitude = altitude+dt*estimate->kVelocity+(1/2)*(accelData->AccelXYZ[0] - 9.8)*pow(dt,2);
     220:	f1 01       	movw	r30, r2
     222:	c4 80       	ldd	r12, Z+4	; 0x04
     224:	d5 80       	ldd	r13, Z+5	; 0x05
     226:	e6 80       	ldd	r14, Z+6	; 0x06
     228:	f7 80       	ldd	r15, Z+7	; 0x07
     22a:	2d ec       	ldi	r18, 0xCD	; 205
     22c:	3c ec       	ldi	r19, 0xCC	; 204
     22e:	4c e1       	ldi	r20, 0x1C	; 28
     230:	51 e4       	ldi	r21, 0x41	; 65
     232:	f8 01       	movw	r30, r16
     234:	60 81       	ld	r22, Z
     236:	71 81       	ldd	r23, Z+1	; 0x01
     238:	82 81       	ldd	r24, Z+2	; 0x02
     23a:	93 81       	ldd	r25, Z+3	; 0x03
     23c:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__subsf3>
     240:	6d 83       	std	Y+5, r22	; 0x05
     242:	7e 83       	std	Y+6, r23	; 0x06
     244:	8f 83       	std	Y+7, r24	; 0x07
     246:	98 87       	std	Y+8, r25	; 0x08
     248:	29 81       	ldd	r18, Y+1	; 0x01
     24a:	3a 81       	ldd	r19, Y+2	; 0x02
     24c:	4b 81       	ldd	r20, Y+3	; 0x03
     24e:	5c 81       	ldd	r21, Y+4	; 0x04
     250:	c7 01       	movw	r24, r14
     252:	b6 01       	movw	r22, r12
     254:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     258:	a5 01       	movw	r20, r10
     25a:	94 01       	movw	r18, r8
     25c:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__addsf3>
     260:	69 87       	std	Y+9, r22	; 0x09
     262:	7a 87       	std	Y+10, r23	; 0x0a
     264:	8b 87       	std	Y+11, r24	; 0x0b
     266:	9c 87       	std	Y+12, r25	; 0x0c
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	a9 01       	movw	r20, r18
     26e:	6d 81       	ldd	r22, Y+5	; 0x05
     270:	7e 81       	ldd	r23, Y+6	; 0x06
     272:	8f 81       	ldd	r24, Y+7	; 0x07
     274:	98 85       	ldd	r25, Y+8	; 0x08
     276:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     27a:	2b 01       	movw	r4, r22
     27c:	3c 01       	movw	r6, r24
     27e:	29 81       	ldd	r18, Y+1	; 0x01
     280:	3a 81       	ldd	r19, Y+2	; 0x02
     282:	4b 81       	ldd	r20, Y+3	; 0x03
     284:	5c 81       	ldd	r21, Y+4	; 0x04
     286:	ca 01       	movw	r24, r20
     288:	b9 01       	movw	r22, r18
     28a:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     28e:	9b 01       	movw	r18, r22
     290:	ac 01       	movw	r20, r24
     292:	c3 01       	movw	r24, r6
     294:	b2 01       	movw	r22, r4
     296:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     29a:	9b 01       	movw	r18, r22
     29c:	ac 01       	movw	r20, r24
     29e:	69 85       	ldd	r22, Y+9	; 0x09
     2a0:	7a 85       	ldd	r23, Y+10	; 0x0a
     2a2:	8b 85       	ldd	r24, Y+11	; 0x0b
     2a4:	9c 85       	ldd	r25, Y+12	; 0x0c
     2a6:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__addsf3>
     2aa:	2b 01       	movw	r4, r22
     2ac:	3c 01       	movw	r6, r24
	propogated.kVelocity = estimate->kVelocity+dt*(accelData->AccelXYZ[0] - 9.8);
	estimate->kAltitude = propogated.kAltitude + K11*(altitude - propogated.kAltitude);
     2ae:	9b 01       	movw	r18, r22
     2b0:	ac 01       	movw	r20, r24
     2b2:	c5 01       	movw	r24, r10
     2b4:	b4 01       	movw	r22, r8
     2b6:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__subsf3>
     2ba:	4b 01       	movw	r8, r22
     2bc:	5c 01       	movw	r10, r24
     2be:	28 e6       	ldi	r18, 0x68	; 104
     2c0:	33 eb       	ldi	r19, 0xB3	; 179
     2c2:	4a e2       	ldi	r20, 0x2A	; 42
     2c4:	5f e3       	ldi	r21, 0x3F	; 63
     2c6:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     2ca:	9b 01       	movw	r18, r22
     2cc:	ac 01       	movw	r20, r24
     2ce:	c3 01       	movw	r24, r6
     2d0:	b2 01       	movw	r22, r4
     2d2:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__addsf3>
     2d6:	f1 01       	movw	r30, r2
     2d8:	60 83       	st	Z, r22
     2da:	71 83       	std	Z+1, r23	; 0x01
     2dc:	82 83       	std	Z+2, r24	; 0x02
     2de:	93 83       	std	Z+3, r25	; 0x03
void Estimate(struct KalmanStruct* estimate, struct AccelStruct* accelData, float altitude){
	struct KalmanStruct propogated;
	float dt;
	dt = Readdt();
	propogated.kAltitude = altitude+dt*estimate->kVelocity+(1/2)*(accelData->AccelXYZ[0] - 9.8)*pow(dt,2);
	propogated.kVelocity = estimate->kVelocity+dt*(accelData->AccelXYZ[0] - 9.8);
     2e0:	2d 81       	ldd	r18, Y+5	; 0x05
     2e2:	3e 81       	ldd	r19, Y+6	; 0x06
     2e4:	4f 81       	ldd	r20, Y+7	; 0x07
     2e6:	58 85       	ldd	r21, Y+8	; 0x08
     2e8:	69 81       	ldd	r22, Y+1	; 0x01
     2ea:	7a 81       	ldd	r23, Y+2	; 0x02
     2ec:	8b 81       	ldd	r24, Y+3	; 0x03
     2ee:	9c 81       	ldd	r25, Y+4	; 0x04
     2f0:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     2f4:	9b 01       	movw	r18, r22
     2f6:	ac 01       	movw	r20, r24
     2f8:	c7 01       	movw	r24, r14
     2fa:	b6 01       	movw	r22, r12
     2fc:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__addsf3>
     300:	6b 01       	movw	r12, r22
     302:	7c 01       	movw	r14, r24
	estimate->kAltitude = propogated.kAltitude + K11*(altitude - propogated.kAltitude);
	estimate->kVelocity = propogated.kVelocity + K21*(altitude - propogated.kAltitude);
     304:	2f e6       	ldi	r18, 0x6F	; 111
     306:	30 ef       	ldi	r19, 0xF0	; 240
     308:	45 e0       	ldi	r20, 0x05	; 5
     30a:	5d e3       	ldi	r21, 0x3D	; 61
     30c:	c5 01       	movw	r24, r10
     30e:	b4 01       	movw	r22, r8
     310:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     314:	9b 01       	movw	r18, r22
     316:	ac 01       	movw	r20, r24
     318:	c7 01       	movw	r24, r14
     31a:	b6 01       	movw	r22, r12
     31c:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__addsf3>
     320:	f1 01       	movw	r30, r2
     322:	64 83       	std	Z+4, r22	; 0x04
     324:	75 83       	std	Z+5, r23	; 0x05
     326:	86 83       	std	Z+6, r24	; 0x06
     328:	97 83       	std	Z+7, r25	; 0x07
	return;
}
     32a:	2c 96       	adiw	r28, 0x0c	; 12
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	de bf       	out	0x3e, r29	; 62
     332:	0f be       	out	0x3f, r0	; 63
     334:	cd bf       	out	0x3d, r28	; 61
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	1f 91       	pop	r17
     33c:	0f 91       	pop	r16
     33e:	ff 90       	pop	r15
     340:	ef 90       	pop	r14
     342:	df 90       	pop	r13
     344:	cf 90       	pop	r12
     346:	bf 90       	pop	r11
     348:	af 90       	pop	r10
     34a:	9f 90       	pop	r9
     34c:	8f 90       	pop	r8
     34e:	7f 90       	pop	r7
     350:	6f 90       	pop	r6
     352:	5f 90       	pop	r5
     354:	4f 90       	pop	r4
     356:	3f 90       	pop	r3
     358:	2f 90       	pop	r2
     35a:	08 95       	ret

0000035c <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

int main(void)
{
	dataOnlyMain();
     35c:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <dataOnlyMain>
}
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	08 95       	ret

00000366 <AccelSelect>:
#include "MPU6000.h"

void AccelSelect(void){
	SPISetMode(MODE0);
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <SPISetMode>
	PORTB = PORTB & ~(1<<CSACCEL);
     36c:	2d 98       	cbi	0x05, 5	; 5
	PORTD = PORTD | (1<<CSMAG);
     36e:	5f 9a       	sbi	0x0b, 7	; 11
	PORTB = PORTB | (1<<CSALT);
     370:	2e 9a       	sbi	0x05, 6	; 5
     372:	08 95       	ret

00000374 <AccelRelease>:
	return;
}

void AccelRelease(void){
	PORTB = PORTB | (1<<CSACCEL);
     374:	2d 9a       	sbi	0x05, 5	; 5
     376:	08 95       	ret

00000378 <WriteAccelerometer>:
	return;
}

void WriteAccelerometer(uint8_t Address, uint8_t WriteVal){
     378:	1f 93       	push	r17
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	1f 92       	push	r1
     380:	cd b7       	in	r28, 0x3d	; 61
     382:	de b7       	in	r29, 0x3e	; 62
     384:	16 2f       	mov	r17, r22
	uint8_t volatile WAddress = Address & ACCELWRITE;
     386:	8f 77       	andi	r24, 0x7F	; 127
     388:	89 83       	std	Y+1, r24	; 0x01
	AccelSelect();
     38a:	ed df       	rcall	.-38     	; 0x366 <AccelSelect>
	SPIMasterTransmit(WAddress);
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <SPIMasterTransmit>
	SPIMasterTransmit(WriteVal);
     392:	81 2f       	mov	r24, r17
     394:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <SPIMasterTransmit>
	AccelRelease();
     398:	ed df       	rcall	.-38     	; 0x374 <AccelRelease>
	return;
}
     39a:	0f 90       	pop	r0
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	1f 91       	pop	r17
     3a2:	08 95       	ret

000003a4 <ReadAccelerometer>:

uint8_t ReadAccelerometer(uint8_t Address){
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	1f 92       	push	r1
     3aa:	1f 92       	push	r1
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
	uint8_t volatile RAddress = Address | ACCELREAD;
     3b0:	80 68       	ori	r24, 0x80	; 128
     3b2:	89 83       	std	Y+1, r24	; 0x01
	uint8_t volatile datum;
	AccelSelect();
     3b4:	d8 df       	rcall	.-80     	; 0x366 <AccelSelect>
	SPIMasterTransmit(RAddress);
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <SPIMasterTransmit>
	datum = SPIRead32Bit(1);
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	0e 94 75 0e 	call	0x1cea	; 0x1cea <SPIRead32Bit>
     3c2:	6a 83       	std	Y+2, r22	; 0x02
	AccelRelease();
     3c4:	d7 df       	rcall	.-82     	; 0x374 <AccelRelease>
	return datum;
     3c6:	8a 81       	ldd	r24, Y+2	; 0x02
}
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	08 95       	ret

000003d2 <AccReadZ>:
	_delay_ms(10);
	WriteAccelerometer(GYROCONFIG,FS1000DEG);
	return;
}

int16_t AccReadZ(void){
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	00 d0       	rcall	.+0      	; 0x3d8 <AccReadZ+0x6>
     3d8:	00 d0       	rcall	.+0      	; 0x3da <AccReadZ+0x8>
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
	uint16_t volatile ValH = 0;
     3de:	1a 82       	std	Y+2, r1	; 0x02
     3e0:	19 82       	std	Y+1, r1	; 0x01
	uint16_t volatile ValL = 0;
     3e2:	1c 82       	std	Y+4, r1	; 0x04
     3e4:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t volatile Val = 0;
     3e6:	1e 82       	std	Y+6, r1	; 0x06
     3e8:	1d 82       	std	Y+5, r1	; 0x05
	ValH = ReadAccelerometer(ACCZOUTH);
     3ea:	8f e3       	ldi	r24, 0x3F	; 63
     3ec:	db df       	rcall	.-74     	; 0x3a4 <ReadAccelerometer>
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	9a 83       	std	Y+2, r25	; 0x02
     3f2:	89 83       	std	Y+1, r24	; 0x01
	ValL = ReadAccelerometer(ACCZOUTL);
     3f4:	80 e4       	ldi	r24, 0x40	; 64
     3f6:	d6 df       	rcall	.-84     	; 0x3a4 <ReadAccelerometer>
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	9c 83       	std	Y+4, r25	; 0x04
     3fc:	8b 83       	std	Y+3, r24	; 0x03
	Val = (ValH << 8) | ValL;
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	9a 81       	ldd	r25, Y+2	; 0x02
     402:	2b 81       	ldd	r18, Y+3	; 0x03
     404:	3c 81       	ldd	r19, Y+4	; 0x04
     406:	98 2f       	mov	r25, r24
     408:	88 27       	eor	r24, r24
     40a:	82 2b       	or	r24, r18
     40c:	93 2b       	or	r25, r19
     40e:	9e 83       	std	Y+6, r25	; 0x06
     410:	8d 83       	std	Y+5, r24	; 0x05
	return Val;
     412:	8d 81       	ldd	r24, Y+5	; 0x05
     414:	9e 81       	ldd	r25, Y+6	; 0x06
}
     416:	26 96       	adiw	r28, 0x06	; 6
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	f8 94       	cli
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	0f be       	out	0x3f, r0	; 63
     420:	cd bf       	out	0x3d, r28	; 61
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	08 95       	ret

00000428 <AccReadY>:

int16_t AccReadY(void){
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	00 d0       	rcall	.+0      	; 0x42e <AccReadY+0x6>
     42e:	00 d0       	rcall	.+0      	; 0x430 <AccReadY+0x8>
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
	uint16_t volatile ValH = 0;
     434:	1a 82       	std	Y+2, r1	; 0x02
     436:	19 82       	std	Y+1, r1	; 0x01
	uint16_t volatile ValL = 0;
     438:	1c 82       	std	Y+4, r1	; 0x04
     43a:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t volatile Val = 0;
     43c:	1e 82       	std	Y+6, r1	; 0x06
     43e:	1d 82       	std	Y+5, r1	; 0x05
	ValH = ReadAccelerometer(ACCYOUTH);
     440:	8d e3       	ldi	r24, 0x3D	; 61
     442:	b0 df       	rcall	.-160    	; 0x3a4 <ReadAccelerometer>
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	9a 83       	std	Y+2, r25	; 0x02
     448:	89 83       	std	Y+1, r24	; 0x01
	ValL = ReadAccelerometer(ACCYOUTL);
     44a:	8e e3       	ldi	r24, 0x3E	; 62
     44c:	ab df       	rcall	.-170    	; 0x3a4 <ReadAccelerometer>
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	8b 83       	std	Y+3, r24	; 0x03
	Val = (ValH << 8) | ValL;
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	9a 81       	ldd	r25, Y+2	; 0x02
     458:	2b 81       	ldd	r18, Y+3	; 0x03
     45a:	3c 81       	ldd	r19, Y+4	; 0x04
     45c:	98 2f       	mov	r25, r24
     45e:	88 27       	eor	r24, r24
     460:	82 2b       	or	r24, r18
     462:	93 2b       	or	r25, r19
     464:	9e 83       	std	Y+6, r25	; 0x06
     466:	8d 83       	std	Y+5, r24	; 0x05
	return Val;
     468:	8d 81       	ldd	r24, Y+5	; 0x05
     46a:	9e 81       	ldd	r25, Y+6	; 0x06
}
     46c:	26 96       	adiw	r28, 0x06	; 6
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	de bf       	out	0x3e, r29	; 62
     474:	0f be       	out	0x3f, r0	; 63
     476:	cd bf       	out	0x3d, r28	; 61
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	08 95       	ret

0000047e <AccReadX>:

int16_t AccReadX(void){
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	00 d0       	rcall	.+0      	; 0x484 <AccReadX+0x6>
     484:	00 d0       	rcall	.+0      	; 0x486 <AccReadX+0x8>
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
	uint16_t volatile ValH = 0;
     48a:	1a 82       	std	Y+2, r1	; 0x02
     48c:	19 82       	std	Y+1, r1	; 0x01
	uint16_t volatile ValL = 0;
     48e:	1c 82       	std	Y+4, r1	; 0x04
     490:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t volatile Val = 0;
     492:	1e 82       	std	Y+6, r1	; 0x06
     494:	1d 82       	std	Y+5, r1	; 0x05
	ValH = ReadAccelerometer(ACCXOUTH);
     496:	8b e3       	ldi	r24, 0x3B	; 59
     498:	85 df       	rcall	.-246    	; 0x3a4 <ReadAccelerometer>
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	9a 83       	std	Y+2, r25	; 0x02
     49e:	89 83       	std	Y+1, r24	; 0x01
	ValL = ReadAccelerometer(ACCXOUTL);
     4a0:	8c e3       	ldi	r24, 0x3C	; 60
     4a2:	80 df       	rcall	.-256    	; 0x3a4 <ReadAccelerometer>
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	9c 83       	std	Y+4, r25	; 0x04
     4a8:	8b 83       	std	Y+3, r24	; 0x03
	Val = (ValH << 8) | ValL;
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	9a 81       	ldd	r25, Y+2	; 0x02
     4ae:	2b 81       	ldd	r18, Y+3	; 0x03
     4b0:	3c 81       	ldd	r19, Y+4	; 0x04
     4b2:	98 2f       	mov	r25, r24
     4b4:	88 27       	eor	r24, r24
     4b6:	82 2b       	or	r24, r18
     4b8:	93 2b       	or	r25, r19
     4ba:	9e 83       	std	Y+6, r25	; 0x06
     4bc:	8d 83       	std	Y+5, r24	; 0x05
	return Val;
     4be:	8d 81       	ldd	r24, Y+5	; 0x05
     4c0:	9e 81       	ldd	r25, Y+6	; 0x06
}
     4c2:	26 96       	adiw	r28, 0x06	; 6
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	de bf       	out	0x3e, r29	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	cd bf       	out	0x3d, r28	; 61
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	08 95       	ret

000004d4 <GyroReadZ>:

int16_t GyroReadZ(void){
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	00 d0       	rcall	.+0      	; 0x4da <GyroReadZ+0x6>
     4da:	00 d0       	rcall	.+0      	; 0x4dc <GyroReadZ+0x8>
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
	uint16_t volatile ValH = 0;
     4e0:	1a 82       	std	Y+2, r1	; 0x02
     4e2:	19 82       	std	Y+1, r1	; 0x01
	uint16_t volatile ValL = 0;
     4e4:	1c 82       	std	Y+4, r1	; 0x04
     4e6:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t volatile Val = 0;
     4e8:	1e 82       	std	Y+6, r1	; 0x06
     4ea:	1d 82       	std	Y+5, r1	; 0x05
	ValH = ReadAccelerometer(GYROZOUTH);
     4ec:	87 e4       	ldi	r24, 0x47	; 71
     4ee:	5a df       	rcall	.-332    	; 0x3a4 <ReadAccelerometer>
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	9a 83       	std	Y+2, r25	; 0x02
     4f4:	89 83       	std	Y+1, r24	; 0x01
	ValL = ReadAccelerometer(GYROZOUTL);
     4f6:	88 e4       	ldi	r24, 0x48	; 72
     4f8:	55 df       	rcall	.-342    	; 0x3a4 <ReadAccelerometer>
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	9c 83       	std	Y+4, r25	; 0x04
     4fe:	8b 83       	std	Y+3, r24	; 0x03
	Val = (ValH << 8) | ValL;
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	9a 81       	ldd	r25, Y+2	; 0x02
     504:	2b 81       	ldd	r18, Y+3	; 0x03
     506:	3c 81       	ldd	r19, Y+4	; 0x04
     508:	98 2f       	mov	r25, r24
     50a:	88 27       	eor	r24, r24
     50c:	82 2b       	or	r24, r18
     50e:	93 2b       	or	r25, r19
     510:	9e 83       	std	Y+6, r25	; 0x06
     512:	8d 83       	std	Y+5, r24	; 0x05
	return Val;
     514:	8d 81       	ldd	r24, Y+5	; 0x05
     516:	9e 81       	ldd	r25, Y+6	; 0x06
}
     518:	26 96       	adiw	r28, 0x06	; 6
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	f8 94       	cli
     51e:	de bf       	out	0x3e, r29	; 62
     520:	0f be       	out	0x3f, r0	; 63
     522:	cd bf       	out	0x3d, r28	; 61
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <GyroReadY>:

int16_t GyroReadY(void){
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	00 d0       	rcall	.+0      	; 0x530 <GyroReadY+0x6>
     530:	00 d0       	rcall	.+0      	; 0x532 <GyroReadY+0x8>
     532:	cd b7       	in	r28, 0x3d	; 61
     534:	de b7       	in	r29, 0x3e	; 62
	uint16_t volatile ValH = 0;
     536:	1a 82       	std	Y+2, r1	; 0x02
     538:	19 82       	std	Y+1, r1	; 0x01
	uint16_t volatile ValL = 0;
     53a:	1c 82       	std	Y+4, r1	; 0x04
     53c:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t volatile Val = 0;
     53e:	1e 82       	std	Y+6, r1	; 0x06
     540:	1d 82       	std	Y+5, r1	; 0x05
	ValH = ReadAccelerometer(GYROYOUTH);
     542:	85 e4       	ldi	r24, 0x45	; 69
     544:	2f df       	rcall	.-418    	; 0x3a4 <ReadAccelerometer>
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	9a 83       	std	Y+2, r25	; 0x02
     54a:	89 83       	std	Y+1, r24	; 0x01
	ValL = ReadAccelerometer(GYROYOUTL);
     54c:	86 e4       	ldi	r24, 0x46	; 70
     54e:	2a df       	rcall	.-428    	; 0x3a4 <ReadAccelerometer>
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	9c 83       	std	Y+4, r25	; 0x04
     554:	8b 83       	std	Y+3, r24	; 0x03
	Val = (ValH << 8) | ValL;
     556:	89 81       	ldd	r24, Y+1	; 0x01
     558:	9a 81       	ldd	r25, Y+2	; 0x02
     55a:	2b 81       	ldd	r18, Y+3	; 0x03
     55c:	3c 81       	ldd	r19, Y+4	; 0x04
     55e:	98 2f       	mov	r25, r24
     560:	88 27       	eor	r24, r24
     562:	82 2b       	or	r24, r18
     564:	93 2b       	or	r25, r19
     566:	9e 83       	std	Y+6, r25	; 0x06
     568:	8d 83       	std	Y+5, r24	; 0x05
	return Val;
     56a:	8d 81       	ldd	r24, Y+5	; 0x05
     56c:	9e 81       	ldd	r25, Y+6	; 0x06
}
     56e:	26 96       	adiw	r28, 0x06	; 6
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	f8 94       	cli
     574:	de bf       	out	0x3e, r29	; 62
     576:	0f be       	out	0x3f, r0	; 63
     578:	cd bf       	out	0x3d, r28	; 61
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	08 95       	ret

00000580 <GyroReadX>:

int16_t GyroReadX(void){
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	00 d0       	rcall	.+0      	; 0x586 <GyroReadX+0x6>
     586:	00 d0       	rcall	.+0      	; 0x588 <GyroReadX+0x8>
     588:	cd b7       	in	r28, 0x3d	; 61
     58a:	de b7       	in	r29, 0x3e	; 62
	uint16_t volatile ValH = 0;
     58c:	1a 82       	std	Y+2, r1	; 0x02
     58e:	19 82       	std	Y+1, r1	; 0x01
	uint16_t volatile ValL = 0;
     590:	1c 82       	std	Y+4, r1	; 0x04
     592:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t volatile Val = 0;
     594:	1e 82       	std	Y+6, r1	; 0x06
     596:	1d 82       	std	Y+5, r1	; 0x05
	ValH = ReadAccelerometer(GYROXOUTH);
     598:	83 e4       	ldi	r24, 0x43	; 67
     59a:	04 df       	rcall	.-504    	; 0x3a4 <ReadAccelerometer>
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	9a 83       	std	Y+2, r25	; 0x02
     5a0:	89 83       	std	Y+1, r24	; 0x01
	ValL = ReadAccelerometer(GYROXOUTL);
     5a2:	84 e4       	ldi	r24, 0x44	; 68
     5a4:	ff de       	rcall	.-514    	; 0x3a4 <ReadAccelerometer>
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	9c 83       	std	Y+4, r25	; 0x04
     5aa:	8b 83       	std	Y+3, r24	; 0x03
	Val = (ValH << 8) | ValL;
     5ac:	89 81       	ldd	r24, Y+1	; 0x01
     5ae:	9a 81       	ldd	r25, Y+2	; 0x02
     5b0:	2b 81       	ldd	r18, Y+3	; 0x03
     5b2:	3c 81       	ldd	r19, Y+4	; 0x04
     5b4:	98 2f       	mov	r25, r24
     5b6:	88 27       	eor	r24, r24
     5b8:	82 2b       	or	r24, r18
     5ba:	93 2b       	or	r25, r19
     5bc:	9e 83       	std	Y+6, r25	; 0x06
     5be:	8d 83       	std	Y+5, r24	; 0x05
	return Val;
     5c0:	8d 81       	ldd	r24, Y+5	; 0x05
     5c2:	9e 81       	ldd	r25, Y+6	; 0x06
}
     5c4:	26 96       	adiw	r28, 0x06	; 6
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	de bf       	out	0x3e, r29	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	cd bf       	out	0x3d, r28	; 61
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	08 95       	ret

000005d6 <GetAccelGyroXYZ>:

void GetAccelGyroXYZ(struct AccelStruct* AccelData){
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	1f 92       	push	r1
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
     5e8:	7c 01       	movw	r14, r24
	uint8_t volatile i = 0;
     5ea:	19 82       	std	Y+1, r1	; 0x01
	AccelData->AccelXYZ[0] = AccReadX();
     5ec:	48 df       	rcall	.-368    	; 0x47e <AccReadX>
     5ee:	bc 01       	movw	r22, r24
     5f0:	99 0f       	add	r25, r25
     5f2:	88 0b       	sbc	r24, r24
     5f4:	99 0b       	sbc	r25, r25
     5f6:	0e 94 77 10 	call	0x20ee	; 0x20ee <__floatsisf>
     5fa:	f7 01       	movw	r30, r14
     5fc:	60 83       	st	Z, r22
     5fe:	71 83       	std	Z+1, r23	; 0x01
     600:	82 83       	std	Z+2, r24	; 0x02
     602:	93 83       	std	Z+3, r25	; 0x03
	AccelData->AccelXYZ[1] = AccReadY();
     604:	11 df       	rcall	.-478    	; 0x428 <AccReadY>
     606:	bc 01       	movw	r22, r24
     608:	99 0f       	add	r25, r25
     60a:	88 0b       	sbc	r24, r24
     60c:	99 0b       	sbc	r25, r25
     60e:	0e 94 77 10 	call	0x20ee	; 0x20ee <__floatsisf>
     612:	f7 01       	movw	r30, r14
     614:	64 83       	std	Z+4, r22	; 0x04
     616:	75 83       	std	Z+5, r23	; 0x05
     618:	86 83       	std	Z+6, r24	; 0x06
     61a:	97 83       	std	Z+7, r25	; 0x07
	AccelData->AccelXYZ[2] = AccReadZ();
     61c:	da de       	rcall	.-588    	; 0x3d2 <AccReadZ>
     61e:	bc 01       	movw	r22, r24
     620:	99 0f       	add	r25, r25
     622:	88 0b       	sbc	r24, r24
     624:	99 0b       	sbc	r25, r25
     626:	0e 94 77 10 	call	0x20ee	; 0x20ee <__floatsisf>
     62a:	f7 01       	movw	r30, r14
     62c:	60 87       	std	Z+8, r22	; 0x08
     62e:	71 87       	std	Z+9, r23	; 0x09
     630:	82 87       	std	Z+10, r24	; 0x0a
     632:	93 87       	std	Z+11, r25	; 0x0b
	AccelData->GyroXYZ[0] = GyroReadX();
     634:	a5 df       	rcall	.-182    	; 0x580 <GyroReadX>
     636:	bc 01       	movw	r22, r24
     638:	99 0f       	add	r25, r25
     63a:	88 0b       	sbc	r24, r24
     63c:	99 0b       	sbc	r25, r25
     63e:	0e 94 77 10 	call	0x20ee	; 0x20ee <__floatsisf>
     642:	f7 01       	movw	r30, r14
     644:	64 87       	std	Z+12, r22	; 0x0c
     646:	75 87       	std	Z+13, r23	; 0x0d
     648:	86 87       	std	Z+14, r24	; 0x0e
     64a:	97 87       	std	Z+15, r25	; 0x0f
	AccelData->GyroXYZ[1] = GyroReadY();
     64c:	6e df       	rcall	.-292    	; 0x52a <GyroReadY>
     64e:	bc 01       	movw	r22, r24
     650:	99 0f       	add	r25, r25
     652:	88 0b       	sbc	r24, r24
     654:	99 0b       	sbc	r25, r25
     656:	0e 94 77 10 	call	0x20ee	; 0x20ee <__floatsisf>
     65a:	f7 01       	movw	r30, r14
     65c:	60 8b       	std	Z+16, r22	; 0x10
     65e:	71 8b       	std	Z+17, r23	; 0x11
     660:	82 8b       	std	Z+18, r24	; 0x12
     662:	93 8b       	std	Z+19, r25	; 0x13
	AccelData->GyroXYZ[2] = GyroReadZ();
     664:	37 df       	rcall	.-402    	; 0x4d4 <GyroReadZ>
     666:	bc 01       	movw	r22, r24
     668:	99 0f       	add	r25, r25
     66a:	88 0b       	sbc	r24, r24
     66c:	99 0b       	sbc	r25, r25
     66e:	0e 94 77 10 	call	0x20ee	; 0x20ee <__floatsisf>
     672:	f7 01       	movw	r30, r14
     674:	64 8b       	std	Z+20, r22	; 0x14
     676:	75 8b       	std	Z+21, r23	; 0x15
     678:	86 8b       	std	Z+22, r24	; 0x16
     67a:	97 8b       	std	Z+23, r25	; 0x17
	for (i; i<3; i++){
     67c:	89 81       	ldd	r24, Y+1	; 0x01
     67e:	89 81       	ldd	r24, Y+1	; 0x01
     680:	83 30       	cpi	r24, 0x03	; 3
     682:	08 f0       	brcs	.+2      	; 0x686 <GetAccelGyroXYZ+0xb0>
     684:	46 c0       	rjmp	.+140    	; 0x712 <GetAccelGyroXYZ+0x13c>
		AccelData->AccelXYZ[i] = ACCELCON*AccelData->AccelXYZ[i];
     686:	99 81       	ldd	r25, Y+1	; 0x01
     688:	89 81       	ldd	r24, Y+1	; 0x01
     68a:	87 01       	movw	r16, r14
     68c:	f4 e0       	ldi	r31, 0x04	; 4
     68e:	9f 9f       	mul	r25, r31
     690:	00 0d       	add	r16, r0
     692:	11 1d       	adc	r17, r1
     694:	11 24       	eor	r1, r1
     696:	f7 01       	movw	r30, r14
     698:	24 e0       	ldi	r18, 0x04	; 4
     69a:	82 9f       	mul	r24, r18
     69c:	e0 0d       	add	r30, r0
     69e:	f1 1d       	adc	r31, r1
     6a0:	11 24       	eor	r1, r1
     6a2:	2d ec       	ldi	r18, 0xCD	; 205
     6a4:	3c ec       	ldi	r19, 0xCC	; 204
     6a6:	4c e9       	ldi	r20, 0x9C	; 156
     6a8:	5b eb       	ldi	r21, 0xBB	; 187
     6aa:	60 81       	ld	r22, Z
     6ac:	71 81       	ldd	r23, Z+1	; 0x01
     6ae:	82 81       	ldd	r24, Z+2	; 0x02
     6b0:	93 81       	ldd	r25, Z+3	; 0x03
     6b2:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     6b6:	f8 01       	movw	r30, r16
     6b8:	60 83       	st	Z, r22
     6ba:	71 83       	std	Z+1, r23	; 0x01
     6bc:	82 83       	std	Z+2, r24	; 0x02
     6be:	93 83       	std	Z+3, r25	; 0x03
		AccelData->GyroXYZ[i] = GYROCON*AccelData->GyroXYZ[i];
     6c0:	09 81       	ldd	r16, Y+1	; 0x01
     6c2:	e9 81       	ldd	r30, Y+1	; 0x01
     6c4:	10 e0       	ldi	r17, 0x00	; 0
     6c6:	0d 5f       	subi	r16, 0xFD	; 253
     6c8:	1f 4f       	sbci	r17, 0xFF	; 255
     6ca:	00 0f       	add	r16, r16
     6cc:	11 1f       	adc	r17, r17
     6ce:	00 0f       	add	r16, r16
     6d0:	11 1f       	adc	r17, r17
     6d2:	0e 0d       	add	r16, r14
     6d4:	1f 1d       	adc	r17, r15
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	33 96       	adiw	r30, 0x03	; 3
     6da:	ee 0f       	add	r30, r30
     6dc:	ff 1f       	adc	r31, r31
     6de:	ee 0f       	add	r30, r30
     6e0:	ff 1f       	adc	r31, r31
     6e2:	ee 0d       	add	r30, r14
     6e4:	ff 1d       	adc	r31, r15
     6e6:	20 e9       	ldi	r18, 0x90	; 144
     6e8:	31 ec       	ldi	r19, 0xC1	; 193
     6ea:	49 ef       	ldi	r20, 0xF9	; 249
     6ec:	5c e3       	ldi	r21, 0x3C	; 60
     6ee:	60 81       	ld	r22, Z
     6f0:	71 81       	ldd	r23, Z+1	; 0x01
     6f2:	82 81       	ldd	r24, Z+2	; 0x02
     6f4:	93 81       	ldd	r25, Z+3	; 0x03
     6f6:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     6fa:	f8 01       	movw	r30, r16
     6fc:	60 83       	st	Z, r22
     6fe:	71 83       	std	Z+1, r23	; 0x01
     700:	82 83       	std	Z+2, r24	; 0x02
     702:	93 83       	std	Z+3, r25	; 0x03
	AccelData->AccelXYZ[1] = AccReadY();
	AccelData->AccelXYZ[2] = AccReadZ();
	AccelData->GyroXYZ[0] = GyroReadX();
	AccelData->GyroXYZ[1] = GyroReadY();
	AccelData->GyroXYZ[2] = GyroReadZ();
	for (i; i<3; i++){
     704:	89 81       	ldd	r24, Y+1	; 0x01
     706:	8f 5f       	subi	r24, 0xFF	; 255
     708:	89 83       	std	Y+1, r24	; 0x01
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	83 30       	cpi	r24, 0x03	; 3
     70e:	08 f4       	brcc	.+2      	; 0x712 <GetAccelGyroXYZ+0x13c>
     710:	ba cf       	rjmp	.-140    	; 0x686 <GetAccelGyroXYZ+0xb0>
		AccelData->AccelXYZ[i] = ACCELCON*AccelData->AccelXYZ[i];
		AccelData->GyroXYZ[i] = GYROCON*AccelData->GyroXYZ[i];
	}
	return;
}
     712:	0f 90       	pop	r0
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	ff 90       	pop	r15
     71e:	ef 90       	pop	r14
     720:	08 95       	ret

00000722 <ResetAccelerometer>:

void ResetAccelerometer(void){
	WriteAccelerometer(PWRMNGMNT1,RESET);
     722:	60 e8       	ldi	r22, 0x80	; 128
     724:	8b e6       	ldi	r24, 0x6B	; 107
     726:	28 de       	rcall	.-944    	; 0x378 <WriteAccelerometer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     728:	8f e1       	ldi	r24, 0x1F	; 31
     72a:	9e e4       	ldi	r25, 0x4E	; 78
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <ResetAccelerometer+0xa>
     730:	00 c0       	rjmp	.+0      	; 0x732 <ResetAccelerometer+0x10>
     732:	00 00       	nop
	_delay_ms(10);
	WriteAccelerometer(SIGNALRESET,SRESET);
     734:	67 e0       	ldi	r22, 0x07	; 7
     736:	88 e6       	ldi	r24, 0x68	; 104
     738:	1f de       	rcall	.-962    	; 0x378 <WriteAccelerometer>
     73a:	8f e1       	ldi	r24, 0x1F	; 31
     73c:	9e e4       	ldi	r25, 0x4E	; 78
     73e:	01 97       	sbiw	r24, 0x01	; 1
     740:	f1 f7       	brne	.-4      	; 0x73e <ResetAccelerometer+0x1c>
     742:	00 c0       	rjmp	.+0      	; 0x744 <ResetAccelerometer+0x22>
     744:	00 00       	nop
	_delay_ms(10);
	WriteAccelerometer(SIGNALRESET,0);
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	88 e6       	ldi	r24, 0x68	; 104
     74a:	16 ce       	rjmp	.-980    	; 0x378 <WriteAccelerometer>
     74c:	08 95       	ret

0000074e <InitAccel>:
	datum = SPIRead32Bit(1);
	AccelRelease();
	return datum;
}

void InitAccel(void){
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	1f 92       	push	r1
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
	uint8_t volatile val;
	DDRB = DDRB | (1<<CSACCEL);
     758:	25 9a       	sbi	0x04, 5	; 4
	ResetAccelerometer();
     75a:	e3 df       	rcall	.-58     	; 0x722 <ResetAccelerometer>
     75c:	8f ec       	ldi	r24, 0xCF	; 207
     75e:	97 e0       	ldi	r25, 0x07	; 7
     760:	01 97       	sbiw	r24, 0x01	; 1
     762:	f1 f7       	brne	.-4      	; 0x760 <InitAccel+0x12>
     764:	00 c0       	rjmp	.+0      	; 0x766 <InitAccel+0x18>
     766:	00 00       	nop
	_delay_ms(1);
	WriteAccelerometer(USERCTRL,I2CIFDIS);
     768:	60 e1       	ldi	r22, 0x10	; 16
     76a:	8a e6       	ldi	r24, 0x6A	; 106
     76c:	05 de       	rcall	.-1014   	; 0x378 <WriteAccelerometer>
	WriteAccelerometer(PWRMNGMNT1,0x00);
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	8b e6       	ldi	r24, 0x6B	; 107
     772:	02 de       	rcall	.-1020   	; 0x378 <WriteAccelerometer>
	val = ReadAccelerometer(0x75);
     774:	85 e7       	ldi	r24, 0x75	; 117
     776:	16 de       	rcall	.-980    	; 0x3a4 <ReadAccelerometer>
     778:	89 83       	std	Y+1, r24	; 0x01
	val = val >> 1;
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	86 95       	lsr	r24
     77e:	89 83       	std	Y+1, r24	; 0x01
     780:	8f e1       	ldi	r24, 0x1F	; 31
     782:	9e e4       	ldi	r25, 0x4E	; 78
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	f1 f7       	brne	.-4      	; 0x784 <InitAccel+0x36>
     788:	00 c0       	rjmp	.+0      	; 0x78a <InitAccel+0x3c>
     78a:	00 00       	nop
	_delay_ms(10);
	WriteAccelerometer(ACCELCONFIG,AFS16G);
     78c:	68 e1       	ldi	r22, 0x18	; 24
     78e:	8c e1       	ldi	r24, 0x1C	; 28
     790:	f3 dd       	rcall	.-1050   	; 0x378 <WriteAccelerometer>
     792:	8f e1       	ldi	r24, 0x1F	; 31
     794:	9e e4       	ldi	r25, 0x4E	; 78
     796:	01 97       	sbiw	r24, 0x01	; 1
     798:	f1 f7       	brne	.-4      	; 0x796 <InitAccel+0x48>
     79a:	00 c0       	rjmp	.+0      	; 0x79c <InitAccel+0x4e>
     79c:	00 00       	nop
	_delay_ms(10);
	WriteAccelerometer(GYROCONFIG,FS1000DEG);
     79e:	60 e1       	ldi	r22, 0x10	; 16
     7a0:	8b e1       	ldi	r24, 0x1B	; 27
     7a2:	ea dd       	rcall	.-1068   	; 0x378 <WriteAccelerometer>
	return;
}
     7a4:	0f 90       	pop	r0
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	08 95       	ret

000007ac <AltSelect>:
#include "MS5607.h"

void AltSelect(void){
	SPISetMode(MODE0);
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <SPISetMode>
	PORTB = PORTB | (1<<CSACCEL);
     7b2:	2d 9a       	sbi	0x05, 5	; 5
	PORTD = PORTD | (1<<CSMAG);
     7b4:	5f 9a       	sbi	0x0b, 7	; 11
	PORTB = PORTB & ~(1<<CSALT);
     7b6:	2e 98       	cbi	0x05, 6	; 5
     7b8:	08 95       	ret

000007ba <AltRelease>:
	return;
}

void AltRelease(void){
	PORTB = PORTB | (1<<CSALT);
     7ba:	2e 9a       	sbi	0x05, 6	; 5
     7bc:	08 95       	ret

000007be <AltReset>:
	return;
}

void AltReset(void){
	AltSelect();
     7be:	f6 df       	rcall	.-20     	; 0x7ac <AltSelect>
	SPIMasterTransmit(ALTRESET);
     7c0:	8e e1       	ldi	r24, 0x1E	; 30
     7c2:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <SPIMasterTransmit>
     7c6:	8f e6       	ldi	r24, 0x6F	; 111
     7c8:	97 e1       	ldi	r25, 0x17	; 23
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	f1 f7       	brne	.-4      	; 0x7ca <AltReset+0xc>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <AltReset+0x12>
     7d0:	00 00       	nop
	_delay_ms(3);
	AltRelease();
     7d2:	f3 cf       	rjmp	.-26     	; 0x7ba <AltRelease>
     7d4:	08 95       	ret

000007d6 <AltReadProm>:
	return;
}

uint16_t AltReadProm(uint8_t PromAddr){
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	1f 92       	push	r1
     7de:	1f 92       	push	r1
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
     7e4:	18 2f       	mov	r17, r24
	uint16_t volatile ReadByte;
	AltSelect();
     7e6:	e2 df       	rcall	.-60     	; 0x7ac <AltSelect>
	SPIMasterTransmit(PromAddr);
     7e8:	81 2f       	mov	r24, r17
     7ea:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <SPIMasterTransmit>
	ReadByte = SPIRead32Bit(2);
     7ee:	82 e0       	ldi	r24, 0x02	; 2
     7f0:	0e 94 75 0e 	call	0x1cea	; 0x1cea <SPIRead32Bit>
     7f4:	7a 83       	std	Y+2, r23	; 0x02
     7f6:	69 83       	std	Y+1, r22	; 0x01
	AltRelease();
     7f8:	e0 df       	rcall	.-64     	; 0x7ba <AltRelease>
	return ReadByte;
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	9a 81       	ldd	r25, Y+2	; 0x02
}
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	08 95       	ret

0000080a <AltReadCalCoeff>:

void AltReadCalCoeff(uint16_t* CalCoeff){
     80a:	ef 92       	push	r14
     80c:	ff 92       	push	r15
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	1f 92       	push	r1
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	7c 01       	movw	r14, r24
	uint8_t volatile PromOffset = 1;
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	89 83       	std	Y+1, r24	; 0x01
	for (PromOffset; PromOffset < 8; PromOffset++){
     822:	89 81       	ldd	r24, Y+1	; 0x01
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	88 30       	cpi	r24, 0x08	; 8
     828:	98 f4       	brcc	.+38     	; 0x850 <AltReadCalCoeff+0x46>
		CalCoeff[PromOffset] = AltReadProm(ALTPROM + (PromOffset << 1));
     82a:	09 81       	ldd	r16, Y+1	; 0x01
     82c:	10 e0       	ldi	r17, 0x00	; 0
     82e:	00 0f       	add	r16, r16
     830:	11 1f       	adc	r17, r17
     832:	0e 0d       	add	r16, r14
     834:	1f 1d       	adc	r17, r15
     836:	89 81       	ldd	r24, Y+1	; 0x01
     838:	88 0f       	add	r24, r24
     83a:	80 56       	subi	r24, 0x60	; 96
     83c:	cc df       	rcall	.-104    	; 0x7d6 <AltReadProm>
     83e:	f8 01       	movw	r30, r16
     840:	91 83       	std	Z+1, r25	; 0x01
     842:	80 83       	st	Z, r24
	return ReadByte;
}

void AltReadCalCoeff(uint16_t* CalCoeff){
	uint8_t volatile PromOffset = 1;
	for (PromOffset; PromOffset < 8; PromOffset++){
     844:	99 81       	ldd	r25, Y+1	; 0x01
     846:	9f 5f       	subi	r25, 0xFF	; 255
     848:	99 83       	std	Y+1, r25	; 0x01
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	88 30       	cpi	r24, 0x08	; 8
     84e:	68 f3       	brcs	.-38     	; 0x82a <AltReadCalCoeff+0x20>
		CalCoeff[PromOffset] = AltReadProm(ALTPROM + (PromOffset << 1));
	}
	return;
}
     850:	0f 90       	pop	r0
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	ff 90       	pop	r15
     85c:	ef 90       	pop	r14
     85e:	08 95       	ret

00000860 <InitAltimeter>:

void InitAltimeter(uint16_t* CalCoeff){
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	ec 01       	movw	r28, r24
	DDRB = DDRB | (1<<CSALT);
     866:	26 9a       	sbi	0x04, 6	; 4
	AltReset();
     868:	aa df       	rcall	.-172    	; 0x7be <AltReset>
	AltReadCalCoeff(CalCoeff);
     86a:	ce 01       	movw	r24, r28
     86c:	ce df       	rcall	.-100    	; 0x80a <AltReadCalCoeff>
	return;
}
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <InitTempConv>:

void InitTempConv(void){
	AltSelect();
     874:	9b df       	rcall	.-202    	; 0x7ac <AltSelect>
	SPIMasterTransmit(ALTFASTTEMPCONV);
     876:	80 e5       	ldi	r24, 0x50	; 80
     878:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <SPIMasterTransmit>
	AltRelease();
     87c:	9e df       	rcall	.-196    	; 0x7ba <AltRelease>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     87e:	8f ec       	ldi	r24, 0xCF	; 207
     880:	97 e0       	ldi	r25, 0x07	; 7
     882:	01 97       	sbiw	r24, 0x01	; 1
     884:	f1 f7       	brne	.-4      	; 0x882 <InitTempConv+0xe>
     886:	00 c0       	rjmp	.+0      	; 0x888 <InitTempConv+0x14>
     888:	00 00       	nop
     88a:	08 95       	ret

0000088c <InitPresConv>:
	_delay_us(1000);
	return;
}

void InitPresConv(void){
	AltSelect();
     88c:	8f df       	rcall	.-226    	; 0x7ac <AltSelect>
	SPIMasterTransmit(ALTFASTPRESCONV);
     88e:	80 e4       	ldi	r24, 0x40	; 64
     890:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <SPIMasterTransmit>
	AltRelease();
     894:	92 df       	rcall	.-220    	; 0x7ba <AltRelease>
     896:	8f ec       	ldi	r24, 0xCF	; 207
     898:	97 e0       	ldi	r25, 0x07	; 7
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	f1 f7       	brne	.-4      	; 0x89a <InitPresConv+0xe>
     89e:	00 c0       	rjmp	.+0      	; 0x8a0 <InitPresConv+0x14>
     8a0:	00 00       	nop
     8a2:	08 95       	ret

000008a4 <ReadAltimeter>:
	_delay_us(1000);
	return;
}

uint32_t ReadAltimeter(void){
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	00 d0       	rcall	.+0      	; 0x8aa <ReadAltimeter+0x6>
     8aa:	1f 92       	push	r1
     8ac:	cd b7       	in	r28, 0x3d	; 61
     8ae:	de b7       	in	r29, 0x3e	; 62
	uint32_t volatile datum;
	AltSelect();
     8b0:	7d df       	rcall	.-262    	; 0x7ac <AltSelect>
	SPIMasterTransmit(ALTADCREAD);
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <SPIMasterTransmit>
	datum = SPIRead32Bit(3);
     8b8:	83 e0       	ldi	r24, 0x03	; 3
     8ba:	0e 94 75 0e 	call	0x1cea	; 0x1cea <SPIRead32Bit>
     8be:	69 83       	std	Y+1, r22	; 0x01
     8c0:	7a 83       	std	Y+2, r23	; 0x02
     8c2:	8b 83       	std	Y+3, r24	; 0x03
     8c4:	9c 83       	std	Y+4, r25	; 0x04
	AltRelease();
     8c6:	79 df       	rcall	.-270    	; 0x7ba <AltRelease>
	return datum;
     8c8:	69 81       	ldd	r22, Y+1	; 0x01
     8ca:	7a 81       	ldd	r23, Y+2	; 0x02
     8cc:	8b 81       	ldd	r24, Y+3	; 0x03
     8ce:	9c 81       	ldd	r25, Y+4	; 0x04
}
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <CalcPT>:

void CalcPT(uint32_t* PT, uint16_t* CalCoeff, int32_t* CPT){
     8de:	2f 92       	push	r2
     8e0:	3f 92       	push	r3
     8e2:	4f 92       	push	r4
     8e4:	5f 92       	push	r5
     8e6:	6f 92       	push	r6
     8e8:	7f 92       	push	r7
     8ea:	8f 92       	push	r8
     8ec:	9f 92       	push	r9
     8ee:	af 92       	push	r10
     8f0:	bf 92       	push	r11
     8f2:	cf 92       	push	r12
     8f4:	df 92       	push	r13
     8f6:	ef 92       	push	r14
     8f8:	ff 92       	push	r15
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	cd b7       	in	r28, 0x3d	; 61
     904:	de b7       	in	r29, 0x3e	; 62
     906:	6e 97       	sbiw	r28, 0x1e	; 30
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	f8 94       	cli
     90c:	de bf       	out	0x3e, r29	; 62
     90e:	0f be       	out	0x3f, r0	; 63
     910:	cd bf       	out	0x3d, r28	; 61
     912:	8c 01       	movw	r16, r24
     914:	3b 01       	movw	r6, r22
     916:	4a 01       	movw	r8, r20
	int32_t volatile dT;
	int64_t volatile OFF;
	int64_t volatile SENS;
	dT=PT[1]-CalCoeff[5]*pow(2,8);
     918:	fc 01       	movw	r30, r24
     91a:	64 81       	ldd	r22, Z+4	; 0x04
     91c:	75 81       	ldd	r23, Z+5	; 0x05
     91e:	86 81       	ldd	r24, Z+6	; 0x06
     920:	97 81       	ldd	r25, Z+7	; 0x07
     922:	0e 94 75 10 	call	0x20ea	; 0x20ea <__floatunsisf>
     926:	6b 01       	movw	r12, r22
     928:	7c 01       	movw	r14, r24
     92a:	f3 01       	movw	r30, r6
     92c:	82 85       	ldd	r24, Z+10	; 0x0a
     92e:	93 85       	ldd	r25, Z+11	; 0x0b
     930:	bc 01       	movw	r22, r24
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e 94 75 10 	call	0x20ea	; 0x20ea <__floatunsisf>
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e8       	ldi	r20, 0x80	; 128
     940:	53 e4       	ldi	r21, 0x43	; 67
     942:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     946:	9b 01       	movw	r18, r22
     948:	ac 01       	movw	r20, r24
     94a:	c7 01       	movw	r24, r14
     94c:	b6 01       	movw	r22, r12
     94e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__subsf3>
     952:	0e 94 40 10 	call	0x2080	; 0x2080 <__fixsfsi>
     956:	69 83       	std	Y+1, r22	; 0x01
     958:	7a 83       	std	Y+2, r23	; 0x02
     95a:	8b 83       	std	Y+3, r24	; 0x03
     95c:	9c 83       	std	Y+4, r25	; 0x04
	OFF=CalCoeff[2]*pow(2,17)+dT*CalCoeff[4]/pow(2,6);
     95e:	c9 80       	ldd	r12, Y+1	; 0x01
     960:	da 80       	ldd	r13, Y+2	; 0x02
     962:	eb 80       	ldd	r14, Y+3	; 0x03
     964:	fc 80       	ldd	r15, Y+4	; 0x04
     966:	f3 01       	movw	r30, r6
     968:	64 81       	ldd	r22, Z+4	; 0x04
     96a:	75 81       	ldd	r23, Z+5	; 0x05
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	0e 94 75 10 	call	0x20ea	; 0x20ea <__floatunsisf>
     974:	20 e0       	ldi	r18, 0x00	; 0
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	40 e0       	ldi	r20, 0x00	; 0
     97a:	58 e4       	ldi	r21, 0x48	; 72
     97c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     980:	1b 01       	movw	r2, r22
     982:	2c 01       	movw	r4, r24
     984:	f3 01       	movw	r30, r6
     986:	a0 85       	ldd	r26, Z+8	; 0x08
     988:	b1 85       	ldd	r27, Z+9	; 0x09
     98a:	a7 01       	movw	r20, r14
     98c:	96 01       	movw	r18, r12
     98e:	0e 94 b1 12 	call	0x2562	; 0x2562 <__muluhisi3>
     992:	0e 94 77 10 	call	0x20ee	; 0x20ee <__floatsisf>
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	40 e8       	ldi	r20, 0x80	; 128
     99c:	5c e3       	ldi	r21, 0x3C	; 60
     99e:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     9a2:	9b 01       	movw	r18, r22
     9a4:	ac 01       	movw	r20, r24
     9a6:	c2 01       	movw	r24, r4
     9a8:	b1 01       	movw	r22, r2
     9aa:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__addsf3>
     9ae:	0e 94 06 10 	call	0x200c	; 0x200c <__fixsfdi>
     9b2:	2d 83       	std	Y+5, r18	; 0x05
     9b4:	3e 83       	std	Y+6, r19	; 0x06
     9b6:	4f 83       	std	Y+7, r20	; 0x07
     9b8:	58 87       	std	Y+8, r21	; 0x08
     9ba:	69 87       	std	Y+9, r22	; 0x09
     9bc:	7a 87       	std	Y+10, r23	; 0x0a
     9be:	8b 87       	std	Y+11, r24	; 0x0b
     9c0:	9c 87       	std	Y+12, r25	; 0x0c
	SENS=CalCoeff[1]*pow(2,16)+dT*CalCoeff[3]/pow(2,7);
     9c2:	c9 80       	ldd	r12, Y+1	; 0x01
     9c4:	da 80       	ldd	r13, Y+2	; 0x02
     9c6:	eb 80       	ldd	r14, Y+3	; 0x03
     9c8:	fc 80       	ldd	r15, Y+4	; 0x04
     9ca:	f3 01       	movw	r30, r6
     9cc:	62 81       	ldd	r22, Z+2	; 0x02
     9ce:	73 81       	ldd	r23, Z+3	; 0x03
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	0e 94 75 10 	call	0x20ea	; 0x20ea <__floatunsisf>
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	40 e8       	ldi	r20, 0x80	; 128
     9de:	57 e4       	ldi	r21, 0x47	; 71
     9e0:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     9e4:	1b 01       	movw	r2, r22
     9e6:	2c 01       	movw	r4, r24
     9e8:	f3 01       	movw	r30, r6
     9ea:	a6 81       	ldd	r26, Z+6	; 0x06
     9ec:	b7 81       	ldd	r27, Z+7	; 0x07
     9ee:	a7 01       	movw	r20, r14
     9f0:	96 01       	movw	r18, r12
     9f2:	0e 94 b1 12 	call	0x2562	; 0x2562 <__muluhisi3>
     9f6:	0e 94 77 10 	call	0x20ee	; 0x20ee <__floatsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	5c e3       	ldi	r21, 0x3C	; 60
     a02:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	c2 01       	movw	r24, r4
     a0c:	b1 01       	movw	r22, r2
     a0e:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__addsf3>
     a12:	0e 94 06 10 	call	0x200c	; 0x200c <__fixsfdi>
     a16:	2d 87       	std	Y+13, r18	; 0x0d
     a18:	3e 87       	std	Y+14, r19	; 0x0e
     a1a:	4f 87       	std	Y+15, r20	; 0x0f
     a1c:	58 8b       	std	Y+16, r21	; 0x10
     a1e:	69 8b       	std	Y+17, r22	; 0x11
     a20:	7a 8b       	std	Y+18, r23	; 0x12
     a22:	8b 8b       	std	Y+19, r24	; 0x13
     a24:	9c 8b       	std	Y+20, r25	; 0x14

	CPT[1]=(2000+(dT*CalCoeff[6])/pow(2,23))/100;
     a26:	29 81       	ldd	r18, Y+1	; 0x01
     a28:	3a 81       	ldd	r19, Y+2	; 0x02
     a2a:	4b 81       	ldd	r20, Y+3	; 0x03
     a2c:	5c 81       	ldd	r21, Y+4	; 0x04
     a2e:	f3 01       	movw	r30, r6
     a30:	a4 85       	ldd	r26, Z+12	; 0x0c
     a32:	b5 85       	ldd	r27, Z+13	; 0x0d
     a34:	0e 94 b1 12 	call	0x2562	; 0x2562 <__muluhisi3>
     a38:	0e 94 77 10 	call	0x20ee	; 0x20ee <__floatsisf>
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	40 e0       	ldi	r20, 0x00	; 0
     a42:	54 e3       	ldi	r21, 0x34	; 52
     a44:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	4a ef       	ldi	r20, 0xFA	; 250
     a4e:	54 e4       	ldi	r21, 0x44	; 68
     a50:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__addsf3>
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	48 ec       	ldi	r20, 0xC8	; 200
     a5a:	52 e4       	ldi	r21, 0x42	; 66
     a5c:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <__divsf3>
     a60:	0e 94 40 10 	call	0x2080	; 0x2080 <__fixsfsi>
     a64:	f4 01       	movw	r30, r8
     a66:	64 83       	std	Z+4, r22	; 0x04
     a68:	75 83       	std	Z+5, r23	; 0x05
     a6a:	86 83       	std	Z+6, r24	; 0x06
     a6c:	97 83       	std	Z+7, r25	; 0x07
	CPT[0]=(((PT[0]*SENS)/pow(2,21)-OFF)/pow(2,15))/100;
     a6e:	ad 84       	ldd	r10, Y+13	; 0x0d
     a70:	be 84       	ldd	r11, Y+14	; 0x0e
     a72:	cf 84       	ldd	r12, Y+15	; 0x0f
     a74:	d8 88       	ldd	r13, Y+16	; 0x10
     a76:	e9 88       	ldd	r14, Y+17	; 0x11
     a78:	fa 88       	ldd	r15, Y+18	; 0x12
     a7a:	9b 89       	ldd	r25, Y+19	; 0x13
     a7c:	8c 89       	ldd	r24, Y+20	; 0x14
     a7e:	2d 80       	ldd	r2, Y+5	; 0x05
     a80:	3e 80       	ldd	r3, Y+6	; 0x06
     a82:	4f 80       	ldd	r4, Y+7	; 0x07
     a84:	58 84       	ldd	r5, Y+8	; 0x08
     a86:	69 84       	ldd	r6, Y+9	; 0x09
     a88:	7a 84       	ldd	r7, Y+10	; 0x0a
     a8a:	fb 85       	ldd	r31, Y+11	; 0x0b
     a8c:	fd 8f       	std	Y+29, r31	; 0x1d
     a8e:	2c 85       	ldd	r18, Y+12	; 0x0c
     a90:	2e 8f       	std	Y+30, r18	; 0x1e
     a92:	f8 01       	movw	r30, r16
     a94:	40 81       	ld	r20, Z
     a96:	51 81       	ldd	r21, Z+1	; 0x01
     a98:	62 81       	ldd	r22, Z+2	; 0x02
     a9a:	73 81       	ldd	r23, Z+3	; 0x03
     a9c:	9a 01       	movw	r18, r20
     a9e:	ab 01       	movw	r20, r22
     aa0:	89 01       	movw	r16, r18
     aa2:	9a 01       	movw	r18, r20
     aa4:	40 e0       	ldi	r20, 0x00	; 0
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	ba 01       	movw	r22, r20
     aaa:	0d 8b       	std	Y+21, r16	; 0x15
     aac:	1e 8b       	std	Y+22, r17	; 0x16
     aae:	2f 8b       	std	Y+23, r18	; 0x17
     ab0:	38 8f       	std	Y+24, r19	; 0x18
     ab2:	49 8f       	std	Y+25, r20	; 0x19
     ab4:	5a 8f       	std	Y+26, r21	; 0x1a
     ab6:	6b 8f       	std	Y+27, r22	; 0x1b
     ab8:	7c 8f       	std	Y+28, r23	; 0x1c
     aba:	09 2f       	mov	r16, r25
     abc:	18 2f       	mov	r17, r24
     abe:	2d 89       	ldd	r18, Y+21	; 0x15
     ac0:	3e 89       	ldd	r19, Y+22	; 0x16
     ac2:	4f 89       	ldd	r20, Y+23	; 0x17
     ac4:	58 8d       	ldd	r21, Y+24	; 0x18
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 bb 12 	call	0x2576	; 0x2576 <__muldi3>
     ad2:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__floatdisf>
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	40 e0       	ldi	r20, 0x00	; 0
     adc:	55 e3       	ldi	r21, 0x35	; 53
     ade:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     ae2:	6b 01       	movw	r12, r22
     ae4:	7c 01       	movw	r14, r24
     ae6:	22 2d       	mov	r18, r2
     ae8:	33 2d       	mov	r19, r3
     aea:	44 2d       	mov	r20, r4
     aec:	55 2d       	mov	r21, r5
     aee:	66 2d       	mov	r22, r6
     af0:	77 2d       	mov	r23, r7
     af2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     af4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     af6:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__floatdisf>
     afa:	9b 01       	movw	r18, r22
     afc:	ac 01       	movw	r20, r24
     afe:	c7 01       	movw	r24, r14
     b00:	b6 01       	movw	r22, r12
     b02:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__subsf3>
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	40 e0       	ldi	r20, 0x00	; 0
     b0c:	58 e3       	ldi	r21, 0x38	; 56
     b0e:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	48 ec       	ldi	r20, 0xC8	; 200
     b18:	52 e4       	ldi	r21, 0x42	; 66
     b1a:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <__divsf3>
     b1e:	0e 94 40 10 	call	0x2080	; 0x2080 <__fixsfsi>
     b22:	f4 01       	movw	r30, r8
     b24:	60 83       	st	Z, r22
     b26:	71 83       	std	Z+1, r23	; 0x01
     b28:	82 83       	std	Z+2, r24	; 0x02
     b2a:	93 83       	std	Z+3, r25	; 0x03
	return;
}
     b2c:	6e 96       	adiw	r28, 0x1e	; 30
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	f8 94       	cli
     b32:	de bf       	out	0x3e, r29	; 62
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	cd bf       	out	0x3d, r28	; 61
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	ff 90       	pop	r15
     b42:	ef 90       	pop	r14
     b44:	df 90       	pop	r13
     b46:	cf 90       	pop	r12
     b48:	bf 90       	pop	r11
     b4a:	af 90       	pop	r10
     b4c:	9f 90       	pop	r9
     b4e:	8f 90       	pop	r8
     b50:	7f 90       	pop	r7
     b52:	6f 90       	pop	r6
     b54:	5f 90       	pop	r5
     b56:	4f 90       	pop	r4
     b58:	3f 90       	pop	r3
     b5a:	2f 90       	pop	r2
     b5c:	08 95       	ret

00000b5e <GetCPT>:

void GetCPT(uint16_t* CalCoeff, int32_t* CPT){
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	28 97       	sbiw	r28, 0x08	; 8
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
     b7a:	8c 01       	movw	r16, r24
     b7c:	7b 01       	movw	r14, r22
	uint32_t PT[2];
	InitPresConv();
     b7e:	86 de       	rcall	.-756    	; 0x88c <InitPresConv>
	PT[0] = ReadAltimeter();
     b80:	91 de       	rcall	.-734    	; 0x8a4 <ReadAltimeter>
     b82:	69 83       	std	Y+1, r22	; 0x01
     b84:	7a 83       	std	Y+2, r23	; 0x02
     b86:	8b 83       	std	Y+3, r24	; 0x03
     b88:	9c 83       	std	Y+4, r25	; 0x04
	InitTempConv();
     b8a:	74 de       	rcall	.-792    	; 0x874 <InitTempConv>
	PT[1] = ReadAltimeter();
     b8c:	8b de       	rcall	.-746    	; 0x8a4 <ReadAltimeter>
     b8e:	6d 83       	std	Y+5, r22	; 0x05
     b90:	7e 83       	std	Y+6, r23	; 0x06
     b92:	8f 83       	std	Y+7, r24	; 0x07
     b94:	98 87       	std	Y+8, r25	; 0x08
	CalcPT(PT, CalCoeff, CPT);
     b96:	a7 01       	movw	r20, r14
     b98:	b8 01       	movw	r22, r16
     b9a:	ce 01       	movw	r24, r28
     b9c:	01 96       	adiw	r24, 0x01	; 1
     b9e:	9f de       	rcall	.-706    	; 0x8de <CalcPT>
	return;
}
     ba0:	28 96       	adiw	r28, 0x08	; 8
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	ff 90       	pop	r15
     bb6:	ef 90       	pop	r14
     bb8:	08 95       	ret

00000bba <CalcAltitudeConstTemp>:

float CalcAltitudeConstTemp(int32_t* CPT){
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
     bc6:	64 97       	sbiw	r28, 0x14	; 20
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	f8 94       	cli
     bcc:	de bf       	out	0x3e, r29	; 62
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	cd bf       	out	0x3d, r28	; 61
     bd2:	8c 01       	movw	r16, r24
	float volatile Altitude;
	float volatile TempK;
	float volatile Coeff;
	double volatile PressRatio;
	double volatile Pressure;
	Pressure = CPT[0];
     bd4:	fc 01       	movw	r30, r24
     bd6:	60 81       	ld	r22, Z
     bd8:	71 81       	ldd	r23, Z+1	; 0x01
     bda:	82 81       	ldd	r24, Z+2	; 0x02
     bdc:	93 81       	ldd	r25, Z+3	; 0x03
     bde:	0e 94 77 10 	call	0x20ee	; 0x20ee <__floatsisf>
     be2:	69 8b       	std	Y+17, r22	; 0x11
     be4:	7a 8b       	std	Y+18, r23	; 0x12
     be6:	8b 8b       	std	Y+19, r24	; 0x13
     be8:	9c 8b       	std	Y+20, r25	; 0x14
	TempK = CPT[1] + 273.15;
     bea:	f8 01       	movw	r30, r16
     bec:	64 81       	ldd	r22, Z+4	; 0x04
     bee:	75 81       	ldd	r23, Z+5	; 0x05
     bf0:	86 81       	ldd	r24, Z+6	; 0x06
     bf2:	97 81       	ldd	r25, Z+7	; 0x07
     bf4:	0e 94 77 10 	call	0x20ee	; 0x20ee <__floatsisf>
     bf8:	23 e3       	ldi	r18, 0x33	; 51
     bfa:	33 e9       	ldi	r19, 0x93	; 147
     bfc:	48 e8       	ldi	r20, 0x88	; 136
     bfe:	53 e4       	ldi	r21, 0x43	; 67
     c00:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__addsf3>
     c04:	6d 83       	std	Y+5, r22	; 0x05
     c06:	7e 83       	std	Y+6, r23	; 0x06
     c08:	8f 83       	std	Y+7, r24	; 0x07
     c0a:	98 87       	std	Y+8, r25	; 0x08
	Coeff = 287.058*TempK/9.8;
     c0c:	6d 81       	ldd	r22, Y+5	; 0x05
     c0e:	7e 81       	ldd	r23, Y+6	; 0x06
     c10:	8f 81       	ldd	r24, Y+7	; 0x07
     c12:	98 85       	ldd	r25, Y+8	; 0x08
     c14:	2d e6       	ldi	r18, 0x6D	; 109
     c16:	37 e8       	ldi	r19, 0x87	; 135
     c18:	4f e8       	ldi	r20, 0x8F	; 143
     c1a:	53 e4       	ldi	r21, 0x43	; 67
     c1c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     c20:	2d ec       	ldi	r18, 0xCD	; 205
     c22:	3c ec       	ldi	r19, 0xCC	; 204
     c24:	4c e1       	ldi	r20, 0x1C	; 28
     c26:	51 e4       	ldi	r21, 0x41	; 65
     c28:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <__divsf3>
     c2c:	69 87       	std	Y+9, r22	; 0x09
     c2e:	7a 87       	std	Y+10, r23	; 0x0a
     c30:	8b 87       	std	Y+11, r24	; 0x0b
     c32:	9c 87       	std	Y+12, r25	; 0x0c
	PressRatio = Pressure/1013;
     c34:	69 89       	ldd	r22, Y+17	; 0x11
     c36:	7a 89       	ldd	r23, Y+18	; 0x12
     c38:	8b 89       	ldd	r24, Y+19	; 0x13
     c3a:	9c 89       	ldd	r25, Y+20	; 0x14
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	30 e4       	ldi	r19, 0x40	; 64
     c40:	4d e7       	ldi	r20, 0x7D	; 125
     c42:	54 e4       	ldi	r21, 0x44	; 68
     c44:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <__divsf3>
     c48:	6d 87       	std	Y+13, r22	; 0x0d
     c4a:	7e 87       	std	Y+14, r23	; 0x0e
     c4c:	8f 87       	std	Y+15, r24	; 0x0f
     c4e:	98 8b       	std	Y+16, r25	; 0x10
	Altitude = -log(PressRatio)*Coeff;
     c50:	6d 85       	ldd	r22, Y+13	; 0x0d
     c52:	7e 85       	ldd	r23, Y+14	; 0x0e
     c54:	8f 85       	ldd	r24, Y+15	; 0x0f
     c56:	98 89       	ldd	r25, Y+16	; 0x10
     c58:	0e 94 a3 11 	call	0x2346	; 0x2346 <log>
     c5c:	29 85       	ldd	r18, Y+9	; 0x09
     c5e:	3a 85       	ldd	r19, Y+10	; 0x0a
     c60:	4b 85       	ldd	r20, Y+11	; 0x0b
     c62:	5c 85       	ldd	r21, Y+12	; 0x0c
     c64:	90 58       	subi	r25, 0x80	; 128
     c66:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     c6a:	69 83       	std	Y+1, r22	; 0x01
     c6c:	7a 83       	std	Y+2, r23	; 0x02
     c6e:	8b 83       	std	Y+3, r24	; 0x03
     c70:	9c 83       	std	Y+4, r25	; 0x04
	return Altitude;
     c72:	69 81       	ldd	r22, Y+1	; 0x01
     c74:	7a 81       	ldd	r23, Y+2	; 0x02
     c76:	8b 81       	ldd	r24, Y+3	; 0x03
     c78:	9c 81       	ldd	r25, Y+4	; 0x04
}
     c7a:	64 96       	adiw	r28, 0x14	; 20
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	08 95       	ret

00000c90 <__vector_25>:
	} else if (!checkPUBX(packet)){
		return 0;	
	} else {
		return 1;
	}
}
     c90:	1f 92       	push	r1
     c92:	0f 92       	push	r0
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	0f 92       	push	r0
     c98:	11 24       	eor	r1, r1
     c9a:	0b b6       	in	r0, 0x3b	; 59
     c9c:	0f 92       	push	r0
     c9e:	2f 93       	push	r18
     ca0:	3f 93       	push	r19
     ca2:	4f 93       	push	r20
     ca4:	5f 93       	push	r21
     ca6:	6f 93       	push	r22
     ca8:	7f 93       	push	r23
     caa:	8f 93       	push	r24
     cac:	9f 93       	push	r25
     cae:	af 93       	push	r26
     cb0:	bf 93       	push	r27
     cb2:	cf 93       	push	r28
     cb4:	ef 93       	push	r30
     cb6:	ff 93       	push	r31
     cb8:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     cbc:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <msgIndex>
     cc0:	8e 3f       	cpi	r24, 0xFE	; 254
     cc2:	70 f0       	brcs	.+28     	; 0xce0 <__vector_25+0x50>
     cc4:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <msgIndex>
     cc8:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <msgBeginFlag>
     ccc:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <msgEndFlag>
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	8f e4       	ldi	r24, 0x4F	; 79
     cd4:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <USARTTX>
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	8a e2       	ldi	r24, 0x2A	; 42
     cdc:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <USARTTX>
     ce0:	c4 32       	cpi	r28, 0x24	; 36
     ce2:	c1 f4       	brne	.+48     	; 0xd14 <__vector_25+0x84>
     ce4:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <msgEndFlag>
     ce8:	81 11       	cpse	r24, r1
     cea:	5e c0       	rjmp	.+188    	; 0xda8 <__vector_25+0x118>
     cec:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <__data_end>
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <msgBeginFlag>
     cf6:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <msgIndex>
     cfa:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <msgIndex>
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	e4 58       	subi	r30, 0x84	; 132
     d02:	fd 4f       	sbci	r31, 0xFD	; 253
     d04:	84 e2       	ldi	r24, 0x24	; 36
     d06:	80 83       	st	Z, r24
     d08:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <msgIndex>
     d0c:	8f 5f       	subi	r24, 0xFF	; 255
     d0e:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <msgIndex>
     d12:	62 c0       	rjmp	.+196    	; 0xdd8 <__vector_25+0x148>
     d14:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <msgBeginFlag>
     d18:	88 23       	and	r24, r24
     d1a:	b9 f0       	breq	.+46     	; 0xd4a <__vector_25+0xba>
     d1c:	ca 32       	cpi	r28, 0x2A	; 42
     d1e:	09 f0       	breq	.+2      	; 0xd22 <__vector_25+0x92>
     d20:	53 c0       	rjmp	.+166    	; 0xdc8 <__vector_25+0x138>
     d22:	47 c0       	rjmp	.+142    	; 0xdb2 <__vector_25+0x122>
     d24:	cc 32       	cpi	r28, 0x2C	; 44
     d26:	29 f4       	brne	.+10     	; 0xd32 <__vector_25+0xa2>
     d28:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <__data_end>
     d2c:	8f 5f       	subi	r24, 0xFF	; 255
     d2e:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <__data_end>
     d32:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <msgIndex>
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	e4 58       	subi	r30, 0x84	; 132
     d3a:	fd 4f       	sbci	r31, 0xFD	; 253
     d3c:	c0 83       	st	Z, r28
     d3e:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <msgIndex>
     d42:	8f 5f       	subi	r24, 0xFF	; 255
     d44:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <msgIndex>
     d48:	47 c0       	rjmp	.+142    	; 0xdd8 <__vector_25+0x148>
     d4a:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <msgBeginFlag>
     d4e:	88 23       	and	r24, r24
     d50:	09 f4       	brne	.+2      	; 0xd54 <__vector_25+0xc4>
     d52:	42 c0       	rjmp	.+132    	; 0xdd8 <__vector_25+0x148>
     d54:	ca 32       	cpi	r28, 0x2A	; 42
     d56:	09 f0       	breq	.+2      	; 0xd5a <__vector_25+0xca>
     d58:	3f c0       	rjmp	.+126    	; 0xdd8 <__vector_25+0x148>
     d5a:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <msgEndFlag>
     d5e:	81 11       	cpse	r24, r1
     d60:	3b c0       	rjmp	.+118    	; 0xdd8 <__vector_25+0x148>
     d62:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <msgIndex>
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	e4 58       	subi	r30, 0x84	; 132
     d6a:	fd 4f       	sbci	r31, 0xFD	; 253
     d6c:	8a e2       	ldi	r24, 0x2A	; 42
     d6e:	80 83       	st	Z, r24
     d70:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <msgIndex>
     d74:	8f 5f       	subi	r24, 0xFF	; 255
     d76:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <msgIndex>
     d7a:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <msgIndex>
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	e4 58       	subi	r30, 0x84	; 132
     d82:	fd 4f       	sbci	r31, 0xFD	; 253
     d84:	10 82       	st	Z, r1
     d86:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <msgIndex>
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <msgEndFlag>
     d90:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <msgBeginFlag>
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	8a e0       	ldi	r24, 0x0A	; 10
     d98:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <USARTTX>
     d9c:	e1 ec       	ldi	r30, 0xC1	; 193
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8f 77       	andi	r24, 0x7F	; 127
     da4:	80 83       	st	Z, r24
     da6:	18 c0       	rjmp	.+48     	; 0xdd8 <__vector_25+0x148>
     da8:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <msgBeginFlag>
     dac:	81 11       	cpse	r24, r1
     dae:	09 c0       	rjmp	.+18     	; 0xdc2 <__vector_25+0x132>
     db0:	11 c0       	rjmp	.+34     	; 0xdd4 <__vector_25+0x144>
     db2:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <msgBeginFlag>
     db6:	81 11       	cpse	r24, r1
     db8:	d0 cf       	rjmp	.-96     	; 0xd5a <__vector_25+0xca>
     dba:	0e c0       	rjmp	.+28     	; 0xdd8 <__vector_25+0x148>
     dbc:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <msgBeginFlag>
     dc0:	0b c0       	rjmp	.+22     	; 0xdd8 <__vector_25+0x148>
     dc2:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <msgEndFlag>
     dc6:	fa cf       	rjmp	.-12     	; 0xdbc <__vector_25+0x12c>
     dc8:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <msgEndFlag>
     dcc:	88 23       	and	r24, r24
     dce:	09 f4       	brne	.+2      	; 0xdd2 <__vector_25+0x142>
     dd0:	a9 cf       	rjmp	.-174    	; 0xd24 <__vector_25+0x94>
     dd2:	f4 cf       	rjmp	.-24     	; 0xdbc <__vector_25+0x12c>
     dd4:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <msgBeginFlag>
     dd8:	ff 91       	pop	r31
     dda:	ef 91       	pop	r30
     ddc:	cf 91       	pop	r28
     dde:	bf 91       	pop	r27
     de0:	af 91       	pop	r26
     de2:	9f 91       	pop	r25
     de4:	8f 91       	pop	r24
     de6:	7f 91       	pop	r23
     de8:	6f 91       	pop	r22
     dea:	5f 91       	pop	r21
     dec:	4f 91       	pop	r20
     dee:	3f 91       	pop	r19
     df0:	2f 91       	pop	r18
     df2:	0f 90       	pop	r0
     df4:	0b be       	out	0x3b, r0	; 59
     df6:	0f 90       	pop	r0
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	0f 90       	pop	r0
     dfc:	1f 90       	pop	r1
     dfe:	18 95       	reti

00000e00 <SendGPS>:
     e00:	ef 92       	push	r14
     e02:	ff 92       	push	r15
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	1f 92       	push	r1
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	7c 01       	movw	r14, r24
     e12:	16 2f       	mov	r17, r22
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	84 e2       	ldi	r24, 0x24	; 36
     e18:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <USARTTX>
     e1c:	19 82       	std	Y+1, r1	; 0x01
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	81 17       	cp	r24, r17
     e22:	70 f4       	brcc	.+28     	; 0xe40 <SendGPS+0x40>
     e24:	99 81       	ldd	r25, Y+1	; 0x01
     e26:	f7 01       	movw	r30, r14
     e28:	e9 0f       	add	r30, r25
     e2a:	f1 1d       	adc	r31, r1
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <USARTTX>
     e34:	99 81       	ldd	r25, Y+1	; 0x01
     e36:	9f 5f       	subi	r25, 0xFF	; 255
     e38:	99 83       	std	Y+1, r25	; 0x01
     e3a:	99 81       	ldd	r25, Y+1	; 0x01
     e3c:	91 17       	cp	r25, r17
     e3e:	90 f3       	brcs	.-28     	; 0xe24 <SendGPS+0x24>
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	8d e0       	ldi	r24, 0x0D	; 13
     e44:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <USARTTX>
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	8a e0       	ldi	r24, 0x0A	; 10
     e4c:	fc d7       	rcall	.+4088   	; 0x1e46 <USARTTX>
     e4e:	0f 90       	pop	r0
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	1f 91       	pop	r17
     e56:	ff 90       	pop	r15
     e58:	ef 90       	pop	r14
     e5a:	08 95       	ret

00000e5c <CheckSum>:

// Calculates and writes the checksum for an outgoing packet
void CheckSum(char* packet){
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	00 d0       	rcall	.+0      	; 0xe66 <CheckSum+0xa>
     e66:	1f 92       	push	r1
     e68:	1f 92       	push	r1
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	8c 01       	movw	r16, r24
	uint8_t volatile i = 0;
     e70:	19 82       	std	Y+1, r1	; 0x01
	uint8_t volatile checksum;
	char hexchar[3];
	while(!(packet[i] == '*')){
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	f8 01       	movw	r30, r16
     e76:	e8 0f       	add	r30, r24
     e78:	f1 1d       	adc	r31, r1
     e7a:	80 81       	ld	r24, Z
     e7c:	8a 32       	cpi	r24, 0x2A	; 42
     e7e:	91 f0       	breq	.+36     	; 0xea4 <CheckSum+0x48>
		checksum ^= packet[i]; //XORs all the packet bytes together to get the checksum
     e80:	99 81       	ldd	r25, Y+1	; 0x01
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	f8 01       	movw	r30, r16
     e86:	e9 0f       	add	r30, r25
     e88:	f1 1d       	adc	r31, r1
     e8a:	90 81       	ld	r25, Z
     e8c:	98 27       	eor	r25, r24
     e8e:	9a 83       	std	Y+2, r25	; 0x02
		i++;
     e90:	99 81       	ldd	r25, Y+1	; 0x01
     e92:	9f 5f       	subi	r25, 0xFF	; 255
     e94:	99 83       	std	Y+1, r25	; 0x01
// Calculates and writes the checksum for an outgoing packet
void CheckSum(char* packet){
	uint8_t volatile i = 0;
	uint8_t volatile checksum;
	char hexchar[3];
	while(!(packet[i] == '*')){
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	f8 01       	movw	r30, r16
     e9a:	e8 0f       	add	r30, r24
     e9c:	f1 1d       	adc	r31, r1
     e9e:	80 81       	ld	r24, Z
     ea0:	8a 32       	cpi	r24, 0x2A	; 42
     ea2:	71 f7       	brne	.-36     	; 0xe80 <CheckSum+0x24>
		checksum ^= packet[i]; //XORs all the packet bytes together to get the checksum
		i++;
	}
	sprintf(hexchar, "%02X", checksum);
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	1f 92       	push	r1
     ea8:	8f 93       	push	r24
     eaa:	86 e4       	ldi	r24, 0x46	; 70
     eac:	92 e0       	ldi	r25, 0x02	; 2
     eae:	9f 93       	push	r25
     eb0:	8f 93       	push	r24
     eb2:	ce 01       	movw	r24, r28
     eb4:	03 96       	adiw	r24, 0x03	; 3
     eb6:	9f 93       	push	r25
     eb8:	8f 93       	push	r24
     eba:	0e 94 4e 13 	call	0x269c	; 0x269c <sprintf>
	i++;
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	8f 5f       	subi	r24, 0xFF	; 255
     ec2:	89 83       	std	Y+1, r24	; 0x01
	packet[i] = hexchar[0];
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	f8 01       	movw	r30, r16
     ec8:	e8 0f       	add	r30, r24
     eca:	f1 1d       	adc	r31, r1
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	80 83       	st	Z, r24
	i++;
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	8f 5f       	subi	r24, 0xFF	; 255
     ed4:	89 83       	std	Y+1, r24	; 0x01
	packet[i] = hexchar[1];
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	f8 01       	movw	r30, r16
     eda:	e8 0f       	add	r30, r24
     edc:	f1 1d       	adc	r31, r1
     ede:	8c 81       	ldd	r24, Y+4	; 0x04
     ee0:	80 83       	st	Z, r24
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
	return;
}
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	1f 91       	pop	r17
     efe:	0f 91       	pop	r16
     f00:	08 95       	ret

00000f02 <PUBXCFGSetup>:
//	packet: The packet to be sent, consisting of the config message base. The message name gets modified.
//	msg: The particular identifier of the message to be turned off
// Returns:
//	Nothing

void PUBXCFGSetup(char* packet, char* msg){
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	1f 92       	push	r1
     f08:	1f 92       	push	r1
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	ac 01       	movw	r20, r24
	uint8_t volatile i = MSGSTT; //Sets up the configure message to turn off all the messages we don't want.
     f10:	88 e0       	ldi	r24, 0x08	; 8
     f12:	89 83       	std	Y+1, r24	; 0x01
	uint8_t volatile j = 0; //Takes the message name
     f14:	1a 82       	std	Y+2, r1	; 0x02
	for (i; i < MSGEND; i++){
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	8b 30       	cpi	r24, 0x0B	; 11
     f1c:	98 f4       	brcc	.+38     	; 0xf44 <PUBXCFGSetup+0x42>
		packet[i] = msg[j];
     f1e:	29 81       	ldd	r18, Y+1	; 0x01
     f20:	9a 81       	ldd	r25, Y+2	; 0x02
     f22:	fb 01       	movw	r30, r22
     f24:	e9 0f       	add	r30, r25
     f26:	f1 1d       	adc	r31, r1
     f28:	90 81       	ld	r25, Z
     f2a:	fa 01       	movw	r30, r20
     f2c:	e2 0f       	add	r30, r18
     f2e:	f1 1d       	adc	r31, r1
     f30:	90 83       	st	Z, r25
		j++;
     f32:	9a 81       	ldd	r25, Y+2	; 0x02
     f34:	9f 5f       	subi	r25, 0xFF	; 255
     f36:	9a 83       	std	Y+2, r25	; 0x02
//	Nothing

void PUBXCFGSetup(char* packet, char* msg){
	uint8_t volatile i = MSGSTT; //Sets up the configure message to turn off all the messages we don't want.
	uint8_t volatile j = 0; //Takes the message name
	for (i; i < MSGEND; i++){
     f38:	99 81       	ldd	r25, Y+1	; 0x01
     f3a:	9f 5f       	subi	r25, 0xFF	; 255
     f3c:	99 83       	std	Y+1, r25	; 0x01
     f3e:	99 81       	ldd	r25, Y+1	; 0x01
     f40:	9b 30       	cpi	r25, 0x0B	; 11
     f42:	68 f3       	brcs	.-38     	; 0xf1e <PUBXCFGSetup+0x1c>
		packet[i] = msg[j];
		j++;
	}
	CheckSum(packet);
     f44:	ca 01       	movw	r24, r20
     f46:	8a df       	rcall	.-236    	; 0xe5c <CheckSum>
	return;
}
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	08 95       	ret

00000f52 <InitGPS>:
		UCSR0B &= ~(1 << RXCIE0);
	}
}

//Use RATE (PUBX,40)
uint16_t InitGPS(void){
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	6c 97       	sbiw	r28, 0x1c	; 28
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
	uint16_t volatile SetUBRR; //Turns off all the messages we don't want
	msgIndex = 0;
     f66:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <msgIndex>
	msgBeginFlag = 0;
     f6a:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <msgBeginFlag>
	msgEndFlag = 0;
     f6e:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <msgEndFlag>
	char CFGMSG[CFGMSGSIZE] = PUBXNOCOMMCFGMSGBASE;
     f72:	8a e1       	ldi	r24, 0x1A	; 26
     f74:	e0 e0       	ldi	r30, 0x00	; 0
     f76:	f2 e0       	ldi	r31, 0x02	; 2
     f78:	de 01       	movw	r26, r28
     f7a:	13 96       	adiw	r26, 0x03	; 3
     f7c:	01 90       	ld	r0, Z+
     f7e:	0d 92       	st	X+, r0
     f80:	8a 95       	dec	r24
     f82:	e1 f7       	brne	.-8      	; 0xf7c <InitGPS+0x2a>
	SetUBRR = InitUSART(GPSBAUD, GPSPORT);
     f84:	40 e0       	ldi	r20, 0x00	; 0
     f86:	60 e8       	ldi	r22, 0x80	; 128
     f88:	75 e2       	ldi	r23, 0x25	; 37
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	39 d7       	rcall	.+3698   	; 0x1e02 <InitUSART>
     f90:	9a 83       	std	Y+2, r25	; 0x02
     f92:	89 83       	std	Y+1, r24	; 0x01
	if (SetUBRR){
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	9a 81       	ldd	r25, Y+2	; 0x02
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	09 f4       	brne	.+2      	; 0xf9e <InitGPS+0x4c>
     f9c:	5d c0       	rjmp	.+186    	; 0x1058 <InitGPS+0x106>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f9e:	2f ef       	ldi	r18, 0xFF	; 255
     fa0:	83 ed       	ldi	r24, 0xD3	; 211
     fa2:	90 e3       	ldi	r25, 0x30	; 48
     fa4:	21 50       	subi	r18, 0x01	; 1
     fa6:	80 40       	sbci	r24, 0x00	; 0
     fa8:	90 40       	sbci	r25, 0x00	; 0
     faa:	e1 f7       	brne	.-8      	; 0xfa4 <InitGPS+0x52>
     fac:	00 c0       	rjmp	.+0      	; 0xfae <InitGPS+0x5c>
     fae:	00 00       	nop
		_delay_ms(2000);
		PUBXCFGSetup(CFGMSG, "GLL");
     fb0:	6b e4       	ldi	r22, 0x4B	; 75
     fb2:	72 e0       	ldi	r23, 0x02	; 2
     fb4:	ce 01       	movw	r24, r28
     fb6:	03 96       	adiw	r24, 0x03	; 3
     fb8:	a4 df       	rcall	.-184    	; 0xf02 <PUBXCFGSetup>
		SendGPS(CFGMSG, CFGMSGSIZE);
     fba:	6a e1       	ldi	r22, 0x1A	; 26
     fbc:	ce 01       	movw	r24, r28
     fbe:	03 96       	adiw	r24, 0x03	; 3
     fc0:	1f df       	rcall	.-450    	; 0xe00 <SendGPS>
     fc2:	2f ef       	ldi	r18, 0xFF	; 255
     fc4:	82 e5       	ldi	r24, 0x52	; 82
     fc6:	97 e0       	ldi	r25, 0x07	; 7
     fc8:	21 50       	subi	r18, 0x01	; 1
     fca:	80 40       	sbci	r24, 0x00	; 0
     fcc:	90 40       	sbci	r25, 0x00	; 0
     fce:	e1 f7       	brne	.-8      	; 0xfc8 <InitGPS+0x76>
     fd0:	00 c0       	rjmp	.+0      	; 0xfd2 <InitGPS+0x80>
     fd2:	00 00       	nop
		_delay_ms(300);
		PUBXCFGSetup(CFGMSG, "GSA");
     fd4:	6f e4       	ldi	r22, 0x4F	; 79
     fd6:	72 e0       	ldi	r23, 0x02	; 2
     fd8:	ce 01       	movw	r24, r28
     fda:	03 96       	adiw	r24, 0x03	; 3
     fdc:	92 df       	rcall	.-220    	; 0xf02 <PUBXCFGSetup>
		SendGPS(CFGMSG, CFGMSGSIZE);
     fde:	6a e1       	ldi	r22, 0x1A	; 26
     fe0:	ce 01       	movw	r24, r28
     fe2:	03 96       	adiw	r24, 0x03	; 3
     fe4:	0d df       	rcall	.-486    	; 0xe00 <SendGPS>
     fe6:	2f ef       	ldi	r18, 0xFF	; 255
     fe8:	82 e5       	ldi	r24, 0x52	; 82
     fea:	97 e0       	ldi	r25, 0x07	; 7
     fec:	21 50       	subi	r18, 0x01	; 1
     fee:	80 40       	sbci	r24, 0x00	; 0
     ff0:	90 40       	sbci	r25, 0x00	; 0
     ff2:	e1 f7       	brne	.-8      	; 0xfec <InitGPS+0x9a>
     ff4:	00 c0       	rjmp	.+0      	; 0xff6 <InitGPS+0xa4>
     ff6:	00 00       	nop
		_delay_ms(300);
		PUBXCFGSetup(CFGMSG, "GSV");
     ff8:	63 e5       	ldi	r22, 0x53	; 83
     ffa:	72 e0       	ldi	r23, 0x02	; 2
     ffc:	ce 01       	movw	r24, r28
     ffe:	03 96       	adiw	r24, 0x03	; 3
    1000:	80 df       	rcall	.-256    	; 0xf02 <PUBXCFGSetup>
		SendGPS(CFGMSG, CFGMSGSIZE);
    1002:	6a e1       	ldi	r22, 0x1A	; 26
    1004:	ce 01       	movw	r24, r28
    1006:	03 96       	adiw	r24, 0x03	; 3
    1008:	fb de       	rcall	.-522    	; 0xe00 <SendGPS>
    100a:	2f ef       	ldi	r18, 0xFF	; 255
    100c:	82 e5       	ldi	r24, 0x52	; 82
    100e:	97 e0       	ldi	r25, 0x07	; 7
    1010:	21 50       	subi	r18, 0x01	; 1
    1012:	80 40       	sbci	r24, 0x00	; 0
    1014:	90 40       	sbci	r25, 0x00	; 0
    1016:	e1 f7       	brne	.-8      	; 0x1010 <InitGPS+0xbe>
    1018:	00 c0       	rjmp	.+0      	; 0x101a <InitGPS+0xc8>
    101a:	00 00       	nop
		_delay_ms(300);
		PUBXCFGSetup(CFGMSG, "RMC");
    101c:	67 e5       	ldi	r22, 0x57	; 87
    101e:	72 e0       	ldi	r23, 0x02	; 2
    1020:	ce 01       	movw	r24, r28
    1022:	03 96       	adiw	r24, 0x03	; 3
    1024:	6e df       	rcall	.-292    	; 0xf02 <PUBXCFGSetup>
		SendGPS(CFGMSG, CFGMSGSIZE);
    1026:	6a e1       	ldi	r22, 0x1A	; 26
    1028:	ce 01       	movw	r24, r28
    102a:	03 96       	adiw	r24, 0x03	; 3
    102c:	e9 de       	rcall	.-558    	; 0xe00 <SendGPS>
    102e:	2f ef       	ldi	r18, 0xFF	; 255
    1030:	82 e5       	ldi	r24, 0x52	; 82
    1032:	97 e0       	ldi	r25, 0x07	; 7
    1034:	21 50       	subi	r18, 0x01	; 1
    1036:	80 40       	sbci	r24, 0x00	; 0
    1038:	90 40       	sbci	r25, 0x00	; 0
    103a:	e1 f7       	brne	.-8      	; 0x1034 <InitGPS+0xe2>
    103c:	00 c0       	rjmp	.+0      	; 0x103e <InitGPS+0xec>
    103e:	00 00       	nop
		_delay_ms(300);
		PUBXCFGSetup(CFGMSG, "VTG");
    1040:	6b e5       	ldi	r22, 0x5B	; 91
    1042:	72 e0       	ldi	r23, 0x02	; 2
    1044:	ce 01       	movw	r24, r28
    1046:	03 96       	adiw	r24, 0x03	; 3
    1048:	5c df       	rcall	.-328    	; 0xf02 <PUBXCFGSetup>
		SendGPS(CFGMSG, CFGMSGSIZE);
    104a:	6a e1       	ldi	r22, 0x1A	; 26
    104c:	ce 01       	movw	r24, r28
    104e:	03 96       	adiw	r24, 0x03	; 3
    1050:	d7 de       	rcall	.-594    	; 0xe00 <SendGPS>
		sei();
    1052:	78 94       	sei
		return SetUBRR;
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	9a 81       	ldd	r25, Y+2	; 0x02
	} else {
		return 0;
	}
}
    1058:	6c 96       	adiw	r28, 0x1c	; 28
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	08 95       	ret

0000106a <parseDegreesMinutes>:
}

// Parses a string in the format: DDMM.MMMMMMM, where DD is degrees, and MM is minutes.
// degLength is the length of the degrees part. For example, degLength of 3 means
// the string will be DDDMM.MMMMMMM.
float parseDegreesMinutes(char *s, int degLength) {
    106a:	af 92       	push	r10
    106c:	bf 92       	push	r11
    106e:	cf 92       	push	r12
    1070:	df 92       	push	r13
    1072:	ef 92       	push	r14
    1074:	ff 92       	push	r15
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	28 97       	sbiw	r28, 0x08	; 8
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	6c 01       	movw	r12, r24
    1090:	8b 01       	movw	r16, r22
	degrees = atof(degreesString);
	// Convert the minutes
	minutes = atof(s + degLength);
	// Convert the minutes to decimal degrees
	return degrees + (minutes / 60);
}
    1092:	ad b6       	in	r10, 0x3d	; 61
    1094:	be b6       	in	r11, 0x3e	; 62

// Parses a string in the format: DDMM.MMMMMMM, where DD is degrees, and MM is minutes.
// degLength is the length of the degrees part. For example, degLength of 3 means
// the string will be DDDMM.MMMMMMM.
float parseDegreesMinutes(char *s, int degLength) {
	char degreesString[degLength + 1];
    1096:	cb 01       	movw	r24, r22
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	2d b7       	in	r18, 0x3d	; 61
    109c:	3e b7       	in	r19, 0x3e	; 62
    109e:	28 1b       	sub	r18, r24
    10a0:	39 0b       	sbc	r19, r25
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	3e bf       	out	0x3e, r19	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	2d bf       	out	0x3d, r18	; 61
    10ac:	8d b7       	in	r24, 0x3d	; 61
    10ae:	9e b7       	in	r25, 0x3e	; 62
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	7c 01       	movw	r14, r24
	float volatile degrees;
	float volatile minutes;
	// Copy the degrees part into degreesString and convert it to a float
	strncpy(degreesString, s, degLength);
    10b4:	ab 01       	movw	r20, r22
    10b6:	b6 01       	movw	r22, r12
    10b8:	0e 94 27 13 	call	0x264e	; 0x264e <strncpy>
	degreesString[degLength] = '\0';
    10bc:	f7 01       	movw	r30, r14
    10be:	e0 0f       	add	r30, r16
    10c0:	f1 1f       	adc	r31, r17
    10c2:	10 82       	st	Z, r1
	degrees = atof(degreesString);
    10c4:	c7 01       	movw	r24, r14
    10c6:	0e 94 1b 13 	call	0x2636	; 0x2636 <atof>
    10ca:	69 83       	std	Y+1, r22	; 0x01
    10cc:	7a 83       	std	Y+2, r23	; 0x02
    10ce:	8b 83       	std	Y+3, r24	; 0x03
    10d0:	9c 83       	std	Y+4, r25	; 0x04
	// Convert the minutes
	minutes = atof(s + degLength);
    10d2:	c6 01       	movw	r24, r12
    10d4:	80 0f       	add	r24, r16
    10d6:	91 1f       	adc	r25, r17
    10d8:	0e 94 1b 13 	call	0x2636	; 0x2636 <atof>
    10dc:	6d 83       	std	Y+5, r22	; 0x05
    10de:	7e 83       	std	Y+6, r23	; 0x06
    10e0:	8f 83       	std	Y+7, r24	; 0x07
    10e2:	98 87       	std	Y+8, r25	; 0x08
	// Convert the minutes to decimal degrees
	return degrees + (minutes / 60);
    10e4:	6d 81       	ldd	r22, Y+5	; 0x05
    10e6:	7e 81       	ldd	r23, Y+6	; 0x06
    10e8:	8f 81       	ldd	r24, Y+7	; 0x07
    10ea:	98 85       	ldd	r25, Y+8	; 0x08
    10ec:	c9 80       	ldd	r12, Y+1	; 0x01
    10ee:	da 80       	ldd	r13, Y+2	; 0x02
    10f0:	eb 80       	ldd	r14, Y+3	; 0x03
    10f2:	fc 80       	ldd	r15, Y+4	; 0x04
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	40 e7       	ldi	r20, 0x70	; 112
    10fa:	52 e4       	ldi	r21, 0x42	; 66
    10fc:	1f d7       	rcall	.+3646   	; 0x1f3c <__divsf3>
    10fe:	a7 01       	movw	r20, r14
    1100:	96 01       	movw	r18, r12
    1102:	b4 d6       	rcall	.+3432   	; 0x1e6c <__addsf3>
}
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	be be       	out	0x3e, r11	; 62
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	ad be       	out	0x3d, r10	; 61
    110e:	28 96       	adiw	r28, 0x08	; 8
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	ff 90       	pop	r15
    1124:	ef 90       	pop	r14
    1126:	df 90       	pop	r13
    1128:	cf 90       	pop	r12
    112a:	bf 90       	pop	r11
    112c:	af 90       	pop	r10
    112e:	08 95       	ret

00001130 <parseGGA>:
// Parameters:
//		packet:		the GGA message string
//		GPSdata:	the struct that accepts the final calculated data
// Returns:
//		Nothing
void parseGGA(char *packet, struct GPSStruct *GPSdata) {
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	c3 50       	subi	r28, 0x03	; 3
    113e:	d1 40       	sbci	r29, 0x01	; 1
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	9c 01       	movw	r18, r24
    114c:	8b 01       	movw	r16, r22
	char packetIn[256];
	char* packetCopy;
	packetCopy = packetIn;
    114e:	ce 01       	movw	r24, r28
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	cf 5f       	subi	r28, 0xFF	; 255
    1154:	de 4f       	sbci	r29, 0xFE	; 254
    1156:	99 83       	std	Y+1, r25	; 0x01
    1158:	88 83       	st	Y, r24
    115a:	c1 50       	subi	r28, 0x01	; 1
    115c:	d1 40       	sbci	r29, 0x01	; 1
	strncpy(packetIn, packet, 256);
    115e:	40 e0       	ldi	r20, 0x00	; 0
    1160:	51 e0       	ldi	r21, 0x01	; 1
    1162:	b9 01       	movw	r22, r18
    1164:	0e 94 27 13 	call	0x264e	; 0x264e <strncpy>
	uint8_t volatile i = 0;
    1168:	cd 5f       	subi	r28, 0xFD	; 253
    116a:	de 4f       	sbci	r29, 0xFE	; 254
    116c:	18 82       	st	Y, r1
    116e:	c3 50       	subi	r28, 0x03	; 3
    1170:	d1 40       	sbci	r29, 0x01	; 1
	//USARTTX('\n', GPSPORT);
	//msgIndex = 0;
	//#endif
	
	// Skip the xxGGA and time fields
	for(i = 0; i < 2; i++) {
    1172:	cd 5f       	subi	r28, 0xFD	; 253
    1174:	de 4f       	sbci	r29, 0xFE	; 254
    1176:	18 82       	st	Y, r1
    1178:	c3 50       	subi	r28, 0x03	; 3
    117a:	d1 40       	sbci	r29, 0x01	; 1
    117c:	cd 5f       	subi	r28, 0xFD	; 253
    117e:	de 4f       	sbci	r29, 0xFE	; 254
    1180:	88 81       	ld	r24, Y
    1182:	c3 50       	subi	r28, 0x03	; 3
    1184:	d1 40       	sbci	r29, 0x01	; 1
    1186:	82 30       	cpi	r24, 0x02	; 2
    1188:	c8 f4       	brcc	.+50     	; 0x11bc <parseGGA+0x8c>
		strsep(&packetCopy, ",");
    118a:	6f e5       	ldi	r22, 0x5F	; 95
    118c:	72 e0       	ldi	r23, 0x02	; 2
    118e:	ce 01       	movw	r24, r28
    1190:	8f 5f       	subi	r24, 0xFF	; 255
    1192:	9e 4f       	sbci	r25, 0xFE	; 254
    1194:	0e 94 36 13 	call	0x266c	; 0x266c <strsep>
	//USARTTX('\n', GPSPORT);
	//msgIndex = 0;
	//#endif
	
	// Skip the xxGGA and time fields
	for(i = 0; i < 2; i++) {
    1198:	cd 5f       	subi	r28, 0xFD	; 253
    119a:	de 4f       	sbci	r29, 0xFE	; 254
    119c:	88 81       	ld	r24, Y
    119e:	c3 50       	subi	r28, 0x03	; 3
    11a0:	d1 40       	sbci	r29, 0x01	; 1
    11a2:	8f 5f       	subi	r24, 0xFF	; 255
    11a4:	cd 5f       	subi	r28, 0xFD	; 253
    11a6:	de 4f       	sbci	r29, 0xFE	; 254
    11a8:	88 83       	st	Y, r24
    11aa:	c3 50       	subi	r28, 0x03	; 3
    11ac:	d1 40       	sbci	r29, 0x01	; 1
    11ae:	cd 5f       	subi	r28, 0xFD	; 253
    11b0:	de 4f       	sbci	r29, 0xFE	; 254
    11b2:	88 81       	ld	r24, Y
    11b4:	c3 50       	subi	r28, 0x03	; 3
    11b6:	d1 40       	sbci	r29, 0x01	; 1
    11b8:	82 30       	cpi	r24, 0x02	; 2
    11ba:	38 f3       	brcs	.-50     	; 0x118a <parseGGA+0x5a>
		strsep(&packetCopy, ",");
	}
	i = 0;
    11bc:	cd 5f       	subi	r28, 0xFD	; 253
    11be:	de 4f       	sbci	r29, 0xFE	; 254
    11c0:	18 82       	st	Y, r1
    11c2:	c3 50       	subi	r28, 0x03	; 3
    11c4:	d1 40       	sbci	r29, 0x01	; 1
	
	// get the latitude
	msgPart = strsep(&packetCopy, ",");
    11c6:	6f e5       	ldi	r22, 0x5F	; 95
    11c8:	72 e0       	ldi	r23, 0x02	; 2
    11ca:	ce 01       	movw	r24, r28
    11cc:	8f 5f       	subi	r24, 0xFF	; 255
    11ce:	9e 4f       	sbci	r25, 0xFE	; 254
    11d0:	0e 94 36 13 	call	0x266c	; 0x266c <strsep>
	if (*msgPart){
    11d4:	fc 01       	movw	r30, r24
    11d6:	20 81       	ld	r18, Z
    11d8:	22 23       	and	r18, r18
    11da:	a1 f0       	breq	.+40     	; 0x1204 <parseGGA+0xd4>
		GPSdata->latitude = parseDegreesMinutes(msgPart, 2);
    11dc:	62 e0       	ldi	r22, 0x02	; 2
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	44 df       	rcall	.-376    	; 0x106a <parseDegreesMinutes>
    11e2:	f8 01       	movw	r30, r16
    11e4:	62 83       	std	Z+2, r22	; 0x02
    11e6:	73 83       	std	Z+3, r23	; 0x03
    11e8:	84 83       	std	Z+4, r24	; 0x04
    11ea:	95 83       	std	Z+5, r25	; 0x05
		GPSdata->GPSAltitude = 0;
		return;
	}
	
	// get the N/S component of the latitude. If it's 'S', then make the latitude negative
	msgPart = strsep(&packetCopy, ",");
    11ec:	6f e5       	ldi	r22, 0x5F	; 95
    11ee:	72 e0       	ldi	r23, 0x02	; 2
    11f0:	ce 01       	movw	r24, r28
    11f2:	8f 5f       	subi	r24, 0xFF	; 255
    11f4:	9e 4f       	sbci	r25, 0xFE	; 254
    11f6:	0e 94 36 13 	call	0x266c	; 0x266c <strsep>
	if(*msgPart == 'S') {
    11fa:	fc 01       	movw	r30, r24
    11fc:	80 81       	ld	r24, Z
    11fe:	83 35       	cpi	r24, 0x53	; 83
    1200:	c1 f4       	brne	.+48     	; 0x1232 <parseGGA+0x102>
    1202:	0c c0       	rjmp	.+24     	; 0x121c <parseGGA+0xec>
	// get the latitude
	msgPart = strsep(&packetCopy, ",");
	if (*msgPart){
		GPSdata->latitude = parseDegreesMinutes(msgPart, 2);
	} else {
		GPSdata->latitude = 0;
    1204:	f8 01       	movw	r30, r16
    1206:	12 82       	std	Z+2, r1	; 0x02
    1208:	13 82       	std	Z+3, r1	; 0x03
    120a:	14 82       	std	Z+4, r1	; 0x04
    120c:	15 82       	std	Z+5, r1	; 0x05
		GPSdata->longitude = 0;
    120e:	16 82       	std	Z+6, r1	; 0x06
    1210:	17 82       	std	Z+7, r1	; 0x07
    1212:	10 86       	std	Z+8, r1	; 0x08
    1214:	11 86       	std	Z+9, r1	; 0x09
		GPSdata->GPSAltitude = 0;
    1216:	11 82       	std	Z+1, r1	; 0x01
    1218:	10 82       	st	Z, r1
		return;
    121a:	9f c0       	rjmp	.+318    	; 0x135a <parseGGA+0x22a>
	}
	
	// get the N/S component of the latitude. If it's 'S', then make the latitude negative
	msgPart = strsep(&packetCopy, ",");
	if(*msgPart == 'S') {
		GPSdata->latitude = -GPSdata->latitude;
    121c:	f8 01       	movw	r30, r16
    121e:	82 81       	ldd	r24, Z+2	; 0x02
    1220:	93 81       	ldd	r25, Z+3	; 0x03
    1222:	a4 81       	ldd	r26, Z+4	; 0x04
    1224:	b5 81       	ldd	r27, Z+5	; 0x05
    1226:	b0 58       	subi	r27, 0x80	; 128
    1228:	82 83       	std	Z+2, r24	; 0x02
    122a:	93 83       	std	Z+3, r25	; 0x03
    122c:	a4 83       	std	Z+4, r26	; 0x04
    122e:	b5 83       	std	Z+5, r27	; 0x05
    1230:	0e c0       	rjmp	.+28     	; 0x124e <parseGGA+0x11e>
	} else if (*msgPart != 'N'){
    1232:	8e 34       	cpi	r24, 0x4E	; 78
    1234:	61 f0       	breq	.+24     	; 0x124e <parseGGA+0x11e>
		GPSdata->latitude = 0;
    1236:	f8 01       	movw	r30, r16
    1238:	12 82       	std	Z+2, r1	; 0x02
    123a:	13 82       	std	Z+3, r1	; 0x03
    123c:	14 82       	std	Z+4, r1	; 0x04
    123e:	15 82       	std	Z+5, r1	; 0x05
		GPSdata->longitude = 0;
    1240:	16 82       	std	Z+6, r1	; 0x06
    1242:	17 82       	std	Z+7, r1	; 0x07
    1244:	10 86       	std	Z+8, r1	; 0x08
    1246:	11 86       	std	Z+9, r1	; 0x09
		GPSdata->GPSAltitude = 0;
    1248:	11 82       	std	Z+1, r1	; 0x01
    124a:	10 82       	st	Z, r1
		return;
    124c:	86 c0       	rjmp	.+268    	; 0x135a <parseGGA+0x22a>
	}
	
	// get the longitude
	msgPart = strsep(&packetCopy, ",");
    124e:	6f e5       	ldi	r22, 0x5F	; 95
    1250:	72 e0       	ldi	r23, 0x02	; 2
    1252:	ce 01       	movw	r24, r28
    1254:	8f 5f       	subi	r24, 0xFF	; 255
    1256:	9e 4f       	sbci	r25, 0xFE	; 254
    1258:	0e 94 36 13 	call	0x266c	; 0x266c <strsep>
	// Debug to see what it thinks the longitude is
	
	if (*msgPart){
    125c:	fc 01       	movw	r30, r24
    125e:	20 81       	ld	r18, Z
    1260:	22 23       	and	r18, r18
    1262:	a1 f0       	breq	.+40     	; 0x128c <parseGGA+0x15c>
		GPSdata->longitude = parseDegreesMinutes(msgPart, 3);
    1264:	63 e0       	ldi	r22, 0x03	; 3
    1266:	70 e0       	ldi	r23, 0x00	; 0
    1268:	00 df       	rcall	.-512    	; 0x106a <parseDegreesMinutes>
    126a:	f8 01       	movw	r30, r16
    126c:	66 83       	std	Z+6, r22	; 0x06
    126e:	77 83       	std	Z+7, r23	; 0x07
    1270:	80 87       	std	Z+8, r24	; 0x08
    1272:	91 87       	std	Z+9, r25	; 0x09
		GPSdata->longitude = 0;
		GPSdata->GPSAltitude = 0;
		return;
	}
	// get the E/W component of the longitude. If it's 'W', then make the longitude negative
	msgPart = strsep(&packetCopy, ",");
    1274:	6f e5       	ldi	r22, 0x5F	; 95
    1276:	72 e0       	ldi	r23, 0x02	; 2
    1278:	ce 01       	movw	r24, r28
    127a:	8f 5f       	subi	r24, 0xFF	; 255
    127c:	9e 4f       	sbci	r25, 0xFE	; 254
    127e:	0e 94 36 13 	call	0x266c	; 0x266c <strsep>
	if(*msgPart == 'W') {
    1282:	fc 01       	movw	r30, r24
    1284:	80 81       	ld	r24, Z
    1286:	87 35       	cpi	r24, 0x57	; 87
    1288:	c1 f4       	brne	.+48     	; 0x12ba <parseGGA+0x18a>
    128a:	0c c0       	rjmp	.+24     	; 0x12a4 <parseGGA+0x174>
	// Debug to see what it thinks the longitude is
	
	if (*msgPart){
		GPSdata->longitude = parseDegreesMinutes(msgPart, 3);
	} else {
		GPSdata->latitude = 0;
    128c:	f8 01       	movw	r30, r16
    128e:	12 82       	std	Z+2, r1	; 0x02
    1290:	13 82       	std	Z+3, r1	; 0x03
    1292:	14 82       	std	Z+4, r1	; 0x04
    1294:	15 82       	std	Z+5, r1	; 0x05
		GPSdata->longitude = 0;
    1296:	16 82       	std	Z+6, r1	; 0x06
    1298:	17 82       	std	Z+7, r1	; 0x07
    129a:	10 86       	std	Z+8, r1	; 0x08
    129c:	11 86       	std	Z+9, r1	; 0x09
		GPSdata->GPSAltitude = 0;
    129e:	11 82       	std	Z+1, r1	; 0x01
    12a0:	10 82       	st	Z, r1
		return;
    12a2:	5b c0       	rjmp	.+182    	; 0x135a <parseGGA+0x22a>
	}
	// get the E/W component of the longitude. If it's 'W', then make the longitude negative
	msgPart = strsep(&packetCopy, ",");
	if(*msgPart == 'W') {
		GPSdata->longitude = -GPSdata->longitude;
    12a4:	f8 01       	movw	r30, r16
    12a6:	86 81       	ldd	r24, Z+6	; 0x06
    12a8:	97 81       	ldd	r25, Z+7	; 0x07
    12aa:	a0 85       	ldd	r26, Z+8	; 0x08
    12ac:	b1 85       	ldd	r27, Z+9	; 0x09
    12ae:	b0 58       	subi	r27, 0x80	; 128
    12b0:	86 83       	std	Z+6, r24	; 0x06
    12b2:	97 83       	std	Z+7, r25	; 0x07
    12b4:	a0 87       	std	Z+8, r26	; 0x08
    12b6:	b1 87       	std	Z+9, r27	; 0x09
    12b8:	0e c0       	rjmp	.+28     	; 0x12d6 <parseGGA+0x1a6>
	} else if (*msgPart != 'E'){
    12ba:	85 34       	cpi	r24, 0x45	; 69
    12bc:	61 f0       	breq	.+24     	; 0x12d6 <parseGGA+0x1a6>
		GPSdata->latitude = 0;
    12be:	f8 01       	movw	r30, r16
    12c0:	12 82       	std	Z+2, r1	; 0x02
    12c2:	13 82       	std	Z+3, r1	; 0x03
    12c4:	14 82       	std	Z+4, r1	; 0x04
    12c6:	15 82       	std	Z+5, r1	; 0x05
		GPSdata->longitude = 0;
    12c8:	16 82       	std	Z+6, r1	; 0x06
    12ca:	17 82       	std	Z+7, r1	; 0x07
    12cc:	10 86       	std	Z+8, r1	; 0x08
    12ce:	11 86       	std	Z+9, r1	; 0x09
		GPSdata->GPSAltitude = 0;
    12d0:	11 82       	std	Z+1, r1	; 0x01
    12d2:	10 82       	st	Z, r1
		return;
    12d4:	42 c0       	rjmp	.+132    	; 0x135a <parseGGA+0x22a>
	}
	
	// Skip the quality, numSV, and HDOP fields
	for(i = 0; i < 3; i++) {
    12d6:	cd 5f       	subi	r28, 0xFD	; 253
    12d8:	de 4f       	sbci	r29, 0xFE	; 254
    12da:	18 82       	st	Y, r1
    12dc:	c3 50       	subi	r28, 0x03	; 3
    12de:	d1 40       	sbci	r29, 0x01	; 1
    12e0:	cd 5f       	subi	r28, 0xFD	; 253
    12e2:	de 4f       	sbci	r29, 0xFE	; 254
    12e4:	88 81       	ld	r24, Y
    12e6:	c3 50       	subi	r28, 0x03	; 3
    12e8:	d1 40       	sbci	r29, 0x01	; 1
    12ea:	83 30       	cpi	r24, 0x03	; 3
    12ec:	c8 f4       	brcc	.+50     	; 0x1320 <parseGGA+0x1f0>
		strsep(&packetCopy, ",");
    12ee:	6f e5       	ldi	r22, 0x5F	; 95
    12f0:	72 e0       	ldi	r23, 0x02	; 2
    12f2:	ce 01       	movw	r24, r28
    12f4:	8f 5f       	subi	r24, 0xFF	; 255
    12f6:	9e 4f       	sbci	r25, 0xFE	; 254
    12f8:	0e 94 36 13 	call	0x266c	; 0x266c <strsep>
		GPSdata->GPSAltitude = 0;
		return;
	}
	
	// Skip the quality, numSV, and HDOP fields
	for(i = 0; i < 3; i++) {
    12fc:	cd 5f       	subi	r28, 0xFD	; 253
    12fe:	de 4f       	sbci	r29, 0xFE	; 254
    1300:	88 81       	ld	r24, Y
    1302:	c3 50       	subi	r28, 0x03	; 3
    1304:	d1 40       	sbci	r29, 0x01	; 1
    1306:	8f 5f       	subi	r24, 0xFF	; 255
    1308:	cd 5f       	subi	r28, 0xFD	; 253
    130a:	de 4f       	sbci	r29, 0xFE	; 254
    130c:	88 83       	st	Y, r24
    130e:	c3 50       	subi	r28, 0x03	; 3
    1310:	d1 40       	sbci	r29, 0x01	; 1
    1312:	cd 5f       	subi	r28, 0xFD	; 253
    1314:	de 4f       	sbci	r29, 0xFE	; 254
    1316:	88 81       	ld	r24, Y
    1318:	c3 50       	subi	r28, 0x03	; 3
    131a:	d1 40       	sbci	r29, 0x01	; 1
    131c:	83 30       	cpi	r24, 0x03	; 3
    131e:	38 f3       	brcs	.-50     	; 0x12ee <parseGGA+0x1be>
		strsep(&packetCopy, ",");
	}
	
	// Get the altitude. If there is no altitude, then set it to zero.
	msgPart = strsep(&packetCopy, ",");
    1320:	6f e5       	ldi	r22, 0x5F	; 95
    1322:	72 e0       	ldi	r23, 0x02	; 2
    1324:	ce 01       	movw	r24, r28
    1326:	8f 5f       	subi	r24, 0xFF	; 255
    1328:	9e 4f       	sbci	r25, 0xFE	; 254
    132a:	0e 94 36 13 	call	0x266c	; 0x266c <strsep>
	if(*msgPart != '\0') {
    132e:	fc 01       	movw	r30, r24
    1330:	20 81       	ld	r18, Z
    1332:	22 23       	and	r18, r18
    1334:	39 f0       	breq	.+14     	; 0x1344 <parseGGA+0x214>
		GPSdata->GPSAltitude = atof(msgPart);
    1336:	0e 94 1b 13 	call	0x2636	; 0x2636 <atof>
    133a:	a7 d6       	rcall	.+3406   	; 0x208a <__fixunssfsi>
    133c:	f8 01       	movw	r30, r16
    133e:	71 83       	std	Z+1, r23	; 0x01
    1340:	60 83       	st	Z, r22
    1342:	0b c0       	rjmp	.+22     	; 0x135a <parseGGA+0x22a>
	} else {
		GPSdata->latitude = 0;
    1344:	f8 01       	movw	r30, r16
    1346:	12 82       	std	Z+2, r1	; 0x02
    1348:	13 82       	std	Z+3, r1	; 0x03
    134a:	14 82       	std	Z+4, r1	; 0x04
    134c:	15 82       	std	Z+5, r1	; 0x05
		GPSdata->longitude = 0;
    134e:	16 82       	std	Z+6, r1	; 0x06
    1350:	17 82       	std	Z+7, r1	; 0x07
    1352:	10 86       	std	Z+8, r1	; 0x08
    1354:	11 86       	std	Z+9, r1	; 0x09
		GPSdata->GPSAltitude = 0;
    1356:	11 82       	std	Z+1, r1	; 0x01
    1358:	10 82       	st	Z, r1
		return;
	}
}
    135a:	cd 5f       	subi	r28, 0xFD	; 253
    135c:	de 4f       	sbci	r29, 0xFE	; 254
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	1f 91       	pop	r17
    136e:	0f 91       	pop	r16
    1370:	08 95       	ret

00001372 <getGPSData>:
// Once message end flag is set, puts data in the GPS struct and resets end flag
// Parameters:
//		GPSdata:	Struct that accepts data
//	Returns:
//		Nothing
void getGPSData(struct GPSStruct *GPSdata){
    1372:	4f 92       	push	r4
    1374:	5f 92       	push	r5
    1376:	6f 92       	push	r6
    1378:	7f 92       	push	r7
    137a:	8f 92       	push	r8
    137c:	9f 92       	push	r9
    137e:	af 92       	push	r10
    1380:	bf 92       	push	r11
    1382:	cf 92       	push	r12
    1384:	df 92       	push	r13
    1386:	ef 92       	push	r14
    1388:	ff 92       	push	r15
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	c2 51       	subi	r28, 0x12	; 18
    1398:	d1 40       	sbci	r29, 0x01	; 1
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	8c 01       	movw	r16, r24
	#ifdef DOUNITTEST
	uint8_t volatile echoLength = 0;
    13a6:	19 82       	std	Y+1, r1	; 0x01
	uint8_t volatile echoIndex = 0;
    13a8:	1a 82       	std	Y+2, r1	; 0x02
	int32_t volatile latConvert = 0; 
    13aa:	1b 82       	std	Y+3, r1	; 0x03
    13ac:	1c 82       	std	Y+4, r1	; 0x04
    13ae:	1d 82       	std	Y+5, r1	; 0x05
    13b0:	1e 82       	std	Y+6, r1	; 0x06
	int32_t volatile longConvert = 0;
    13b2:	1f 82       	std	Y+7, r1	; 0x07
    13b4:	18 86       	std	Y+8, r1	; 0x08
    13b6:	19 86       	std	Y+9, r1	; 0x09
    13b8:	1a 86       	std	Y+10, r1	; 0x0a
	char echoLatLongAlt[256];
	#endif
	if (msgEndFlag){
    13ba:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <msgEndFlag>
    13be:	99 23       	and	r25, r25
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <getGPSData+0x52>
    13c2:	c1 c0       	rjmp	.+386    	; 0x1546 <getGPSData+0x1d4>
		parseGGA(gpsBuffer, GPSdata);
    13c4:	b8 01       	movw	r22, r16
    13c6:	8c e7       	ldi	r24, 0x7C	; 124
    13c8:	92 e0       	ldi	r25, 0x02	; 2
    13ca:	b2 de       	rcall	.-668    	; 0x1130 <parseGGA>
		msgEndFlag = 0;
    13cc:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <msgEndFlag>
		#ifdef DOUNITTEST
		latConvert = (int32_t)GPSdata->latitude;
    13d0:	d8 01       	movw	r26, r16
    13d2:	12 96       	adiw	r26, 0x02	; 2
    13d4:	4d 90       	ld	r4, X+
    13d6:	5d 90       	ld	r5, X+
    13d8:	6d 90       	ld	r6, X+
    13da:	7c 90       	ld	r7, X
    13dc:	15 97       	sbiw	r26, 0x05	; 5
    13de:	c5 5f       	subi	r28, 0xF5	; 245
    13e0:	de 4f       	sbci	r29, 0xFE	; 254
    13e2:	48 82       	st	Y, r4
    13e4:	59 82       	std	Y+1, r5	; 0x01
    13e6:	6a 82       	std	Y+2, r6	; 0x02
    13e8:	7b 82       	std	Y+3, r7	; 0x03
    13ea:	cb 50       	subi	r28, 0x0B	; 11
    13ec:	d1 40       	sbci	r29, 0x01	; 1
    13ee:	c3 01       	movw	r24, r6
    13f0:	b2 01       	movw	r22, r4
    13f2:	46 d6       	rcall	.+3212   	; 0x2080 <__fixsfsi>
    13f4:	6b 83       	std	Y+3, r22	; 0x03
    13f6:	7c 83       	std	Y+4, r23	; 0x04
    13f8:	8d 83       	std	Y+5, r24	; 0x05
    13fa:	9e 83       	std	Y+6, r25	; 0x06
		longConvert = (int32_t)GPSdata->longitude;
    13fc:	f8 01       	movw	r30, r16
    13fe:	86 80       	ldd	r8, Z+6	; 0x06
    1400:	97 80       	ldd	r9, Z+7	; 0x07
    1402:	a0 84       	ldd	r10, Z+8	; 0x08
    1404:	b1 84       	ldd	r11, Z+9	; 0x09
    1406:	c5 01       	movw	r24, r10
    1408:	b4 01       	movw	r22, r8
    140a:	3a d6       	rcall	.+3188   	; 0x2080 <__fixsfsi>
    140c:	6f 83       	std	Y+7, r22	; 0x07
    140e:	78 87       	std	Y+8, r23	; 0x08
    1410:	89 87       	std	Y+9, r24	; 0x09
    1412:	9a 87       	std	Y+10, r25	; 0x0a
		echoLength = sprintf(echoLatLongAlt, "%ld.%ld %ld.%ld %u %u*", latConvert, labs((int32_t)((GPSdata->latitude - latConvert)*10000)), longConvert, labs((int32_t)((GPSdata->longitude - longConvert)*10000)), GPSdata->GPSAltitude, commaCount);
    1414:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <__data_end>
    1418:	6f 81       	ldd	r22, Y+7	; 0x07
    141a:	78 85       	ldd	r23, Y+8	; 0x08
    141c:	89 85       	ldd	r24, Y+9	; 0x09
    141e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1420:	cf 80       	ldd	r12, Y+7	; 0x07
    1422:	d8 84       	ldd	r13, Y+8	; 0x08
    1424:	e9 84       	ldd	r14, Y+9	; 0x09
    1426:	fa 84       	ldd	r15, Y+10	; 0x0a
    1428:	4b 80       	ldd	r4, Y+3	; 0x03
    142a:	5c 80       	ldd	r5, Y+4	; 0x04
    142c:	6d 80       	ldd	r6, Y+5	; 0x05
    142e:	7e 80       	ldd	r7, Y+6	; 0x06
    1430:	c1 5f       	subi	r28, 0xF1	; 241
    1432:	de 4f       	sbci	r29, 0xFE	; 254
    1434:	48 82       	st	Y, r4
    1436:	59 82       	std	Y+1, r5	; 0x01
    1438:	6a 82       	std	Y+2, r6	; 0x02
    143a:	7b 82       	std	Y+3, r7	; 0x03
    143c:	cf 50       	subi	r28, 0x0F	; 15
    143e:	d1 40       	sbci	r29, 0x01	; 1
    1440:	4b 80       	ldd	r4, Y+3	; 0x03
    1442:	5c 80       	ldd	r5, Y+4	; 0x04
    1444:	6d 80       	ldd	r6, Y+5	; 0x05
    1446:	7e 80       	ldd	r7, Y+6	; 0x06
    1448:	1f 92       	push	r1
    144a:	2f 93       	push	r18
    144c:	d8 01       	movw	r26, r16
    144e:	11 96       	adiw	r26, 0x01	; 1
    1450:	2c 91       	ld	r18, X
    1452:	11 97       	sbiw	r26, 0x01	; 1
    1454:	2f 93       	push	r18
    1456:	2c 91       	ld	r18, X
    1458:	2f 93       	push	r18
    145a:	49 d6       	rcall	.+3218   	; 0x20ee <__floatsisf>
    145c:	9b 01       	movw	r18, r22
    145e:	ac 01       	movw	r20, r24
    1460:	c5 01       	movw	r24, r10
    1462:	b4 01       	movw	r22, r8
    1464:	02 d5       	rcall	.+2564   	; 0x1e6a <__subsf3>
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e4       	ldi	r19, 0x40	; 64
    146a:	4c e1       	ldi	r20, 0x1C	; 28
    146c:	56 e4       	ldi	r21, 0x46	; 70
    146e:	ab d7       	rcall	.+3926   	; 0x23c6 <__mulsf3>
    1470:	07 d6       	rcall	.+3086   	; 0x2080 <__fixsfsi>
    1472:	99 23       	and	r25, r25
    1474:	3c f4       	brge	.+14     	; 0x1484 <getGPSData+0x112>
    1476:	90 95       	com	r25
    1478:	80 95       	com	r24
    147a:	70 95       	com	r23
    147c:	61 95       	neg	r22
    147e:	7f 4f       	sbci	r23, 0xFF	; 255
    1480:	8f 4f       	sbci	r24, 0xFF	; 255
    1482:	9f 4f       	sbci	r25, 0xFF	; 255
    1484:	9f 93       	push	r25
    1486:	8f 93       	push	r24
    1488:	7f 93       	push	r23
    148a:	6f 93       	push	r22
    148c:	ff 92       	push	r15
    148e:	ef 92       	push	r14
    1490:	df 92       	push	r13
    1492:	cf 92       	push	r12
    1494:	c1 5f       	subi	r28, 0xF1	; 241
    1496:	de 4f       	sbci	r29, 0xFE	; 254
    1498:	68 81       	ld	r22, Y
    149a:	79 81       	ldd	r23, Y+1	; 0x01
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	9b 81       	ldd	r25, Y+3	; 0x03
    14a0:	cf 50       	subi	r28, 0x0F	; 15
    14a2:	d1 40       	sbci	r29, 0x01	; 1
    14a4:	24 d6       	rcall	.+3144   	; 0x20ee <__floatsisf>
    14a6:	9b 01       	movw	r18, r22
    14a8:	ac 01       	movw	r20, r24
    14aa:	c5 5f       	subi	r28, 0xF5	; 245
    14ac:	de 4f       	sbci	r29, 0xFE	; 254
    14ae:	68 81       	ld	r22, Y
    14b0:	79 81       	ldd	r23, Y+1	; 0x01
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	9b 81       	ldd	r25, Y+3	; 0x03
    14b6:	cb 50       	subi	r28, 0x0B	; 11
    14b8:	d1 40       	sbci	r29, 0x01	; 1
    14ba:	d7 d4       	rcall	.+2478   	; 0x1e6a <__subsf3>
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e4       	ldi	r19, 0x40	; 64
    14c0:	4c e1       	ldi	r20, 0x1C	; 28
    14c2:	56 e4       	ldi	r21, 0x46	; 70
    14c4:	80 d7       	rcall	.+3840   	; 0x23c6 <__mulsf3>
    14c6:	dc d5       	rcall	.+3000   	; 0x2080 <__fixsfsi>
    14c8:	99 23       	and	r25, r25
    14ca:	3c f4       	brge	.+14     	; 0x14da <getGPSData+0x168>
    14cc:	90 95       	com	r25
    14ce:	80 95       	com	r24
    14d0:	70 95       	com	r23
    14d2:	61 95       	neg	r22
    14d4:	7f 4f       	sbci	r23, 0xFF	; 255
    14d6:	8f 4f       	sbci	r24, 0xFF	; 255
    14d8:	9f 4f       	sbci	r25, 0xFF	; 255
    14da:	9f 93       	push	r25
    14dc:	8f 93       	push	r24
    14de:	7f 93       	push	r23
    14e0:	6f 93       	push	r22
    14e2:	7f 92       	push	r7
    14e4:	6f 92       	push	r6
    14e6:	5f 92       	push	r5
    14e8:	4f 92       	push	r4
    14ea:	81 e6       	ldi	r24, 0x61	; 97
    14ec:	92 e0       	ldi	r25, 0x02	; 2
    14ee:	9f 93       	push	r25
    14f0:	8f 93       	push	r24
    14f2:	ce 01       	movw	r24, r28
    14f4:	0b 96       	adiw	r24, 0x0b	; 11
    14f6:	9f 93       	push	r25
    14f8:	8f 93       	push	r24
    14fa:	0e 94 4e 13 	call	0x269c	; 0x269c <sprintf>
    14fe:	89 83       	std	Y+1, r24	; 0x01
		for (echoIndex; echoIndex < echoLength; echoIndex++){
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	9a 81       	ldd	r25, Y+2	; 0x02
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	98 17       	cp	r25, r24
    1512:	88 f4       	brcc	.+34     	; 0x1536 <getGPSData+0x1c4>
			USARTTX(echoLatLongAlt[echoIndex], GPSPORT);
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	eb e0       	ldi	r30, 0x0B	; 11
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	ec 0f       	add	r30, r28
    151c:	fd 1f       	adc	r31, r29
    151e:	e8 0f       	add	r30, r24
    1520:	f1 1d       	adc	r31, r1
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	8f d4       	rcall	.+2334   	; 0x1e46 <USARTTX>
		msgEndFlag = 0;
		#ifdef DOUNITTEST
		latConvert = (int32_t)GPSdata->latitude;
		longConvert = (int32_t)GPSdata->longitude;
		echoLength = sprintf(echoLatLongAlt, "%ld.%ld %ld.%ld %u %u*", latConvert, labs((int32_t)((GPSdata->latitude - latConvert)*10000)), longConvert, labs((int32_t)((GPSdata->longitude - longConvert)*10000)), GPSdata->GPSAltitude, commaCount);
		for (echoIndex; echoIndex < echoLength; echoIndex++){
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	8f 5f       	subi	r24, 0xFF	; 255
    152c:	8a 83       	std	Y+2, r24	; 0x02
    152e:	9a 81       	ldd	r25, Y+2	; 0x02
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	98 17       	cp	r25, r24
    1534:	78 f3       	brcs	.-34     	; 0x1514 <getGPSData+0x1a2>
			USARTTX(echoLatLongAlt[echoIndex], GPSPORT);
		}
		USARTTX('\n', GPSPORT);
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	8a e0       	ldi	r24, 0x0A	; 10
    153a:	85 d4       	rcall	.+2314   	; 0x1e46 <USARTTX>
		#endif
		UCSR0B |= (1 << RXCIE0);
    153c:	e1 ec       	ldi	r30, 0xC1	; 193
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	80 68       	ori	r24, 0x80	; 128
    1544:	80 83       	st	Z, r24
	}
	return;
}
    1546:	ce 5e       	subi	r28, 0xEE	; 238
    1548:	de 4f       	sbci	r29, 0xFE	; 254
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	ff 90       	pop	r15
    155e:	ef 90       	pop	r14
    1560:	df 90       	pop	r13
    1562:	cf 90       	pop	r12
    1564:	bf 90       	pop	r11
    1566:	af 90       	pop	r10
    1568:	9f 90       	pop	r9
    156a:	8f 90       	pop	r8
    156c:	7f 90       	pop	r7
    156e:	6f 90       	pop	r6
    1570:	5f 90       	pop	r5
    1572:	4f 90       	pop	r4
    1574:	08 95       	ret

00001576 <macDecode>:
{
	UCSR1B = (1 << RXEN1) | (1 << TXEN1) | (1 << RXCIE1);   // Turn on the transmission and reception circuitry and enable rx interupt
	UCSR1C = (1 << UCSZ10) | (1 << UCSZ11); // Use 8-bit character sizes

	UBRR1H = 0x00; // Load upper 8-bits of the baud rate value into the high byte of the UBRR register 9600 baud
	UBRR1L = 0x33; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register 9600 baud
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	a0 97       	sbiw	r28, 0x20	; 32
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	28 e0       	ldi	r18, 0x08	; 8
    158c:	eb e1       	ldi	r30, 0x1B	; 27
    158e:	f2 e0       	ldi	r31, 0x02	; 2
    1590:	de 01       	movw	r26, r28
    1592:	11 96       	adiw	r26, 0x01	; 1
    1594:	01 90       	ld	r0, Z+
    1596:	0d 92       	st	X+, r0
    1598:	2a 95       	dec	r18
    159a:	e1 f7       	brne	.-8      	; 0x1594 <macDecode+0x1e>
    159c:	28 e0       	ldi	r18, 0x08	; 8
    159e:	e3 e2       	ldi	r30, 0x23	; 35
    15a0:	f2 e0       	ldi	r31, 0x02	; 2
    15a2:	de 01       	movw	r26, r28
    15a4:	19 96       	adiw	r26, 0x09	; 9
    15a6:	01 90       	ld	r0, Z+
    15a8:	0d 92       	st	X+, r0
    15aa:	2a 95       	dec	r18
    15ac:	e1 f7       	brne	.-8      	; 0x15a6 <macDecode+0x30>
    15ae:	28 e0       	ldi	r18, 0x08	; 8
    15b0:	eb e2       	ldi	r30, 0x2B	; 43
    15b2:	f2 e0       	ldi	r31, 0x02	; 2
    15b4:	de 01       	movw	r26, r28
    15b6:	51 96       	adiw	r26, 0x11	; 17
    15b8:	01 90       	ld	r0, Z+
    15ba:	0d 92       	st	X+, r0
    15bc:	2a 95       	dec	r18
    15be:	e1 f7       	brne	.-8      	; 0x15b8 <macDecode+0x42>
    15c0:	28 e0       	ldi	r18, 0x08	; 8
    15c2:	e3 e3       	ldi	r30, 0x33	; 51
    15c4:	f2 e0       	ldi	r31, 0x02	; 2
    15c6:	de 01       	movw	r26, r28
    15c8:	59 96       	adiw	r26, 0x19	; 25
    15ca:	01 90       	ld	r0, Z+
    15cc:	0d 92       	st	X+, r0
    15ce:	2a 95       	dec	r18
    15d0:	e1 f7       	brne	.-8      	; 0x15ca <macDecode+0x54>
    15d2:	82 30       	cpi	r24, 0x02	; 2
    15d4:	91 05       	cpc	r25, r1
    15d6:	99 f0       	breq	.+38     	; 0x15fe <macDecode+0x88>
    15d8:	1c f4       	brge	.+6      	; 0x15e0 <macDecode+0x6a>
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	39 f0       	breq	.+14     	; 0x15ec <macDecode+0x76>
    15de:	29 c0       	rjmp	.+82     	; 0x1632 <macDecode+0xbc>
    15e0:	83 30       	cpi	r24, 0x03	; 3
    15e2:	91 05       	cpc	r25, r1
    15e4:	a9 f0       	breq	.+42     	; 0x1610 <macDecode+0x9a>
    15e6:	04 97       	sbiw	r24, 0x04	; 4
    15e8:	e1 f0       	breq	.+56     	; 0x1622 <macDecode+0xac>
    15ea:	23 c0       	rjmp	.+70     	; 0x1632 <macDecode+0xbc>
    15ec:	88 e0       	ldi	r24, 0x08	; 8
    15ee:	fe 01       	movw	r30, r28
    15f0:	31 96       	adiw	r30, 0x01	; 1
    15f2:	db 01       	movw	r26, r22
    15f4:	01 90       	ld	r0, Z+
    15f6:	0d 92       	st	X+, r0
    15f8:	8a 95       	dec	r24
    15fa:	e1 f7       	brne	.-8      	; 0x15f4 <macDecode+0x7e>
    15fc:	1a c0       	rjmp	.+52     	; 0x1632 <macDecode+0xbc>
    15fe:	88 e0       	ldi	r24, 0x08	; 8
    1600:	fe 01       	movw	r30, r28
    1602:	39 96       	adiw	r30, 0x09	; 9
    1604:	db 01       	movw	r26, r22
    1606:	01 90       	ld	r0, Z+
    1608:	0d 92       	st	X+, r0
    160a:	8a 95       	dec	r24
    160c:	e1 f7       	brne	.-8      	; 0x1606 <macDecode+0x90>
    160e:	11 c0       	rjmp	.+34     	; 0x1632 <macDecode+0xbc>
    1610:	88 e0       	ldi	r24, 0x08	; 8
    1612:	fe 01       	movw	r30, r28
    1614:	71 96       	adiw	r30, 0x11	; 17
    1616:	db 01       	movw	r26, r22
    1618:	01 90       	ld	r0, Z+
    161a:	0d 92       	st	X+, r0
    161c:	8a 95       	dec	r24
    161e:	e1 f7       	brne	.-8      	; 0x1618 <macDecode+0xa2>
    1620:	08 c0       	rjmp	.+16     	; 0x1632 <macDecode+0xbc>
    1622:	88 e0       	ldi	r24, 0x08	; 8
    1624:	fe 01       	movw	r30, r28
    1626:	79 96       	adiw	r30, 0x19	; 25
    1628:	db 01       	movw	r26, r22
    162a:	01 90       	ld	r0, Z+
    162c:	0d 92       	st	X+, r0
    162e:	8a 95       	dec	r24
    1630:	e1 f7       	brne	.-8      	; 0x162a <macDecode+0xb4>
    1632:	a0 96       	adiw	r28, 0x20	; 32
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	08 95       	ret

00001644 <escape>:
	return 0;
	*/
	return LSB+4;
}

int escape(unsigned char *input, int inLen, unsigned char *output){
    1644:	0f 93       	push	r16
    1646:	1f 93       	push	r17
    1648:	cf 93       	push	r28
    164a:	df 93       	push	r29
	int pos = 1;

	output[0] = input[0];
    164c:	fc 01       	movw	r30, r24
    164e:	20 81       	ld	r18, Z
    1650:	fa 01       	movw	r30, r20
    1652:	20 83       	st	Z, r18
	for (int i=1; i<inLen; i++){
    1654:	62 30       	cpi	r22, 0x02	; 2
    1656:	71 05       	cpc	r23, r1
    1658:	6c f1       	brlt	.+90     	; 0x16b4 <escape+0x70>
    165a:	fc 01       	movw	r30, r24
    165c:	31 96       	adiw	r30, 0x01	; 1
    165e:	68 0f       	add	r22, r24
    1660:	79 1f       	adc	r23, r25
    1662:	21 e0       	ldi	r18, 0x01	; 1
    1664:	30 e0       	ldi	r19, 0x00	; 0
		switch(input[i]){
			case 0x7D:
			case 0x7E:
			case 0x11:
			case 0x13:
			output[pos++] = 0x7D;
    1666:	0d e7       	ldi	r16, 0x7D	; 125
			output[pos++] = input[i] ^ 0x20;
    1668:	10 e2       	ldi	r17, 0x20	; 32
    166a:	ef 01       	movw	r28, r30
int escape(unsigned char *input, int inLen, unsigned char *output){
	int pos = 1;

	output[0] = input[0];
	for (int i=1; i<inLen; i++){
		switch(input[i]){
    166c:	90 81       	ld	r25, Z
    166e:	93 31       	cpi	r25, 0x13	; 19
    1670:	41 f0       	breq	.+16     	; 0x1682 <escape+0x3e>
    1672:	18 f4       	brcc	.+6      	; 0x167a <escape+0x36>
    1674:	91 31       	cpi	r25, 0x11	; 17
    1676:	99 f4       	brne	.+38     	; 0x169e <escape+0x5a>
    1678:	04 c0       	rjmp	.+8      	; 0x1682 <escape+0x3e>
    167a:	83 e8       	ldi	r24, 0x83	; 131
    167c:	89 0f       	add	r24, r25
    167e:	82 30       	cpi	r24, 0x02	; 2
    1680:	70 f4       	brcc	.+28     	; 0x169e <escape+0x5a>
			case 0x7D:
			case 0x7E:
			case 0x11:
			case 0x13:
			output[pos++] = 0x7D;
    1682:	da 01       	movw	r26, r20
    1684:	a2 0f       	add	r26, r18
    1686:	b3 1f       	adc	r27, r19
    1688:	0c 93       	st	X, r16
			output[pos++] = input[i] ^ 0x20;
    168a:	d9 01       	movw	r26, r18
    168c:	11 96       	adiw	r26, 0x01	; 1
    168e:	a4 0f       	add	r26, r20
    1690:	b5 1f       	adc	r27, r21
    1692:	2e 5f       	subi	r18, 0xFE	; 254
    1694:	3f 4f       	sbci	r19, 0xFF	; 255
    1696:	98 81       	ld	r25, Y
    1698:	91 27       	eor	r25, r17
    169a:	9c 93       	st	X, r25
			break;
    169c:	06 c0       	rjmp	.+12     	; 0x16aa <escape+0x66>
			default:
			output[pos++] = input[i];
    169e:	da 01       	movw	r26, r20
    16a0:	a2 0f       	add	r26, r18
    16a2:	b3 1f       	adc	r27, r19
    16a4:	9c 93       	st	X, r25
    16a6:	2f 5f       	subi	r18, 0xFF	; 255
    16a8:	3f 4f       	sbci	r19, 0xFF	; 255
    16aa:	31 96       	adiw	r30, 0x01	; 1

int escape(unsigned char *input, int inLen, unsigned char *output){
	int pos = 1;

	output[0] = input[0];
	for (int i=1; i<inLen; i++){
    16ac:	e6 17       	cp	r30, r22
    16ae:	f7 07       	cpc	r31, r23
    16b0:	e1 f6       	brne	.-72     	; 0x166a <escape+0x26>
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <escape+0x74>
	*/
	return LSB+4;
}

int escape(unsigned char *input, int inLen, unsigned char *output){
	int pos = 1;
    16b4:	21 e0       	ldi	r18, 0x01	; 1
    16b6:	30 e0       	ldi	r19, 0x00	; 0
			break;
		}
	}

	return pos;
}
    16b8:	c9 01       	movw	r24, r18
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	1f 91       	pop	r17
    16c0:	0f 91       	pop	r16
    16c2:	08 95       	ret

000016c4 <send>:
		
	
}


void send(unsigned char *msg, int len, int macAddr){
    16c4:	ef 92       	push	r14
    16c6:	ff 92       	push	r15
    16c8:	0f 93       	push	r16
    16ca:	1f 93       	push	r17
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	c8 50       	subi	r28, 0x08	; 8
    16d6:	d2 40       	sbci	r29, 0x02	; 2
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	7c 01       	movw	r14, r24
    16e4:	8b 01       	movw	r16, r22
    16e6:	ca 01       	movw	r24, r20
	unsigned char escBuff[256];
	int escapedLen = 0;
	unsigned char checksum = 0;
	unsigned char addr[8];
	
	macDecode(macAddr,addr); //call to change #define int to 8 byte address
    16e8:	be 01       	movw	r22, r28
    16ea:	6f 5f       	subi	r22, 0xFF	; 255
    16ec:	7d 4f       	sbci	r23, 0xFD	; 253
    16ee:	43 df       	rcall	.-378    	; 0x1576 <macDecode>

	buf[0] = 0x7E;
    16f0:	8e e7       	ldi	r24, 0x7E	; 126
    16f2:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x00;
    16f4:	1a 82       	std	Y+2, r1	; 0x02
	// LSB = content + 5 (content length + API type + frameid + addr(2) + options)
	buf[2] = (unsigned char)(len + 11);
    16f6:	8b e0       	ldi	r24, 0x0B	; 11
    16f8:	80 0f       	add	r24, r16
    16fa:	8b 83       	std	Y+3, r24	; 0x03
	buf[3] = 0x00;  // frame type - 64bit tx
    16fc:	1c 82       	std	Y+4, r1	; 0x04
	buf[4] = 0x00;  // Frame ID
    16fe:	1d 82       	std	Y+5, r1	; 0x05
    1700:	de 01       	movw	r26, r28
    1702:	af 5f       	subi	r26, 0xFF	; 255
    1704:	bd 4f       	sbci	r27, 0xFD	; 253
    1706:	fe 01       	movw	r30, r28
    1708:	36 96       	adiw	r30, 0x06	; 6
    170a:	9e 01       	movw	r18, r28
    170c:	22 5f       	subi	r18, 0xF2	; 242
    170e:	3f 4f       	sbci	r19, 0xFF	; 255
	for (int j = 0;j<8;j++)
	{
		buf[j+5] = addr[j];
    1710:	9d 91       	ld	r25, X+
    1712:	91 93       	st	Z+, r25
	buf[1] = 0x00;
	// LSB = content + 5 (content length + API type + frameid + addr(2) + options)
	buf[2] = (unsigned char)(len + 11);
	buf[3] = 0x00;  // frame type - 64bit tx
	buf[4] = 0x00;  // Frame ID
	for (int j = 0;j<8;j++)
    1714:	e2 17       	cp	r30, r18
    1716:	f3 07       	cpc	r31, r19
    1718:	d9 f7       	brne	.-10     	; 0x1710 <send+0x4c>
	{
		buf[j+5] = addr[j];
	}
	buf[13] = 0x01;  // Disable acknowledge>>>>>>>>>>may need to reenable for rdf,auto responce gives rssi?
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	8e 87       	std	Y+14, r24	; 0x0e
	memcpy(&buf[14], msg, len);
    171e:	a8 01       	movw	r20, r16
    1720:	b7 01       	movw	r22, r14
    1722:	ce 01       	movw	r24, r28
    1724:	0f 96       	adiw	r24, 0x0f	; 15
    1726:	8a d7       	rcall	.+3860   	; 0x263c <memcpy>

	for (int i=3;i<len+14;i++){
    1728:	a8 01       	movw	r20, r16
    172a:	42 5f       	subi	r20, 0xF2	; 242
    172c:	5f 4f       	sbci	r21, 0xFF	; 255
    172e:	44 30       	cpi	r20, 0x04	; 4
    1730:	51 05       	cpc	r21, r1
    1732:	74 f0       	brlt	.+28     	; 0x1750 <send+0x8c>
    1734:	fe 01       	movw	r30, r28
    1736:	34 96       	adiw	r30, 0x04	; 4
    1738:	9e 01       	movw	r18, r28
    173a:	20 0f       	add	r18, r16
    173c:	31 1f       	adc	r19, r17
    173e:	21 5f       	subi	r18, 0xF1	; 241
    1740:	3f 4f       	sbci	r19, 0xFF	; 255
    1742:	80 e0       	ldi	r24, 0x00	; 0
		checksum += buf[i];
    1744:	91 91       	ld	r25, Z+
    1746:	89 0f       	add	r24, r25
		buf[j+5] = addr[j];
	}
	buf[13] = 0x01;  // Disable acknowledge>>>>>>>>>>may need to reenable for rdf,auto responce gives rssi?
	memcpy(&buf[14], msg, len);

	for (int i=3;i<len+14;i++){
    1748:	e2 17       	cp	r30, r18
    174a:	f3 07       	cpc	r31, r19
    174c:	d9 f7       	brne	.-10     	; 0x1744 <send+0x80>
    174e:	01 c0       	rjmp	.+2      	; 0x1752 <send+0x8e>
void send(unsigned char *msg, int len, int macAddr){
	
	unsigned char buf[256];
	unsigned char escBuff[256];
	int escapedLen = 0;
	unsigned char checksum = 0;
    1750:	80 e0       	ldi	r24, 0x00	; 0
	for (int i=3;i<len+14;i++){
		checksum += buf[i];
	}

	// Total length = LSB + 9 (LSB value + MSB + LSB + start delimiter + checksum)
	buf[len+14] = 0xFF - checksum;
    1752:	e1 e0       	ldi	r30, 0x01	; 1
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	ec 0f       	add	r30, r28
    1758:	fd 1f       	adc	r31, r29
    175a:	e4 0f       	add	r30, r20
    175c:	f5 1f       	adc	r31, r21
    175e:	80 95       	com	r24
    1760:	80 83       	st	Z, r24
	escapedLen = escape(buf, len+15, escBuff);
    1762:	b8 01       	movw	r22, r16
    1764:	61 5f       	subi	r22, 0xF1	; 241
    1766:	7f 4f       	sbci	r23, 0xFF	; 255
    1768:	ae 01       	movw	r20, r28
    176a:	4f 5f       	subi	r20, 0xFF	; 255
    176c:	5e 4f       	sbci	r21, 0xFE	; 254
    176e:	ce 01       	movw	r24, r28
    1770:	01 96       	adiw	r24, 0x01	; 1
    1772:	68 df       	rcall	.-304    	; 0x1644 <escape>
	
	//send data out serial port
	for (int i = 0; i<escapedLen;i++)
    1774:	18 16       	cp	r1, r24
    1776:	19 06       	cpc	r1, r25
    1778:	ac f4       	brge	.+42     	; 0x17a4 <send+0xe0>
    177a:	be 01       	movw	r22, r28
    177c:	6f 5f       	subi	r22, 0xFF	; 255
    177e:	7e 4f       	sbci	r23, 0xFE	; 254
    1780:	9b 01       	movw	r18, r22
    1782:	28 0f       	add	r18, r24
    1784:	39 1f       	adc	r19, r25
	{
		while (!(UCSR1A & (1 << UDRE1))) {};
    1786:	e8 ec       	ldi	r30, 0xC8	; 200
    1788:	f0 e0       	ldi	r31, 0x00	; 0
		UDR1 = escBuff[i];
    178a:	4e ec       	ldi	r20, 0xCE	; 206
    178c:	50 e0       	ldi	r21, 0x00	; 0
	escapedLen = escape(buf, len+15, escBuff);
	
	//send data out serial port
	for (int i = 0; i<escapedLen;i++)
	{
		while (!(UCSR1A & (1 << UDRE1))) {};
    178e:	80 81       	ld	r24, Z
    1790:	85 ff       	sbrs	r24, 5
    1792:	fd cf       	rjmp	.-6      	; 0x178e <send+0xca>
		UDR1 = escBuff[i];
    1794:	db 01       	movw	r26, r22
    1796:	8d 91       	ld	r24, X+
    1798:	bd 01       	movw	r22, r26
    179a:	da 01       	movw	r26, r20
    179c:	8c 93       	st	X, r24
	// Total length = LSB + 9 (LSB value + MSB + LSB + start delimiter + checksum)
	buf[len+14] = 0xFF - checksum;
	escapedLen = escape(buf, len+15, escBuff);
	
	//send data out serial port
	for (int i = 0; i<escapedLen;i++)
    179e:	62 17       	cp	r22, r18
    17a0:	73 07       	cpc	r23, r19
    17a2:	a9 f7       	brne	.-22     	; 0x178e <send+0xca>
	{
		while (!(UCSR1A & (1 << UDRE1))) {};
		UDR1 = escBuff[i];
	}
}
    17a4:	c8 5f       	subi	r28, 0xF8	; 248
    17a6:	dd 4f       	sbci	r29, 0xFD	; 253
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	0f 91       	pop	r16
    17ba:	ff 90       	pop	r15
    17bc:	ef 90       	pop	r14
    17be:	08 95       	ret

000017c0 <collectData>:
	n++;
	memcpy(payload+n,&(data->GPSData.latitude),4); //4-7
	n += 4;
	memcpy(payload+n,&(data->GPSData.longitude),4); //8-11
	return;
}
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	2a 97       	sbiw	r28, 0x0a	; 10
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
    17d8:	8c 01       	movw	r16, r24
    17da:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <GetAccelGyroXYZ>
    17de:	be 01       	movw	r22, r28
    17e0:	6d 5f       	subi	r22, 0xFD	; 253
    17e2:	7f 4f       	sbci	r23, 0xFF	; 255
    17e4:	c8 01       	movw	r24, r16
    17e6:	c9 96       	adiw	r24, 0x39	; 57
    17e8:	ba d9       	rcall	.-3212   	; 0xb5e <GetCPT>
    17ea:	8f 81       	ldd	r24, Y+7	; 0x07
    17ec:	f8 01       	movw	r30, r16
    17ee:	84 ab       	std	Z+52, r24	; 0x34
    17f0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <readEmatch>
    17f4:	f8 01       	movw	r30, r16
    17f6:	87 ab       	std	Z+55, r24	; 0x37
    17f8:	ce 01       	movw	r24, r28
    17fa:	03 96       	adiw	r24, 0x03	; 3
    17fc:	de d9       	rcall	.-3140   	; 0xbba <CalcAltitudeConstTemp>
    17fe:	45 d4       	rcall	.+2186   	; 0x208a <__fixunssfsi>
    1800:	7a 83       	std	Y+2, r23	; 0x02
    1802:	69 83       	std	Y+1, r22	; 0x01
    1804:	69 81       	ldd	r22, Y+1	; 0x01
    1806:	7a 81       	ldd	r23, Y+2	; 0x02
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	6e d4       	rcall	.+2268   	; 0x20ea <__floatunsisf>
    180e:	f8 01       	movw	r30, r16
    1810:	62 a7       	std	Z+42, r22	; 0x2a
    1812:	73 a7       	std	Z+43, r23	; 0x2b
    1814:	84 a7       	std	Z+44, r24	; 0x2c
    1816:	95 a7       	std	Z+45, r25	; 0x2d
    1818:	c8 01       	movw	r24, r16
    181a:	48 96       	adiw	r24, 0x18	; 24
    181c:	aa dd       	rcall	.-1196   	; 0x1372 <getGPSData>
    181e:	2a 96       	adiw	r28, 0x0a	; 10
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	1f 91       	pop	r17
    1830:	0f 91       	pop	r16
    1832:	08 95       	ret

00001834 <formPayloadMode2>:
    1834:	ef 92       	push	r14
    1836:	ff 92       	push	r15
    1838:	0f 93       	push	r16
    183a:	1f 93       	push	r17
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	27 97       	sbiw	r28, 0x07	; 7
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	cd bf       	out	0x3d, r28	; 61
    1850:	7c 01       	movw	r14, r24
    1852:	8b 01       	movw	r16, r22
    1854:	1a 82       	std	Y+2, r1	; 0x02
    1856:	19 82       	std	Y+1, r1	; 0x01
    1858:	1b 82       	std	Y+3, r1	; 0x03
    185a:	1c 82       	std	Y+4, r1	; 0x04
    185c:	1d 82       	std	Y+5, r1	; 0x05
    185e:	1e 82       	std	Y+6, r1	; 0x06
    1860:	1f 82       	std	Y+7, r1	; 0x07
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	fb 01       	movw	r30, r22
    1866:	e8 0f       	add	r30, r24
    1868:	f1 1d       	adc	r31, r1
    186a:	82 e0       	ldi	r24, 0x02	; 2
    186c:	80 83       	st	Z, r24
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	8f 5f       	subi	r24, 0xFF	; 255
    1872:	8b 83       	std	Y+3, r24	; 0x03
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	fb 01       	movw	r30, r22
    1878:	e8 0f       	add	r30, r24
    187a:	f1 1d       	adc	r31, r1
    187c:	10 82       	st	Z, r1
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	8f 5f       	subi	r24, 0xFF	; 255
    1882:	8b 83       	std	Y+3, r24	; 0x03
    1884:	f7 01       	movw	r30, r14
    1886:	62 a5       	ldd	r22, Z+42	; 0x2a
    1888:	73 a5       	ldd	r23, Z+43	; 0x2b
    188a:	84 a5       	ldd	r24, Z+44	; 0x2c
    188c:	95 a5       	ldd	r25, Z+45	; 0x2d
    188e:	fe d5       	rcall	.+3068   	; 0x248c <round>
    1890:	fc d3       	rcall	.+2040   	; 0x208a <__fixunssfsi>
    1892:	7a 83       	std	Y+2, r23	; 0x02
    1894:	69 83       	std	Y+1, r22	; 0x01
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	f8 01       	movw	r30, r16
    189a:	e8 0f       	add	r30, r24
    189c:	f1 1d       	adc	r31, r1
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	9a 81       	ldd	r25, Y+2	; 0x02
    18a2:	91 83       	std	Z+1, r25	; 0x01
    18a4:	80 83       	st	Z, r24
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	8e 5f       	subi	r24, 0xFE	; 254
    18aa:	8b 83       	std	Y+3, r24	; 0x03
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	98 01       	movw	r18, r16
    18b0:	28 0f       	add	r18, r24
    18b2:	31 1d       	adc	r19, r1
    18b4:	f7 01       	movw	r30, r14
    18b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    18b8:	93 8d       	ldd	r25, Z+27	; 0x1b
    18ba:	a4 8d       	ldd	r26, Z+28	; 0x1c
    18bc:	b5 8d       	ldd	r27, Z+29	; 0x1d
    18be:	f9 01       	movw	r30, r18
    18c0:	80 83       	st	Z, r24
    18c2:	91 83       	std	Z+1, r25	; 0x01
    18c4:	a2 83       	std	Z+2, r26	; 0x02
    18c6:	b3 83       	std	Z+3, r27	; 0x03
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	8c 5f       	subi	r24, 0xFC	; 252
    18cc:	8b 83       	std	Y+3, r24	; 0x03
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	98 01       	movw	r18, r16
    18d2:	28 0f       	add	r18, r24
    18d4:	31 1d       	adc	r19, r1
    18d6:	f7 01       	movw	r30, r14
    18d8:	86 8d       	ldd	r24, Z+30	; 0x1e
    18da:	97 8d       	ldd	r25, Z+31	; 0x1f
    18dc:	a0 a1       	ldd	r26, Z+32	; 0x20
    18de:	b1 a1       	ldd	r27, Z+33	; 0x21
    18e0:	f9 01       	movw	r30, r18
    18e2:	80 83       	st	Z, r24
    18e4:	91 83       	std	Z+1, r25	; 0x01
    18e6:	a2 83       	std	Z+2, r26	; 0x02
    18e8:	b3 83       	std	Z+3, r27	; 0x03
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	8c 5f       	subi	r24, 0xFC	; 252
    18ee:	8b 83       	std	Y+3, r24	; 0x03
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	98 01       	movw	r18, r16
    18f4:	28 0f       	add	r18, r24
    18f6:	31 1d       	adc	r19, r1
    18f8:	f7 01       	movw	r30, r14
    18fa:	80 81       	ld	r24, Z
    18fc:	91 81       	ldd	r25, Z+1	; 0x01
    18fe:	a2 81       	ldd	r26, Z+2	; 0x02
    1900:	b3 81       	ldd	r27, Z+3	; 0x03
    1902:	f9 01       	movw	r30, r18
    1904:	80 83       	st	Z, r24
    1906:	91 83       	std	Z+1, r25	; 0x01
    1908:	a2 83       	std	Z+2, r26	; 0x02
    190a:	b3 83       	std	Z+3, r27	; 0x03
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	8c 5f       	subi	r24, 0xFC	; 252
    1910:	8b 83       	std	Y+3, r24	; 0x03
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	98 01       	movw	r18, r16
    1916:	28 0f       	add	r18, r24
    1918:	31 1d       	adc	r19, r1
    191a:	f7 01       	movw	r30, r14
    191c:	84 81       	ldd	r24, Z+4	; 0x04
    191e:	95 81       	ldd	r25, Z+5	; 0x05
    1920:	a6 81       	ldd	r26, Z+6	; 0x06
    1922:	b7 81       	ldd	r27, Z+7	; 0x07
    1924:	f9 01       	movw	r30, r18
    1926:	80 83       	st	Z, r24
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	a2 83       	std	Z+2, r26	; 0x02
    192c:	b3 83       	std	Z+3, r27	; 0x03
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	8c 5f       	subi	r24, 0xFC	; 252
    1932:	8b 83       	std	Y+3, r24	; 0x03
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	98 01       	movw	r18, r16
    1938:	28 0f       	add	r18, r24
    193a:	31 1d       	adc	r19, r1
    193c:	f7 01       	movw	r30, r14
    193e:	80 85       	ldd	r24, Z+8	; 0x08
    1940:	91 85       	ldd	r25, Z+9	; 0x09
    1942:	a2 85       	ldd	r26, Z+10	; 0x0a
    1944:	b3 85       	ldd	r27, Z+11	; 0x0b
    1946:	f9 01       	movw	r30, r18
    1948:	80 83       	st	Z, r24
    194a:	91 83       	std	Z+1, r25	; 0x01
    194c:	a2 83       	std	Z+2, r26	; 0x02
    194e:	b3 83       	std	Z+3, r27	; 0x03
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	8c 5f       	subi	r24, 0xFC	; 252
    1954:	8b 83       	std	Y+3, r24	; 0x03
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	98 01       	movw	r18, r16
    195a:	28 0f       	add	r18, r24
    195c:	31 1d       	adc	r19, r1
    195e:	f7 01       	movw	r30, r14
    1960:	84 85       	ldd	r24, Z+12	; 0x0c
    1962:	95 85       	ldd	r25, Z+13	; 0x0d
    1964:	a6 85       	ldd	r26, Z+14	; 0x0e
    1966:	b7 85       	ldd	r27, Z+15	; 0x0f
    1968:	f9 01       	movw	r30, r18
    196a:	80 83       	st	Z, r24
    196c:	91 83       	std	Z+1, r25	; 0x01
    196e:	a2 83       	std	Z+2, r26	; 0x02
    1970:	b3 83       	std	Z+3, r27	; 0x03
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	8c 5f       	subi	r24, 0xFC	; 252
    1976:	8b 83       	std	Y+3, r24	; 0x03
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	98 01       	movw	r18, r16
    197c:	28 0f       	add	r18, r24
    197e:	31 1d       	adc	r19, r1
    1980:	f7 01       	movw	r30, r14
    1982:	80 89       	ldd	r24, Z+16	; 0x10
    1984:	91 89       	ldd	r25, Z+17	; 0x11
    1986:	a2 89       	ldd	r26, Z+18	; 0x12
    1988:	b3 89       	ldd	r27, Z+19	; 0x13
    198a:	f9 01       	movw	r30, r18
    198c:	80 83       	st	Z, r24
    198e:	91 83       	std	Z+1, r25	; 0x01
    1990:	a2 83       	std	Z+2, r26	; 0x02
    1992:	b3 83       	std	Z+3, r27	; 0x03
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	8c 5f       	subi	r24, 0xFC	; 252
    1998:	8b 83       	std	Y+3, r24	; 0x03
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	98 01       	movw	r18, r16
    199e:	28 0f       	add	r18, r24
    19a0:	31 1d       	adc	r19, r1
    19a2:	f7 01       	movw	r30, r14
    19a4:	84 89       	ldd	r24, Z+20	; 0x14
    19a6:	95 89       	ldd	r25, Z+21	; 0x15
    19a8:	a6 89       	ldd	r26, Z+22	; 0x16
    19aa:	b7 89       	ldd	r27, Z+23	; 0x17
    19ac:	f9 01       	movw	r30, r18
    19ae:	80 83       	st	Z, r24
    19b0:	91 83       	std	Z+1, r25	; 0x01
    19b2:	a2 83       	std	Z+2, r26	; 0x02
    19b4:	b3 83       	std	Z+3, r27	; 0x03
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	8c 5f       	subi	r24, 0xFC	; 252
    19ba:	8b 83       	std	Y+3, r24	; 0x03
    19bc:	f7 01       	movw	r30, r14
    19be:	63 a9       	ldd	r22, Z+51	; 0x33
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	91 d3       	rcall	.+1826   	; 0x20ea <__floatunsisf>
    19c8:	6c 83       	std	Y+4, r22	; 0x04
    19ca:	7d 83       	std	Y+5, r23	; 0x05
    19cc:	8e 83       	std	Y+6, r24	; 0x06
    19ce:	9f 83       	std	Y+7, r25	; 0x07
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	f8 01       	movw	r30, r16
    19d4:	e8 0f       	add	r30, r24
    19d6:	f1 1d       	adc	r31, r1
    19d8:	8c 81       	ldd	r24, Y+4	; 0x04
    19da:	9d 81       	ldd	r25, Y+5	; 0x05
    19dc:	ae 81       	ldd	r26, Y+6	; 0x06
    19de:	bf 81       	ldd	r27, Y+7	; 0x07
    19e0:	80 83       	st	Z, r24
    19e2:	91 83       	std	Z+1, r25	; 0x01
    19e4:	a2 83       	std	Z+2, r26	; 0x02
    19e6:	b3 83       	std	Z+3, r27	; 0x03
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	8c 5f       	subi	r24, 0xFC	; 252
    19ec:	8b 83       	std	Y+3, r24	; 0x03
    19ee:	f7 01       	movw	r30, r14
    19f0:	66 a9       	ldd	r22, Z+54	; 0x36
    19f2:	70 e0       	ldi	r23, 0x00	; 0
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	78 d3       	rcall	.+1776   	; 0x20ea <__floatunsisf>
    19fa:	6c 83       	std	Y+4, r22	; 0x04
    19fc:	7d 83       	std	Y+5, r23	; 0x05
    19fe:	8e 83       	std	Y+6, r24	; 0x06
    1a00:	9f 83       	std	Y+7, r25	; 0x07
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	f8 01       	movw	r30, r16
    1a06:	e8 0f       	add	r30, r24
    1a08:	f1 1d       	adc	r31, r1
    1a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0e:	ae 81       	ldd	r26, Y+6	; 0x06
    1a10:	bf 81       	ldd	r27, Y+7	; 0x07
    1a12:	80 83       	st	Z, r24
    1a14:	91 83       	std	Z+1, r25	; 0x01
    1a16:	a2 83       	std	Z+2, r26	; 0x02
    1a18:	b3 83       	std	Z+3, r27	; 0x03
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	8c 5f       	subi	r24, 0xFC	; 252
    1a1e:	8b 83       	std	Y+3, r24	; 0x03
    1a20:	1c 82       	std	Y+4, r1	; 0x04
    1a22:	1d 82       	std	Y+5, r1	; 0x05
    1a24:	1e 82       	std	Y+6, r1	; 0x06
    1a26:	1f 82       	std	Y+7, r1	; 0x07
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	f8 01       	movw	r30, r16
    1a2c:	e8 0f       	add	r30, r24
    1a2e:	f1 1d       	adc	r31, r1
    1a30:	8c 81       	ldd	r24, Y+4	; 0x04
    1a32:	9d 81       	ldd	r25, Y+5	; 0x05
    1a34:	ae 81       	ldd	r26, Y+6	; 0x06
    1a36:	bf 81       	ldd	r27, Y+7	; 0x07
    1a38:	80 83       	st	Z, r24
    1a3a:	91 83       	std	Z+1, r25	; 0x01
    1a3c:	a2 83       	std	Z+2, r26	; 0x02
    1a3e:	b3 83       	std	Z+3, r27	; 0x03
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	8c 5f       	subi	r24, 0xFC	; 252
    1a44:	8b 83       	std	Y+3, r24	; 0x03
    1a46:	f7 01       	movw	r30, r14
    1a48:	60 8d       	ldd	r22, Z+24	; 0x18
    1a4a:	71 8d       	ldd	r23, Z+25	; 0x19
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	4c d3       	rcall	.+1688   	; 0x20ea <__floatunsisf>
    1a52:	1c d5       	rcall	.+2616   	; 0x248c <round>
    1a54:	1a d3       	rcall	.+1588   	; 0x208a <__fixunssfsi>
    1a56:	7a 83       	std	Y+2, r23	; 0x02
    1a58:	69 83       	std	Y+1, r22	; 0x01
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	f8 01       	movw	r30, r16
    1a5e:	e8 0f       	add	r30, r24
    1a60:	f1 1d       	adc	r31, r1
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	9a 81       	ldd	r25, Y+2	; 0x02
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	80 83       	st	Z, r24
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	8e 5f       	subi	r24, 0xFE	; 254
    1a6e:	8b 83       	std	Y+3, r24	; 0x03
    1a70:	f7 01       	movw	r30, r14
    1a72:	62 a1       	ldd	r22, Z+34	; 0x22
    1a74:	73 a1       	ldd	r23, Z+35	; 0x23
    1a76:	84 a1       	ldd	r24, Z+36	; 0x24
    1a78:	95 a1       	ldd	r25, Z+37	; 0x25
    1a7a:	08 d5       	rcall	.+2576   	; 0x248c <round>
    1a7c:	06 d3       	rcall	.+1548   	; 0x208a <__fixunssfsi>
    1a7e:	7a 83       	std	Y+2, r23	; 0x02
    1a80:	69 83       	std	Y+1, r22	; 0x01
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	f8 01       	movw	r30, r16
    1a86:	e8 0f       	add	r30, r24
    1a88:	f1 1d       	adc	r31, r1
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8e:	91 83       	std	Z+1, r25	; 0x01
    1a90:	80 83       	st	Z, r24
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	8e 5f       	subi	r24, 0xFE	; 254
    1a96:	8b 83       	std	Y+3, r24	; 0x03
    1a98:	f7 01       	movw	r30, r14
    1a9a:	66 a1       	ldd	r22, Z+38	; 0x26
    1a9c:	77 a1       	ldd	r23, Z+39	; 0x27
    1a9e:	80 a5       	ldd	r24, Z+40	; 0x28
    1aa0:	91 a5       	ldd	r25, Z+41	; 0x29
    1aa2:	f4 d4       	rcall	.+2536   	; 0x248c <round>
    1aa4:	f2 d2       	rcall	.+1508   	; 0x208a <__fixunssfsi>
    1aa6:	7a 83       	std	Y+2, r23	; 0x02
    1aa8:	69 83       	std	Y+1, r22	; 0x01
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	f8 01       	movw	r30, r16
    1aae:	e8 0f       	add	r30, r24
    1ab0:	f1 1d       	adc	r31, r1
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab6:	91 83       	std	Z+1, r25	; 0x01
    1ab8:	80 83       	st	Z, r24
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	8e 5f       	subi	r24, 0xFE	; 254
    1abe:	8b 83       	std	Y+3, r24	; 0x03
    1ac0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac2:	f7 01       	movw	r30, r14
    1ac4:	86 a9       	ldd	r24, Z+54	; 0x36
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	e9 0f       	add	r30, r25
    1aca:	f1 1d       	adc	r31, r1
    1acc:	80 83       	st	Z, r24
    1ace:	27 96       	adiw	r28, 0x07	; 7
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	1f 91       	pop	r17
    1ae0:	0f 91       	pop	r16
    1ae2:	ff 90       	pop	r15
    1ae4:	ef 90       	pop	r14
    1ae6:	08 95       	ret

00001ae8 <rocketInit>:

void rocketInit(struct DataStruct* data){
    1ae8:	0f 93       	push	r16
    1aea:	1f 93       	push	r17
    1aec:	cf 93       	push	r28
    1aee:	df 93       	push	r29
    1af0:	1f 92       	push	r1
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	8c 01       	movw	r16, r24
    1af8:	2f ef       	ldi	r18, 0xFF	; 255
    1afa:	80 e7       	ldi	r24, 0x70	; 112
    1afc:	92 e0       	ldi	r25, 0x02	; 2
    1afe:	21 50       	subi	r18, 0x01	; 1
    1b00:	80 40       	sbci	r24, 0x00	; 0
    1b02:	90 40       	sbci	r25, 0x00	; 0
    1b04:	e1 f7       	brne	.-8      	; 0x1afe <rocketInit+0x16>
    1b06:	00 c0       	rjmp	.+0      	; 0x1b08 <rocketInit+0x20>
    1b08:	00 00       	nop
	uint8_t volatile i;
	_delay_ms(100);
	InitUSART(RADIOBAUD, RADIOPORT);
    1b0a:	41 e0       	ldi	r20, 0x01	; 1
    1b0c:	60 e0       	ldi	r22, 0x00	; 0
    1b0e:	76 e9       	ldi	r23, 0x96	; 150
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	76 d1       	rcall	.+748    	; 0x1e02 <InitUSART>
	InitGPS();
    1b16:	1d da       	rcall	.-3014   	; 0xf52 <InitGPS>
	InitAccel();
    1b18:	0e 94 a7 03 	call	0x74e	; 0x74e <InitAccel>
	InitAltimeter(data->CC);
    1b1c:	c8 01       	movw	r24, r16
    1b1e:	c9 96       	adiw	r24, 0x39	; 57
    1b20:	0e 94 30 04 	call	0x860	; 0x860 <InitAltimeter>
	data->ematch = readEmatch();
    1b24:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <readEmatch>
    1b28:	f8 01       	movw	r30, r16
    1b2a:	87 ab       	std	Z+55, r24	; 0x37
	data->altitude = 0;
    1b2c:	12 a6       	std	Z+42, r1	; 0x2a
    1b2e:	13 a6       	std	Z+43, r1	; 0x2b
    1b30:	14 a6       	std	Z+44, r1	; 0x2c
    1b32:	15 a6       	std	Z+45, r1	; 0x2d
	data->groundLevel = 0;
    1b34:	16 a6       	std	Z+46, r1	; 0x2e
    1b36:	17 a6       	std	Z+47, r1	; 0x2f
    1b38:	10 aa       	std	Z+48, r1	; 0x30
    1b3a:	11 aa       	std	Z+49, r1	; 0x31
	data->GPSData.GPSAltitude = 0;
    1b3c:	11 8e       	std	Z+25, r1	; 0x19
    1b3e:	10 8e       	std	Z+24, r1	; 0x18
	data->GPSData.latitude = 0;
    1b40:	12 8e       	std	Z+26, r1	; 0x1a
    1b42:	13 8e       	std	Z+27, r1	; 0x1b
    1b44:	14 8e       	std	Z+28, r1	; 0x1c
    1b46:	15 8e       	std	Z+29, r1	; 0x1d
	data->GPSData.longitude = 0;
    1b48:	16 8e       	std	Z+30, r1	; 0x1e
    1b4a:	17 8e       	std	Z+31, r1	; 0x1f
    1b4c:	10 a2       	std	Z+32, r1	; 0x20
    1b4e:	11 a2       	std	Z+33, r1	; 0x21
	data->EstData.kVelocity = 0;
    1b50:	16 a2       	std	Z+38, r1	; 0x26
    1b52:	17 a2       	std	Z+39, r1	; 0x27
    1b54:	10 a6       	std	Z+40, r1	; 0x28
    1b56:	11 a6       	std	Z+41, r1	; 0x29
	data->matchSetReset = NONE;
    1b58:	16 aa       	std	Z+54, r1	; 0x36
	collectData(data);
    1b5a:	c8 01       	movw	r24, r16
    1b5c:	31 de       	rcall	.-926    	; 0x17c0 <collectData>
	for (i = 0; i < 6; i++){
    1b5e:	19 82       	std	Y+1, r1	; 0x01
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	86 30       	cpi	r24, 0x06	; 6
    1b64:	f8 f4       	brcc	.+62     	; 0x1ba4 <rocketInit+0xbc>
		collectData(data);
    1b66:	c8 01       	movw	r24, r16
    1b68:	2b de       	rcall	.-938    	; 0x17c0 <collectData>
		data->groundLevel += data->altitude/6;
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 ec       	ldi	r20, 0xC0	; 192
    1b70:	50 e4       	ldi	r21, 0x40	; 64
    1b72:	f8 01       	movw	r30, r16
    1b74:	62 a5       	ldd	r22, Z+42	; 0x2a
    1b76:	73 a5       	ldd	r23, Z+43	; 0x2b
    1b78:	84 a5       	ldd	r24, Z+44	; 0x2c
    1b7a:	95 a5       	ldd	r25, Z+45	; 0x2d
    1b7c:	df d1       	rcall	.+958    	; 0x1f3c <__divsf3>
    1b7e:	9b 01       	movw	r18, r22
    1b80:	ac 01       	movw	r20, r24
    1b82:	f8 01       	movw	r30, r16
    1b84:	66 a5       	ldd	r22, Z+46	; 0x2e
    1b86:	77 a5       	ldd	r23, Z+47	; 0x2f
    1b88:	80 a9       	ldd	r24, Z+48	; 0x30
    1b8a:	91 a9       	ldd	r25, Z+49	; 0x31
    1b8c:	6f d1       	rcall	.+734    	; 0x1e6c <__addsf3>
    1b8e:	f8 01       	movw	r30, r16
    1b90:	66 a7       	std	Z+46, r22	; 0x2e
    1b92:	77 a7       	std	Z+47, r23	; 0x2f
    1b94:	80 ab       	std	Z+48, r24	; 0x30
    1b96:	91 ab       	std	Z+49, r25	; 0x31
	data->GPSData.latitude = 0;
	data->GPSData.longitude = 0;
	data->EstData.kVelocity = 0;
	data->matchSetReset = NONE;
	collectData(data);
	for (i = 0; i < 6; i++){
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	8f 5f       	subi	r24, 0xFF	; 255
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	86 30       	cpi	r24, 0x06	; 6
    1ba2:	08 f3       	brcs	.-62     	; 0x1b66 <rocketInit+0x7e>
		collectData(data);
		data->groundLevel += data->altitude/6;
	}
	data->EstData.kAltitude = data->groundLevel;
    1ba4:	f8 01       	movw	r30, r16
    1ba6:	86 a5       	ldd	r24, Z+46	; 0x2e
    1ba8:	97 a5       	ldd	r25, Z+47	; 0x2f
    1baa:	a0 a9       	ldd	r26, Z+48	; 0x30
    1bac:	b1 a9       	ldd	r27, Z+49	; 0x31
    1bae:	82 a3       	std	Z+34, r24	; 0x22
    1bb0:	93 a3       	std	Z+35, r25	; 0x23
    1bb2:	a4 a3       	std	Z+36, r26	; 0x24
    1bb4:	b5 a3       	std	Z+37, r27	; 0x25
	Initdt();
    1bb6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Initdt>
	//rxFlag = 0;
	data->mode = 2;
    1bba:	82 e0       	ldi	r24, 0x02	; 2
    1bbc:	f8 01       	movw	r30, r16
    1bbe:	85 ab       	std	Z+53, r24	; 0x35
	data->state = 0;
    1bc0:	13 aa       	std	Z+51, r1	; 0x33
	initSendCnt();
    1bc2:	4b d0       	rcall	.+150    	; 0x1c5a <initSendCnt>
	sei();
    1bc4:	78 94       	sei
	return;
}
    1bc6:	0f 90       	pop	r0
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	1f 91       	pop	r17
    1bce:	0f 91       	pop	r16
    1bd0:	08 95       	ret

00001bd2 <rocketMain>:

void rocketMain(struct DataStruct* data){
    1bd2:	0f 93       	push	r16
    1bd4:	1f 93       	push	r17
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	e7 97       	sbiw	r28, 0x37	; 55
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	cd bf       	out	0x3d, r28	; 61
    1bea:	8c 01       	movw	r16, r24
	uint8_t payload[PAYLOAD2SIZE];
	collectData(data);
    1bec:	e9 dd       	rcall	.-1070   	; 0x17c0 <collectData>
	Estimate(&(data->EstData),&(data->AccelData),data->altitude);
    1bee:	f8 01       	movw	r30, r16
    1bf0:	22 a5       	ldd	r18, Z+42	; 0x2a
    1bf2:	33 a5       	ldd	r19, Z+43	; 0x2b
    1bf4:	44 a5       	ldd	r20, Z+44	; 0x2c
    1bf6:	55 a5       	ldd	r21, Z+45	; 0x2d
    1bf8:	b8 01       	movw	r22, r16
    1bfa:	c8 01       	movw	r24, r16
    1bfc:	82 96       	adiw	r24, 0x22	; 34
    1bfe:	0e 94 ed 00 	call	0x1da	; 0x1da <Estimate>
	if (sendCnt()){
    1c02:	33 d0       	rcall	.+102    	; 0x1c6a <sendCnt>
    1c04:	88 23       	and	r24, r24
    1c06:	61 f0       	breq	.+24     	; 0x1c20 <rocketMain+0x4e>
		formPayloadMode2(data, payload);
    1c08:	be 01       	movw	r22, r28
    1c0a:	6f 5f       	subi	r22, 0xFF	; 255
    1c0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c0e:	c8 01       	movw	r24, r16
    1c10:	11 de       	rcall	.-990    	; 0x1834 <formPayloadMode2>
		send(payload, PAYLOAD2SIZE, GNDMAC);
    1c12:	44 e0       	ldi	r20, 0x04	; 4
    1c14:	50 e0       	ldi	r21, 0x00	; 0
    1c16:	67 e3       	ldi	r22, 0x37	; 55
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	ce 01       	movw	r24, r28
    1c1c:	01 96       	adiw	r24, 0x01	; 1
    1c1e:	52 dd       	rcall	.-1372   	; 0x16c4 <send>
	}
	return;
}
    1c20:	e7 96       	adiw	r28, 0x37	; 55
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	de bf       	out	0x3e, r29	; 62
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	cd bf       	out	0x3d, r28	; 61
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	1f 91       	pop	r17
    1c32:	0f 91       	pop	r16
    1c34:	08 95       	ret

00001c36 <dataOnlyMain>:

void dataOnlyMain(void){
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	c9 57       	subi	r28, 0x79	; 121
    1c40:	d1 09       	sbc	r29, r1
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	de bf       	out	0x3e, r29	; 62
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	cd bf       	out	0x3d, r28	; 61
	struct DataStruct data;
	rocketInit(&data);
    1c4c:	ce 01       	movw	r24, r28
    1c4e:	01 96       	adiw	r24, 0x01	; 1
    1c50:	4b df       	rcall	.-362    	; 0x1ae8 <rocketInit>
	while (1){
		rocketMain(&data);
    1c52:	ce 01       	movw	r24, r28
    1c54:	01 96       	adiw	r24, 0x01	; 1
    1c56:	bd df       	rcall	.-134    	; 0x1bd2 <rocketMain>
	}
    1c58:	fc cf       	rjmp	.-8      	; 0x1c52 <dataOnlyMain+0x1c>

00001c5a <initSendCnt>:
		return 0;
	}
}

void initSendCnt(void){
	TCCR5B = CSDIV64; //.524 seconds until rollover
    1c5a:	83 e0       	ldi	r24, 0x03	; 3
    1c5c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
	TCNT5 = 0;
    1c60:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
    1c64:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
    1c68:	08 95       	ret

00001c6a <sendCnt>:
	return;
}

uint8_t sendCnt(void){
    1c6a:	cf 93       	push	r28
    1c6c:	df 93       	push	r29
    1c6e:	1f 92       	push	r1
    1c70:	1f 92       	push	r1
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
	uint16_t volatile chk;
	chk = TCNT5;
    1c76:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
    1c7a:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
    1c7e:	9a 83       	std	Y+2, r25	; 0x02
    1c80:	89 83       	std	Y+1, r24	; 0x01
	if (chk >= SENDRATE){
    1c82:	69 81       	ldd	r22, Y+1	; 0x01
    1c84:	7a 81       	ldd	r23, Y+2	; 0x02
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	2f d2       	rcall	.+1118   	; 0x20ea <__floatunsisf>
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e5       	ldi	r19, 0x50	; 80
    1c90:	43 e4       	ldi	r20, 0x43	; 67
    1c92:	56 e4       	ldi	r21, 0x46	; 70
    1c94:	4f d3       	rcall	.+1694   	; 0x2334 <__gesf2>
    1c96:	88 23       	and	r24, r24
    1c98:	34 f0       	brlt	.+12     	; 0x1ca6 <sendCnt+0x3c>
		TCNT5 = 0;
    1c9a:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
    1c9e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
		return 1;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	01 c0       	rjmp	.+2      	; 0x1ca8 <sendCnt+0x3e>
		} else {
		return 0;
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	08 95       	ret

00001cb2 <SPISetMode>:
#include "SPIComm.h"

void SPISetMode(uint8_t mode){
	SPCR = ((SPCR & ~(3 << CPHA)) | mode);
    1cb2:	9c b5       	in	r25, 0x2c	; 44
    1cb4:	93 7f       	andi	r25, 0xF3	; 243
    1cb6:	89 2b       	or	r24, r25
    1cb8:	8c bd       	out	0x2c, r24	; 44
    1cba:	08 95       	ret

00001cbc <SPIMasterInit>:
	return;
}

void SPIMasterInit(void){
	/* Set MOSI and SCK output, all others input */
	DDRB = DDRB | (1<<MOSI)|(1<<SCK);
    1cbc:	84 b1       	in	r24, 0x04	; 4
    1cbe:	86 60       	ori	r24, 0x06	; 6
    1cc0:	84 b9       	out	0x04, r24	; 4
	PORTB = PORTB | (1<<PB0);
    1cc2:	28 9a       	sbi	0x05, 0	; 5
	/* Enable SPI, Master, set clock rate fclk/16 125kHz */
	SPCR = ((SPCR & ~((1<<SPE)|(1<<MSTR)|(1<<SPR1))) | ((1<<SPE)|(1<<MSTR)|(1<<SPR1)));
    1cc4:	8c b5       	in	r24, 0x2c	; 44
    1cc6:	82 65       	ori	r24, 0x52	; 82
    1cc8:	8c bd       	out	0x2c, r24	; 44
    1cca:	08 95       	ret

00001ccc <SPIMasterTransmit>:
	return;
}

void SPIMasterTransmit(uint8_t datum){
    1ccc:	cf 93       	push	r28
    1cce:	c8 2f       	mov	r28, r24
	SPIMasterInit();
    1cd0:	f5 df       	rcall	.-22     	; 0x1cbc <SPIMasterInit>
	/* Start transmission */
	SPDR = datum;
    1cd2:	ce bd       	out	0x2e, r28	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF))){};
    1cd4:	0d b4       	in	r0, 0x2d	; 45
    1cd6:	07 fe       	sbrs	r0, 7
    1cd8:	fd cf       	rjmp	.-6      	; 0x1cd4 <SPIMasterTransmit+0x8>
	return;
}
    1cda:	cf 91       	pop	r28
    1cdc:	08 95       	ret

00001cde <SPIMasterRead>:

uint8_t SPIMasterRead(void){
	SPDR = 0;
    1cde:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF))){};
    1ce0:	0d b4       	in	r0, 0x2d	; 45
    1ce2:	07 fe       	sbrs	r0, 7
    1ce4:	fd cf       	rjmp	.-6      	; 0x1ce0 <SPIMasterRead+0x2>
	return SPDR;
    1ce6:	8e b5       	in	r24, 0x2e	; 46
}
    1ce8:	08 95       	ret

00001cea <SPIRead32Bit>:

/* Reads in up to a 32 bit value */
uint32_t SPIRead32Bit(uint8_t NumBytes){
    1cea:	1f 93       	push	r17
    1cec:	cf 93       	push	r28
    1cee:	df 93       	push	r29
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <SPIRead32Bit+0x8>
    1cf2:	1f 92       	push	r1
    1cf4:	1f 92       	push	r1
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	18 2f       	mov	r17, r24
	uint32_t volatile ReadByte = 0;
    1cfc:	19 82       	std	Y+1, r1	; 0x01
    1cfe:	1a 82       	std	Y+2, r1	; 0x02
    1d00:	1b 82       	std	Y+3, r1	; 0x03
    1d02:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t volatile i = 0;
    1d04:	1d 82       	std	Y+5, r1	; 0x05
	for (i; i < NumBytes; i++){
    1d06:	8d 81       	ldd	r24, Y+5	; 0x05
    1d08:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0a:	81 17       	cp	r24, r17
    1d0c:	f8 f4       	brcc	.+62     	; 0x1d4c <SPIRead32Bit+0x62>
		ReadByte = ReadByte << 8;
    1d0e:	49 81       	ldd	r20, Y+1	; 0x01
    1d10:	5a 81       	ldd	r21, Y+2	; 0x02
    1d12:	6b 81       	ldd	r22, Y+3	; 0x03
    1d14:	7c 81       	ldd	r23, Y+4	; 0x04
    1d16:	76 2f       	mov	r23, r22
    1d18:	65 2f       	mov	r22, r21
    1d1a:	54 2f       	mov	r21, r20
    1d1c:	44 27       	eor	r20, r20
    1d1e:	49 83       	std	Y+1, r20	; 0x01
    1d20:	5a 83       	std	Y+2, r21	; 0x02
    1d22:	6b 83       	std	Y+3, r22	; 0x03
    1d24:	7c 83       	std	Y+4, r23	; 0x04
		ReadByte += SPIMasterRead();
    1d26:	db df       	rcall	.-74     	; 0x1cde <SPIMasterRead>
    1d28:	49 81       	ldd	r20, Y+1	; 0x01
    1d2a:	5a 81       	ldd	r21, Y+2	; 0x02
    1d2c:	6b 81       	ldd	r22, Y+3	; 0x03
    1d2e:	7c 81       	ldd	r23, Y+4	; 0x04
    1d30:	48 0f       	add	r20, r24
    1d32:	51 1d       	adc	r21, r1
    1d34:	61 1d       	adc	r22, r1
    1d36:	71 1d       	adc	r23, r1
    1d38:	49 83       	std	Y+1, r20	; 0x01
    1d3a:	5a 83       	std	Y+2, r21	; 0x02
    1d3c:	6b 83       	std	Y+3, r22	; 0x03
    1d3e:	7c 83       	std	Y+4, r23	; 0x04

/* Reads in up to a 32 bit value */
uint32_t SPIRead32Bit(uint8_t NumBytes){
	uint32_t volatile ReadByte = 0;
	uint8_t volatile i = 0;
	for (i; i < NumBytes; i++){
    1d40:	9d 81       	ldd	r25, Y+5	; 0x05
    1d42:	9f 5f       	subi	r25, 0xFF	; 255
    1d44:	9d 83       	std	Y+5, r25	; 0x05
    1d46:	8d 81       	ldd	r24, Y+5	; 0x05
    1d48:	81 17       	cp	r24, r17
    1d4a:	08 f3       	brcs	.-62     	; 0x1d0e <SPIRead32Bit+0x24>
		ReadByte = ReadByte << 8;
		ReadByte += SPIMasterRead();
	}
	return ReadByte;
    1d4c:	69 81       	ldd	r22, Y+1	; 0x01
    1d4e:	7a 81       	ldd	r23, Y+2	; 0x02
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	9c 81       	ldd	r25, Y+4	; 0x04
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	1f 91       	pop	r17
    1d64:	08 95       	ret

00001d66 <SetBR>:
#include "USARTComm.h"

uint16_t SetBR(uint32_t baud, uint8_t port){
    1d66:	1f 93       	push	r17
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	1f 92       	push	r1
    1d6e:	1f 92       	push	r1
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	14 2f       	mov	r17, r20
	uint16_t volatile SetUBRR;
	SetUBRR = (F_CPU/(16*baud) - 1);
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	aa 1f       	adc	r26, r26
    1d80:	bb 1f       	adc	r27, r27
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	aa 1f       	adc	r26, r26
    1d88:	bb 1f       	adc	r27, r27
    1d8a:	9c 01       	movw	r18, r24
    1d8c:	ad 01       	movw	r20, r26
    1d8e:	22 0f       	add	r18, r18
    1d90:	33 1f       	adc	r19, r19
    1d92:	44 1f       	adc	r20, r20
    1d94:	55 1f       	adc	r21, r21
    1d96:	22 0f       	add	r18, r18
    1d98:	33 1f       	adc	r19, r19
    1d9a:	44 1f       	adc	r20, r20
    1d9c:	55 1f       	adc	r21, r21
    1d9e:	60 e0       	ldi	r22, 0x00	; 0
    1da0:	72 e1       	ldi	r23, 0x12	; 18
    1da2:	8a e7       	ldi	r24, 0x7A	; 122
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	bb d3       	rcall	.+1910   	; 0x251e <__udivmodsi4>
    1da8:	21 50       	subi	r18, 0x01	; 1
    1daa:	31 09       	sbc	r19, r1
    1dac:	3a 83       	std	Y+2, r19	; 0x02
    1dae:	29 83       	std	Y+1, r18	; 0x01
	if (SetUBRR > 4095 || !SetUBRR){
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	9a 81       	ldd	r25, Y+2	; 0x02
    1db4:	81 15       	cp	r24, r1
    1db6:	90 41       	sbci	r25, 0x10	; 16
    1db8:	e0 f4       	brcc	.+56     	; 0x1df2 <SetBR+0x8c>
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbe:	00 97       	sbiw	r24, 0x00	; 0
    1dc0:	d1 f0       	breq	.+52     	; 0x1df6 <SetBR+0x90>
		return 0;
	} else {
		if (port){
    1dc2:	11 23       	and	r17, r17
    1dc4:	59 f0       	breq	.+22     	; 0x1ddc <SetBR+0x76>
			UBRR1H = SetUBRR >> 8;
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dca:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
			UBRR1L = SetUBRR;
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
			return SetUBRR;
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dda:	0d c0       	rjmp	.+26     	; 0x1df6 <SetBR+0x90>
		} else {
			UBRR0H = SetUBRR >> 8;
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	9a 81       	ldd	r25, Y+2	; 0x02
    1de0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
			UBRR0L = SetUBRR;
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	9a 81       	ldd	r25, Y+2	; 0x02
    1de8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
			return SetUBRR;
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	9a 81       	ldd	r25, Y+2	; 0x02
    1df0:	02 c0       	rjmp	.+4      	; 0x1df6 <SetBR+0x90>

uint16_t SetBR(uint32_t baud, uint8_t port){
	uint16_t volatile SetUBRR;
	SetUBRR = (F_CPU/(16*baud) - 1);
	if (SetUBRR > 4095 || !SetUBRR){
		return 0;
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	90 e0       	ldi	r25, 0x00	; 0
			UBRR0H = SetUBRR >> 8;
			UBRR0L = SetUBRR;
			return SetUBRR;
		}
	}
}
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	1f 91       	pop	r17
    1e00:	08 95       	ret

00001e02 <InitUSART>:

uint16_t InitUSART(uint32_t baud, uint8_t port){
    1e02:	1f 93       	push	r17
    1e04:	cf 93       	push	r28
    1e06:	df 93       	push	r29
    1e08:	1f 92       	push	r1
    1e0a:	1f 92       	push	r1
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	14 2f       	mov	r17, r20
	uint16_t volatile SetUBRR;
	SetUBRR = SetBR(baud, port);
    1e12:	a9 df       	rcall	.-174    	; 0x1d66 <SetBR>
    1e14:	9a 83       	std	Y+2, r25	; 0x02
    1e16:	89 83       	std	Y+1, r24	; 0x01
	if (SetUBRR){
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1c:	00 97       	sbiw	r24, 0x00	; 0
    1e1e:	69 f0       	breq	.+26     	; 0x1e3a <InitUSART+0x38>
		if (port){
    1e20:	11 23       	and	r17, r17
    1e22:	31 f0       	breq	.+12     	; 0x1e30 <InitUSART+0x2e>
			UCSR1B = (1 << RXEN1)|(1 << TXEN1);
    1e24:	88 e1       	ldi	r24, 0x18	; 24
    1e26:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
			return SetUBRR;
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2e:	05 c0       	rjmp	.+10     	; 0x1e3a <InitUSART+0x38>
		} else {
			UCSR0B = (1 << RXEN0)|(1 << TXEN0)|(1 << RXCIE0);
    1e30:	88 e9       	ldi	r24, 0x98	; 152
    1e32:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
			return SetUBRR;
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	9a 81       	ldd	r25, Y+2	; 0x02
		}
	} else {
		return 0;
	}
}
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	df 91       	pop	r29
    1e40:	cf 91       	pop	r28
    1e42:	1f 91       	pop	r17
    1e44:	08 95       	ret

00001e46 <USARTTX>:

void USARTTX(uint8_t TXval, uint8_t port){
	if (port){	
    1e46:	66 23       	and	r22, r22
    1e48:	41 f0       	breq	.+16     	; 0x1e5a <USARTTX+0x14>
		while(!(UCSR1A & (1 << UDRE1))){}
    1e4a:	e8 ec       	ldi	r30, 0xC8	; 200
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	90 81       	ld	r25, Z
    1e50:	95 ff       	sbrs	r25, 5
    1e52:	fd cf       	rjmp	.-6      	; 0x1e4e <USARTTX+0x8>
		UDR1 = TXval;
    1e54:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1e58:	08 95       	ret
	} else {
		while(!(UCSR0A & (1 << UDRE0))){}
    1e5a:	e0 ec       	ldi	r30, 0xC0	; 192
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	90 81       	ld	r25, Z
    1e60:	95 ff       	sbrs	r25, 5
    1e62:	fd cf       	rjmp	.-6      	; 0x1e5e <USARTTX+0x18>
		UDR0 = TXval;
    1e64:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1e68:	08 95       	ret

00001e6a <__subsf3>:
    1e6a:	50 58       	subi	r21, 0x80	; 128

00001e6c <__addsf3>:
    1e6c:	bb 27       	eor	r27, r27
    1e6e:	aa 27       	eor	r26, r26
    1e70:	0e d0       	rcall	.+28     	; 0x1e8e <__addsf3x>
    1e72:	26 c2       	rjmp	.+1100   	; 0x22c0 <__fp_round>
    1e74:	17 d2       	rcall	.+1070   	; 0x22a4 <__fp_pscA>
    1e76:	30 f0       	brcs	.+12     	; 0x1e84 <__addsf3+0x18>
    1e78:	1c d2       	rcall	.+1080   	; 0x22b2 <__fp_pscB>
    1e7a:	20 f0       	brcs	.+8      	; 0x1e84 <__addsf3+0x18>
    1e7c:	31 f4       	brne	.+12     	; 0x1e8a <__addsf3+0x1e>
    1e7e:	9f 3f       	cpi	r25, 0xFF	; 255
    1e80:	11 f4       	brne	.+4      	; 0x1e86 <__addsf3+0x1a>
    1e82:	1e f4       	brtc	.+6      	; 0x1e8a <__addsf3+0x1e>
    1e84:	d7 c1       	rjmp	.+942    	; 0x2234 <__fp_nan>
    1e86:	0e f4       	brtc	.+2      	; 0x1e8a <__addsf3+0x1e>
    1e88:	e0 95       	com	r30
    1e8a:	e7 fb       	bst	r30, 7
    1e8c:	cd c1       	rjmp	.+922    	; 0x2228 <__fp_inf>

00001e8e <__addsf3x>:
    1e8e:	e9 2f       	mov	r30, r25
    1e90:	28 d2       	rcall	.+1104   	; 0x22e2 <__fp_split3>
    1e92:	80 f3       	brcs	.-32     	; 0x1e74 <__addsf3+0x8>
    1e94:	ba 17       	cp	r27, r26
    1e96:	62 07       	cpc	r22, r18
    1e98:	73 07       	cpc	r23, r19
    1e9a:	84 07       	cpc	r24, r20
    1e9c:	95 07       	cpc	r25, r21
    1e9e:	18 f0       	brcs	.+6      	; 0x1ea6 <__addsf3x+0x18>
    1ea0:	71 f4       	brne	.+28     	; 0x1ebe <__addsf3x+0x30>
    1ea2:	9e f5       	brtc	.+102    	; 0x1f0a <__addsf3x+0x7c>
    1ea4:	40 c2       	rjmp	.+1152   	; 0x2326 <__fp_zero>
    1ea6:	0e f4       	brtc	.+2      	; 0x1eaa <__addsf3x+0x1c>
    1ea8:	e0 95       	com	r30
    1eaa:	0b 2e       	mov	r0, r27
    1eac:	ba 2f       	mov	r27, r26
    1eae:	a0 2d       	mov	r26, r0
    1eb0:	0b 01       	movw	r0, r22
    1eb2:	b9 01       	movw	r22, r18
    1eb4:	90 01       	movw	r18, r0
    1eb6:	0c 01       	movw	r0, r24
    1eb8:	ca 01       	movw	r24, r20
    1eba:	a0 01       	movw	r20, r0
    1ebc:	11 24       	eor	r1, r1
    1ebe:	ff 27       	eor	r31, r31
    1ec0:	59 1b       	sub	r21, r25
    1ec2:	99 f0       	breq	.+38     	; 0x1eea <__addsf3x+0x5c>
    1ec4:	59 3f       	cpi	r21, 0xF9	; 249
    1ec6:	50 f4       	brcc	.+20     	; 0x1edc <__addsf3x+0x4e>
    1ec8:	50 3e       	cpi	r21, 0xE0	; 224
    1eca:	68 f1       	brcs	.+90     	; 0x1f26 <__addsf3x+0x98>
    1ecc:	1a 16       	cp	r1, r26
    1ece:	f0 40       	sbci	r31, 0x00	; 0
    1ed0:	a2 2f       	mov	r26, r18
    1ed2:	23 2f       	mov	r18, r19
    1ed4:	34 2f       	mov	r19, r20
    1ed6:	44 27       	eor	r20, r20
    1ed8:	58 5f       	subi	r21, 0xF8	; 248
    1eda:	f3 cf       	rjmp	.-26     	; 0x1ec2 <__addsf3x+0x34>
    1edc:	46 95       	lsr	r20
    1ede:	37 95       	ror	r19
    1ee0:	27 95       	ror	r18
    1ee2:	a7 95       	ror	r26
    1ee4:	f0 40       	sbci	r31, 0x00	; 0
    1ee6:	53 95       	inc	r21
    1ee8:	c9 f7       	brne	.-14     	; 0x1edc <__addsf3x+0x4e>
    1eea:	7e f4       	brtc	.+30     	; 0x1f0a <__addsf3x+0x7c>
    1eec:	1f 16       	cp	r1, r31
    1eee:	ba 0b       	sbc	r27, r26
    1ef0:	62 0b       	sbc	r22, r18
    1ef2:	73 0b       	sbc	r23, r19
    1ef4:	84 0b       	sbc	r24, r20
    1ef6:	ba f0       	brmi	.+46     	; 0x1f26 <__addsf3x+0x98>
    1ef8:	91 50       	subi	r25, 0x01	; 1
    1efa:	a1 f0       	breq	.+40     	; 0x1f24 <__addsf3x+0x96>
    1efc:	ff 0f       	add	r31, r31
    1efe:	bb 1f       	adc	r27, r27
    1f00:	66 1f       	adc	r22, r22
    1f02:	77 1f       	adc	r23, r23
    1f04:	88 1f       	adc	r24, r24
    1f06:	c2 f7       	brpl	.-16     	; 0x1ef8 <__addsf3x+0x6a>
    1f08:	0e c0       	rjmp	.+28     	; 0x1f26 <__addsf3x+0x98>
    1f0a:	ba 0f       	add	r27, r26
    1f0c:	62 1f       	adc	r22, r18
    1f0e:	73 1f       	adc	r23, r19
    1f10:	84 1f       	adc	r24, r20
    1f12:	48 f4       	brcc	.+18     	; 0x1f26 <__addsf3x+0x98>
    1f14:	87 95       	ror	r24
    1f16:	77 95       	ror	r23
    1f18:	67 95       	ror	r22
    1f1a:	b7 95       	ror	r27
    1f1c:	f7 95       	ror	r31
    1f1e:	9e 3f       	cpi	r25, 0xFE	; 254
    1f20:	08 f0       	brcs	.+2      	; 0x1f24 <__addsf3x+0x96>
    1f22:	b3 cf       	rjmp	.-154    	; 0x1e8a <__addsf3+0x1e>
    1f24:	93 95       	inc	r25
    1f26:	88 0f       	add	r24, r24
    1f28:	08 f0       	brcs	.+2      	; 0x1f2c <__addsf3x+0x9e>
    1f2a:	99 27       	eor	r25, r25
    1f2c:	ee 0f       	add	r30, r30
    1f2e:	97 95       	ror	r25
    1f30:	87 95       	ror	r24
    1f32:	08 95       	ret

00001f34 <__cmpsf2>:
    1f34:	55 d1       	rcall	.+682    	; 0x21e0 <__fp_cmp>
    1f36:	08 f4       	brcc	.+2      	; 0x1f3a <__cmpsf2+0x6>
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	08 95       	ret

00001f3c <__divsf3>:
    1f3c:	0c d0       	rcall	.+24     	; 0x1f56 <__divsf3x>
    1f3e:	c0 c1       	rjmp	.+896    	; 0x22c0 <__fp_round>
    1f40:	b8 d1       	rcall	.+880    	; 0x22b2 <__fp_pscB>
    1f42:	40 f0       	brcs	.+16     	; 0x1f54 <__divsf3+0x18>
    1f44:	af d1       	rcall	.+862    	; 0x22a4 <__fp_pscA>
    1f46:	30 f0       	brcs	.+12     	; 0x1f54 <__divsf3+0x18>
    1f48:	21 f4       	brne	.+8      	; 0x1f52 <__divsf3+0x16>
    1f4a:	5f 3f       	cpi	r21, 0xFF	; 255
    1f4c:	19 f0       	breq	.+6      	; 0x1f54 <__divsf3+0x18>
    1f4e:	6c c1       	rjmp	.+728    	; 0x2228 <__fp_inf>
    1f50:	51 11       	cpse	r21, r1
    1f52:	ea c1       	rjmp	.+980    	; 0x2328 <__fp_szero>
    1f54:	6f c1       	rjmp	.+734    	; 0x2234 <__fp_nan>

00001f56 <__divsf3x>:
    1f56:	c5 d1       	rcall	.+906    	; 0x22e2 <__fp_split3>
    1f58:	98 f3       	brcs	.-26     	; 0x1f40 <__divsf3+0x4>

00001f5a <__divsf3_pse>:
    1f5a:	99 23       	and	r25, r25
    1f5c:	c9 f3       	breq	.-14     	; 0x1f50 <__divsf3+0x14>
    1f5e:	55 23       	and	r21, r21
    1f60:	b1 f3       	breq	.-20     	; 0x1f4e <__divsf3+0x12>
    1f62:	95 1b       	sub	r25, r21
    1f64:	55 0b       	sbc	r21, r21
    1f66:	bb 27       	eor	r27, r27
    1f68:	aa 27       	eor	r26, r26
    1f6a:	62 17       	cp	r22, r18
    1f6c:	73 07       	cpc	r23, r19
    1f6e:	84 07       	cpc	r24, r20
    1f70:	38 f0       	brcs	.+14     	; 0x1f80 <__divsf3_pse+0x26>
    1f72:	9f 5f       	subi	r25, 0xFF	; 255
    1f74:	5f 4f       	sbci	r21, 0xFF	; 255
    1f76:	22 0f       	add	r18, r18
    1f78:	33 1f       	adc	r19, r19
    1f7a:	44 1f       	adc	r20, r20
    1f7c:	aa 1f       	adc	r26, r26
    1f7e:	a9 f3       	breq	.-22     	; 0x1f6a <__divsf3_pse+0x10>
    1f80:	33 d0       	rcall	.+102    	; 0x1fe8 <__divsf3_pse+0x8e>
    1f82:	0e 2e       	mov	r0, r30
    1f84:	3a f0       	brmi	.+14     	; 0x1f94 <__divsf3_pse+0x3a>
    1f86:	e0 e8       	ldi	r30, 0x80	; 128
    1f88:	30 d0       	rcall	.+96     	; 0x1fea <__divsf3_pse+0x90>
    1f8a:	91 50       	subi	r25, 0x01	; 1
    1f8c:	50 40       	sbci	r21, 0x00	; 0
    1f8e:	e6 95       	lsr	r30
    1f90:	00 1c       	adc	r0, r0
    1f92:	ca f7       	brpl	.-14     	; 0x1f86 <__divsf3_pse+0x2c>
    1f94:	29 d0       	rcall	.+82     	; 0x1fe8 <__divsf3_pse+0x8e>
    1f96:	fe 2f       	mov	r31, r30
    1f98:	27 d0       	rcall	.+78     	; 0x1fe8 <__divsf3_pse+0x8e>
    1f9a:	66 0f       	add	r22, r22
    1f9c:	77 1f       	adc	r23, r23
    1f9e:	88 1f       	adc	r24, r24
    1fa0:	bb 1f       	adc	r27, r27
    1fa2:	26 17       	cp	r18, r22
    1fa4:	37 07       	cpc	r19, r23
    1fa6:	48 07       	cpc	r20, r24
    1fa8:	ab 07       	cpc	r26, r27
    1faa:	b0 e8       	ldi	r27, 0x80	; 128
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <__divsf3_pse+0x56>
    1fae:	bb 0b       	sbc	r27, r27
    1fb0:	80 2d       	mov	r24, r0
    1fb2:	bf 01       	movw	r22, r30
    1fb4:	ff 27       	eor	r31, r31
    1fb6:	93 58       	subi	r25, 0x83	; 131
    1fb8:	5f 4f       	sbci	r21, 0xFF	; 255
    1fba:	2a f0       	brmi	.+10     	; 0x1fc6 <__divsf3_pse+0x6c>
    1fbc:	9e 3f       	cpi	r25, 0xFE	; 254
    1fbe:	51 05       	cpc	r21, r1
    1fc0:	68 f0       	brcs	.+26     	; 0x1fdc <__divsf3_pse+0x82>
    1fc2:	32 c1       	rjmp	.+612    	; 0x2228 <__fp_inf>
    1fc4:	b1 c1       	rjmp	.+866    	; 0x2328 <__fp_szero>
    1fc6:	5f 3f       	cpi	r21, 0xFF	; 255
    1fc8:	ec f3       	brlt	.-6      	; 0x1fc4 <__divsf3_pse+0x6a>
    1fca:	98 3e       	cpi	r25, 0xE8	; 232
    1fcc:	dc f3       	brlt	.-10     	; 0x1fc4 <__divsf3_pse+0x6a>
    1fce:	86 95       	lsr	r24
    1fd0:	77 95       	ror	r23
    1fd2:	67 95       	ror	r22
    1fd4:	b7 95       	ror	r27
    1fd6:	f7 95       	ror	r31
    1fd8:	9f 5f       	subi	r25, 0xFF	; 255
    1fda:	c9 f7       	brne	.-14     	; 0x1fce <__divsf3_pse+0x74>
    1fdc:	88 0f       	add	r24, r24
    1fde:	91 1d       	adc	r25, r1
    1fe0:	96 95       	lsr	r25
    1fe2:	87 95       	ror	r24
    1fe4:	97 f9       	bld	r25, 7
    1fe6:	08 95       	ret
    1fe8:	e1 e0       	ldi	r30, 0x01	; 1
    1fea:	66 0f       	add	r22, r22
    1fec:	77 1f       	adc	r23, r23
    1fee:	88 1f       	adc	r24, r24
    1ff0:	bb 1f       	adc	r27, r27
    1ff2:	62 17       	cp	r22, r18
    1ff4:	73 07       	cpc	r23, r19
    1ff6:	84 07       	cpc	r24, r20
    1ff8:	ba 07       	cpc	r27, r26
    1ffa:	20 f0       	brcs	.+8      	; 0x2004 <__divsf3_pse+0xaa>
    1ffc:	62 1b       	sub	r22, r18
    1ffe:	73 0b       	sbc	r23, r19
    2000:	84 0b       	sbc	r24, r20
    2002:	ba 0b       	sbc	r27, r26
    2004:	ee 1f       	adc	r30, r30
    2006:	88 f7       	brcc	.-30     	; 0x1fea <__divsf3_pse+0x90>
    2008:	e0 95       	com	r30
    200a:	08 95       	ret

0000200c <__fixsfdi>:
    200c:	be e3       	ldi	r27, 0x3E	; 62
    200e:	04 d0       	rcall	.+8      	; 0x2018 <__fixunssfdi+0x2>
    2010:	08 f4       	brcc	.+2      	; 0x2014 <__fixsfdi+0x8>
    2012:	90 e8       	ldi	r25, 0x80	; 128
    2014:	08 95       	ret

00002016 <__fixunssfdi>:
    2016:	bf e3       	ldi	r27, 0x3F	; 63
    2018:	22 27       	eor	r18, r18
    201a:	33 27       	eor	r19, r19
    201c:	a9 01       	movw	r20, r18
    201e:	69 d1       	rcall	.+722    	; 0x22f2 <__fp_splitA>
    2020:	58 f1       	brcs	.+86     	; 0x2078 <__fixunssfdi+0x62>
    2022:	9f 57       	subi	r25, 0x7F	; 127
    2024:	40 f1       	brcs	.+80     	; 0x2076 <__fixunssfdi+0x60>
    2026:	b9 17       	cp	r27, r25
    2028:	38 f1       	brcs	.+78     	; 0x2078 <__fixunssfdi+0x62>
    202a:	bf e3       	ldi	r27, 0x3F	; 63
    202c:	b9 1b       	sub	r27, r25
    202e:	99 27       	eor	r25, r25
    2030:	b8 50       	subi	r27, 0x08	; 8
    2032:	3a f4       	brpl	.+14     	; 0x2042 <__fixunssfdi+0x2c>
    2034:	66 0f       	add	r22, r22
    2036:	77 1f       	adc	r23, r23
    2038:	88 1f       	adc	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	b3 95       	inc	r27
    203e:	d2 f3       	brmi	.-12     	; 0x2034 <__fixunssfdi+0x1e>
    2040:	16 c0       	rjmp	.+44     	; 0x206e <__fixunssfdi+0x58>
    2042:	b8 50       	subi	r27, 0x08	; 8
    2044:	4a f0       	brmi	.+18     	; 0x2058 <__fixunssfdi+0x42>
    2046:	23 2f       	mov	r18, r19
    2048:	34 2f       	mov	r19, r20
    204a:	45 2f       	mov	r20, r21
    204c:	56 2f       	mov	r21, r22
    204e:	67 2f       	mov	r22, r23
    2050:	78 2f       	mov	r23, r24
    2052:	88 27       	eor	r24, r24
    2054:	b8 50       	subi	r27, 0x08	; 8
    2056:	ba f7       	brpl	.-18     	; 0x2046 <__fixunssfdi+0x30>
    2058:	b8 5f       	subi	r27, 0xF8	; 248
    205a:	49 f0       	breq	.+18     	; 0x206e <__fixunssfdi+0x58>
    205c:	86 95       	lsr	r24
    205e:	77 95       	ror	r23
    2060:	67 95       	ror	r22
    2062:	57 95       	ror	r21
    2064:	47 95       	ror	r20
    2066:	37 95       	ror	r19
    2068:	27 95       	ror	r18
    206a:	ba 95       	dec	r27
    206c:	b9 f7       	brne	.-18     	; 0x205c <__fixunssfdi+0x46>
    206e:	0e f4       	brtc	.+2      	; 0x2072 <__fixunssfdi+0x5c>
    2070:	e4 d0       	rcall	.+456    	; 0x223a <__fp_negdi>
    2072:	88 94       	clc
    2074:	08 95       	ret
    2076:	88 94       	clc
    2078:	60 e0       	ldi	r22, 0x00	; 0
    207a:	70 e0       	ldi	r23, 0x00	; 0
    207c:	cb 01       	movw	r24, r22
    207e:	08 95       	ret

00002080 <__fixsfsi>:
    2080:	04 d0       	rcall	.+8      	; 0x208a <__fixunssfsi>
    2082:	68 94       	set
    2084:	b1 11       	cpse	r27, r1
    2086:	50 c1       	rjmp	.+672    	; 0x2328 <__fp_szero>
    2088:	08 95       	ret

0000208a <__fixunssfsi>:
    208a:	33 d1       	rcall	.+614    	; 0x22f2 <__fp_splitA>
    208c:	88 f0       	brcs	.+34     	; 0x20b0 <__fixunssfsi+0x26>
    208e:	9f 57       	subi	r25, 0x7F	; 127
    2090:	90 f0       	brcs	.+36     	; 0x20b6 <__fixunssfsi+0x2c>
    2092:	b9 2f       	mov	r27, r25
    2094:	99 27       	eor	r25, r25
    2096:	b7 51       	subi	r27, 0x17	; 23
    2098:	a0 f0       	brcs	.+40     	; 0x20c2 <__fixunssfsi+0x38>
    209a:	d1 f0       	breq	.+52     	; 0x20d0 <__fixunssfsi+0x46>
    209c:	66 0f       	add	r22, r22
    209e:	77 1f       	adc	r23, r23
    20a0:	88 1f       	adc	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	1a f0       	brmi	.+6      	; 0x20ac <__fixunssfsi+0x22>
    20a6:	ba 95       	dec	r27
    20a8:	c9 f7       	brne	.-14     	; 0x209c <__fixunssfsi+0x12>
    20aa:	12 c0       	rjmp	.+36     	; 0x20d0 <__fixunssfsi+0x46>
    20ac:	b1 30       	cpi	r27, 0x01	; 1
    20ae:	81 f0       	breq	.+32     	; 0x20d0 <__fixunssfsi+0x46>
    20b0:	3a d1       	rcall	.+628    	; 0x2326 <__fp_zero>
    20b2:	b1 e0       	ldi	r27, 0x01	; 1
    20b4:	08 95       	ret
    20b6:	37 c1       	rjmp	.+622    	; 0x2326 <__fp_zero>
    20b8:	67 2f       	mov	r22, r23
    20ba:	78 2f       	mov	r23, r24
    20bc:	88 27       	eor	r24, r24
    20be:	b8 5f       	subi	r27, 0xF8	; 248
    20c0:	39 f0       	breq	.+14     	; 0x20d0 <__fixunssfsi+0x46>
    20c2:	b9 3f       	cpi	r27, 0xF9	; 249
    20c4:	cc f3       	brlt	.-14     	; 0x20b8 <__fixunssfsi+0x2e>
    20c6:	86 95       	lsr	r24
    20c8:	77 95       	ror	r23
    20ca:	67 95       	ror	r22
    20cc:	b3 95       	inc	r27
    20ce:	d9 f7       	brne	.-10     	; 0x20c6 <__fixunssfsi+0x3c>
    20d0:	3e f4       	brtc	.+14     	; 0x20e0 <__fixunssfsi+0x56>
    20d2:	90 95       	com	r25
    20d4:	80 95       	com	r24
    20d6:	70 95       	com	r23
    20d8:	61 95       	neg	r22
    20da:	7f 4f       	sbci	r23, 0xFF	; 255
    20dc:	8f 4f       	sbci	r24, 0xFF	; 255
    20de:	9f 4f       	sbci	r25, 0xFF	; 255
    20e0:	08 95       	ret

000020e2 <__floatdisf>:
    20e2:	97 fb       	bst	r25, 7
    20e4:	0e f4       	brtc	.+2      	; 0x20e8 <__floatdisf+0x6>
    20e6:	a9 d0       	rcall	.+338    	; 0x223a <__fp_negdi>
    20e8:	3e c0       	rjmp	.+124    	; 0x2166 <__fp_di2sf>

000020ea <__floatunsisf>:
    20ea:	e8 94       	clt
    20ec:	09 c0       	rjmp	.+18     	; 0x2100 <__floatsisf+0x12>

000020ee <__floatsisf>:
    20ee:	97 fb       	bst	r25, 7
    20f0:	3e f4       	brtc	.+14     	; 0x2100 <__floatsisf+0x12>
    20f2:	90 95       	com	r25
    20f4:	80 95       	com	r24
    20f6:	70 95       	com	r23
    20f8:	61 95       	neg	r22
    20fa:	7f 4f       	sbci	r23, 0xFF	; 255
    20fc:	8f 4f       	sbci	r24, 0xFF	; 255
    20fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2100:	99 23       	and	r25, r25
    2102:	a9 f0       	breq	.+42     	; 0x212e <__floatsisf+0x40>
    2104:	f9 2f       	mov	r31, r25
    2106:	96 e9       	ldi	r25, 0x96	; 150
    2108:	bb 27       	eor	r27, r27
    210a:	93 95       	inc	r25
    210c:	f6 95       	lsr	r31
    210e:	87 95       	ror	r24
    2110:	77 95       	ror	r23
    2112:	67 95       	ror	r22
    2114:	b7 95       	ror	r27
    2116:	f1 11       	cpse	r31, r1
    2118:	f8 cf       	rjmp	.-16     	; 0x210a <__floatsisf+0x1c>
    211a:	fa f4       	brpl	.+62     	; 0x215a <__floatsisf+0x6c>
    211c:	bb 0f       	add	r27, r27
    211e:	11 f4       	brne	.+4      	; 0x2124 <__floatsisf+0x36>
    2120:	60 ff       	sbrs	r22, 0
    2122:	1b c0       	rjmp	.+54     	; 0x215a <__floatsisf+0x6c>
    2124:	6f 5f       	subi	r22, 0xFF	; 255
    2126:	7f 4f       	sbci	r23, 0xFF	; 255
    2128:	8f 4f       	sbci	r24, 0xFF	; 255
    212a:	9f 4f       	sbci	r25, 0xFF	; 255
    212c:	16 c0       	rjmp	.+44     	; 0x215a <__floatsisf+0x6c>
    212e:	88 23       	and	r24, r24
    2130:	11 f0       	breq	.+4      	; 0x2136 <__floatsisf+0x48>
    2132:	96 e9       	ldi	r25, 0x96	; 150
    2134:	11 c0       	rjmp	.+34     	; 0x2158 <__floatsisf+0x6a>
    2136:	77 23       	and	r23, r23
    2138:	21 f0       	breq	.+8      	; 0x2142 <__floatsisf+0x54>
    213a:	9e e8       	ldi	r25, 0x8E	; 142
    213c:	87 2f       	mov	r24, r23
    213e:	76 2f       	mov	r23, r22
    2140:	05 c0       	rjmp	.+10     	; 0x214c <__floatsisf+0x5e>
    2142:	66 23       	and	r22, r22
    2144:	71 f0       	breq	.+28     	; 0x2162 <__floatsisf+0x74>
    2146:	96 e8       	ldi	r25, 0x86	; 134
    2148:	86 2f       	mov	r24, r22
    214a:	70 e0       	ldi	r23, 0x00	; 0
    214c:	60 e0       	ldi	r22, 0x00	; 0
    214e:	2a f0       	brmi	.+10     	; 0x215a <__floatsisf+0x6c>
    2150:	9a 95       	dec	r25
    2152:	66 0f       	add	r22, r22
    2154:	77 1f       	adc	r23, r23
    2156:	88 1f       	adc	r24, r24
    2158:	da f7       	brpl	.-10     	; 0x2150 <__floatsisf+0x62>
    215a:	88 0f       	add	r24, r24
    215c:	96 95       	lsr	r25
    215e:	87 95       	ror	r24
    2160:	97 f9       	bld	r25, 7
    2162:	08 95       	ret

00002164 <__floatundisf>:
    2164:	e8 94       	clt

00002166 <__fp_di2sf>:
    2166:	f9 2f       	mov	r31, r25
    2168:	96 eb       	ldi	r25, 0xB6	; 182
    216a:	ff 23       	and	r31, r31
    216c:	81 f0       	breq	.+32     	; 0x218e <__fp_di2sf+0x28>
    216e:	12 16       	cp	r1, r18
    2170:	13 06       	cpc	r1, r19
    2172:	14 06       	cpc	r1, r20
    2174:	44 0b       	sbc	r20, r20
    2176:	93 95       	inc	r25
    2178:	f6 95       	lsr	r31
    217a:	87 95       	ror	r24
    217c:	77 95       	ror	r23
    217e:	67 95       	ror	r22
    2180:	57 95       	ror	r21
    2182:	40 40       	sbci	r20, 0x00	; 0
    2184:	ff 23       	and	r31, r31
    2186:	b9 f7       	brne	.-18     	; 0x2176 <__fp_di2sf+0x10>
    2188:	1b c0       	rjmp	.+54     	; 0x21c0 <__fp_di2sf+0x5a>
    218a:	99 27       	eor	r25, r25
    218c:	08 95       	ret
    218e:	88 23       	and	r24, r24
    2190:	51 f4       	brne	.+20     	; 0x21a6 <__fp_di2sf+0x40>
    2192:	98 50       	subi	r25, 0x08	; 8
    2194:	d2 f7       	brpl	.-12     	; 0x218a <__fp_di2sf+0x24>
    2196:	87 2b       	or	r24, r23
    2198:	76 2f       	mov	r23, r22
    219a:	65 2f       	mov	r22, r21
    219c:	54 2f       	mov	r21, r20
    219e:	43 2f       	mov	r20, r19
    21a0:	32 2f       	mov	r19, r18
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	b1 f3       	breq	.-20     	; 0x2192 <__fp_di2sf+0x2c>
    21a6:	12 16       	cp	r1, r18
    21a8:	13 06       	cpc	r1, r19
    21aa:	14 06       	cpc	r1, r20
    21ac:	44 0b       	sbc	r20, r20
    21ae:	88 23       	and	r24, r24
    21b0:	3a f0       	brmi	.+14     	; 0x21c0 <__fp_di2sf+0x5a>
    21b2:	9a 95       	dec	r25
    21b4:	44 0f       	add	r20, r20
    21b6:	55 1f       	adc	r21, r21
    21b8:	66 1f       	adc	r22, r22
    21ba:	77 1f       	adc	r23, r23
    21bc:	88 1f       	adc	r24, r24
    21be:	ca f7       	brpl	.-14     	; 0x21b2 <__fp_di2sf+0x4c>
    21c0:	55 23       	and	r21, r21
    21c2:	4a f4       	brpl	.+18     	; 0x21d6 <__fp_di2sf+0x70>
    21c4:	44 0f       	add	r20, r20
    21c6:	55 1f       	adc	r21, r21
    21c8:	11 f4       	brne	.+4      	; 0x21ce <__fp_di2sf+0x68>
    21ca:	60 ff       	sbrs	r22, 0
    21cc:	04 c0       	rjmp	.+8      	; 0x21d6 <__fp_di2sf+0x70>
    21ce:	6f 5f       	subi	r22, 0xFF	; 255
    21d0:	7f 4f       	sbci	r23, 0xFF	; 255
    21d2:	8f 4f       	sbci	r24, 0xFF	; 255
    21d4:	9f 4f       	sbci	r25, 0xFF	; 255
    21d6:	88 0f       	add	r24, r24
    21d8:	96 95       	lsr	r25
    21da:	87 95       	ror	r24
    21dc:	97 f9       	bld	r25, 7
    21de:	08 95       	ret

000021e0 <__fp_cmp>:
    21e0:	99 0f       	add	r25, r25
    21e2:	00 08       	sbc	r0, r0
    21e4:	55 0f       	add	r21, r21
    21e6:	aa 0b       	sbc	r26, r26
    21e8:	e0 e8       	ldi	r30, 0x80	; 128
    21ea:	fe ef       	ldi	r31, 0xFE	; 254
    21ec:	16 16       	cp	r1, r22
    21ee:	17 06       	cpc	r1, r23
    21f0:	e8 07       	cpc	r30, r24
    21f2:	f9 07       	cpc	r31, r25
    21f4:	c0 f0       	brcs	.+48     	; 0x2226 <__stack+0x27>
    21f6:	12 16       	cp	r1, r18
    21f8:	13 06       	cpc	r1, r19
    21fa:	e4 07       	cpc	r30, r20
    21fc:	f5 07       	cpc	r31, r21
    21fe:	98 f0       	brcs	.+38     	; 0x2226 <__stack+0x27>
    2200:	62 1b       	sub	r22, r18
    2202:	73 0b       	sbc	r23, r19
    2204:	84 0b       	sbc	r24, r20
    2206:	95 0b       	sbc	r25, r21
    2208:	39 f4       	brne	.+14     	; 0x2218 <__stack+0x19>
    220a:	0a 26       	eor	r0, r26
    220c:	61 f0       	breq	.+24     	; 0x2226 <__stack+0x27>
    220e:	23 2b       	or	r18, r19
    2210:	24 2b       	or	r18, r20
    2212:	25 2b       	or	r18, r21
    2214:	21 f4       	brne	.+8      	; 0x221e <__stack+0x1f>
    2216:	08 95       	ret
    2218:	0a 26       	eor	r0, r26
    221a:	09 f4       	brne	.+2      	; 0x221e <__stack+0x1f>
    221c:	a1 40       	sbci	r26, 0x01	; 1
    221e:	a6 95       	lsr	r26
    2220:	8f ef       	ldi	r24, 0xFF	; 255
    2222:	81 1d       	adc	r24, r1
    2224:	81 1d       	adc	r24, r1
    2226:	08 95       	ret

00002228 <__fp_inf>:
    2228:	97 f9       	bld	r25, 7
    222a:	9f 67       	ori	r25, 0x7F	; 127
    222c:	80 e8       	ldi	r24, 0x80	; 128
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	60 e0       	ldi	r22, 0x00	; 0
    2232:	08 95       	ret

00002234 <__fp_nan>:
    2234:	9f ef       	ldi	r25, 0xFF	; 255
    2236:	80 ec       	ldi	r24, 0xC0	; 192
    2238:	08 95       	ret

0000223a <__fp_negdi>:
    223a:	90 95       	com	r25
    223c:	80 95       	com	r24
    223e:	70 95       	com	r23
    2240:	60 95       	com	r22
    2242:	50 95       	com	r21
    2244:	40 95       	com	r20
    2246:	30 95       	com	r19
    2248:	21 95       	neg	r18
    224a:	3f 4f       	sbci	r19, 0xFF	; 255
    224c:	4f 4f       	sbci	r20, 0xFF	; 255
    224e:	5f 4f       	sbci	r21, 0xFF	; 255
    2250:	6f 4f       	sbci	r22, 0xFF	; 255
    2252:	7f 4f       	sbci	r23, 0xFF	; 255
    2254:	8f 4f       	sbci	r24, 0xFF	; 255
    2256:	9f 4f       	sbci	r25, 0xFF	; 255
    2258:	08 95       	ret

0000225a <__fp_powser>:
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	1f 93       	push	r17
    2260:	0f 93       	push	r16
    2262:	ff 92       	push	r15
    2264:	ef 92       	push	r14
    2266:	df 92       	push	r13
    2268:	7b 01       	movw	r14, r22
    226a:	8c 01       	movw	r16, r24
    226c:	68 94       	set
    226e:	05 c0       	rjmp	.+10     	; 0x227a <__fp_powser+0x20>
    2270:	da 2e       	mov	r13, r26
    2272:	ef 01       	movw	r28, r30
    2274:	b4 d0       	rcall	.+360    	; 0x23de <__mulsf3x>
    2276:	fe 01       	movw	r30, r28
    2278:	e8 94       	clt
    227a:	a5 91       	lpm	r26, Z+
    227c:	25 91       	lpm	r18, Z+
    227e:	35 91       	lpm	r19, Z+
    2280:	45 91       	lpm	r20, Z+
    2282:	55 91       	lpm	r21, Z+
    2284:	ae f3       	brts	.-22     	; 0x2270 <__fp_powser+0x16>
    2286:	ef 01       	movw	r28, r30
    2288:	02 de       	rcall	.-1020   	; 0x1e8e <__addsf3x>
    228a:	fe 01       	movw	r30, r28
    228c:	97 01       	movw	r18, r14
    228e:	a8 01       	movw	r20, r16
    2290:	da 94       	dec	r13
    2292:	79 f7       	brne	.-34     	; 0x2272 <__fp_powser+0x18>
    2294:	df 90       	pop	r13
    2296:	ef 90       	pop	r14
    2298:	ff 90       	pop	r15
    229a:	0f 91       	pop	r16
    229c:	1f 91       	pop	r17
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <__fp_pscA>:
    22a4:	00 24       	eor	r0, r0
    22a6:	0a 94       	dec	r0
    22a8:	16 16       	cp	r1, r22
    22aa:	17 06       	cpc	r1, r23
    22ac:	18 06       	cpc	r1, r24
    22ae:	09 06       	cpc	r0, r25
    22b0:	08 95       	ret

000022b2 <__fp_pscB>:
    22b2:	00 24       	eor	r0, r0
    22b4:	0a 94       	dec	r0
    22b6:	12 16       	cp	r1, r18
    22b8:	13 06       	cpc	r1, r19
    22ba:	14 06       	cpc	r1, r20
    22bc:	05 06       	cpc	r0, r21
    22be:	08 95       	ret

000022c0 <__fp_round>:
    22c0:	09 2e       	mov	r0, r25
    22c2:	03 94       	inc	r0
    22c4:	00 0c       	add	r0, r0
    22c6:	11 f4       	brne	.+4      	; 0x22cc <__fp_round+0xc>
    22c8:	88 23       	and	r24, r24
    22ca:	52 f0       	brmi	.+20     	; 0x22e0 <__fp_round+0x20>
    22cc:	bb 0f       	add	r27, r27
    22ce:	40 f4       	brcc	.+16     	; 0x22e0 <__fp_round+0x20>
    22d0:	bf 2b       	or	r27, r31
    22d2:	11 f4       	brne	.+4      	; 0x22d8 <__fp_round+0x18>
    22d4:	60 ff       	sbrs	r22, 0
    22d6:	04 c0       	rjmp	.+8      	; 0x22e0 <__fp_round+0x20>
    22d8:	6f 5f       	subi	r22, 0xFF	; 255
    22da:	7f 4f       	sbci	r23, 0xFF	; 255
    22dc:	8f 4f       	sbci	r24, 0xFF	; 255
    22de:	9f 4f       	sbci	r25, 0xFF	; 255
    22e0:	08 95       	ret

000022e2 <__fp_split3>:
    22e2:	57 fd       	sbrc	r21, 7
    22e4:	90 58       	subi	r25, 0x80	; 128
    22e6:	44 0f       	add	r20, r20
    22e8:	55 1f       	adc	r21, r21
    22ea:	59 f0       	breq	.+22     	; 0x2302 <__fp_splitA+0x10>
    22ec:	5f 3f       	cpi	r21, 0xFF	; 255
    22ee:	71 f0       	breq	.+28     	; 0x230c <__fp_splitA+0x1a>
    22f0:	47 95       	ror	r20

000022f2 <__fp_splitA>:
    22f2:	88 0f       	add	r24, r24
    22f4:	97 fb       	bst	r25, 7
    22f6:	99 1f       	adc	r25, r25
    22f8:	61 f0       	breq	.+24     	; 0x2312 <__fp_splitA+0x20>
    22fa:	9f 3f       	cpi	r25, 0xFF	; 255
    22fc:	79 f0       	breq	.+30     	; 0x231c <__fp_splitA+0x2a>
    22fe:	87 95       	ror	r24
    2300:	08 95       	ret
    2302:	12 16       	cp	r1, r18
    2304:	13 06       	cpc	r1, r19
    2306:	14 06       	cpc	r1, r20
    2308:	55 1f       	adc	r21, r21
    230a:	f2 cf       	rjmp	.-28     	; 0x22f0 <__fp_split3+0xe>
    230c:	46 95       	lsr	r20
    230e:	f1 df       	rcall	.-30     	; 0x22f2 <__fp_splitA>
    2310:	08 c0       	rjmp	.+16     	; 0x2322 <__fp_splitA+0x30>
    2312:	16 16       	cp	r1, r22
    2314:	17 06       	cpc	r1, r23
    2316:	18 06       	cpc	r1, r24
    2318:	99 1f       	adc	r25, r25
    231a:	f1 cf       	rjmp	.-30     	; 0x22fe <__fp_splitA+0xc>
    231c:	86 95       	lsr	r24
    231e:	71 05       	cpc	r23, r1
    2320:	61 05       	cpc	r22, r1
    2322:	08 94       	sec
    2324:	08 95       	ret

00002326 <__fp_zero>:
    2326:	e8 94       	clt

00002328 <__fp_szero>:
    2328:	bb 27       	eor	r27, r27
    232a:	66 27       	eor	r22, r22
    232c:	77 27       	eor	r23, r23
    232e:	cb 01       	movw	r24, r22
    2330:	97 f9       	bld	r25, 7
    2332:	08 95       	ret

00002334 <__gesf2>:
    2334:	55 df       	rcall	.-342    	; 0x21e0 <__fp_cmp>
    2336:	08 f4       	brcc	.+2      	; 0x233a <__gesf2+0x6>
    2338:	8f ef       	ldi	r24, 0xFF	; 255
    233a:	08 95       	ret
    233c:	0e f0       	brts	.+2      	; 0x2340 <__gesf2+0xc>
    233e:	e1 c0       	rjmp	.+450    	; 0x2502 <__fp_mpack>
    2340:	79 cf       	rjmp	.-270    	; 0x2234 <__fp_nan>
    2342:	68 94       	set
    2344:	71 cf       	rjmp	.-286    	; 0x2228 <__fp_inf>

00002346 <log>:
    2346:	d5 df       	rcall	.-86     	; 0x22f2 <__fp_splitA>
    2348:	c8 f3       	brcs	.-14     	; 0x233c <__gesf2+0x8>
    234a:	99 23       	and	r25, r25
    234c:	d1 f3       	breq	.-12     	; 0x2342 <__gesf2+0xe>
    234e:	c6 f3       	brts	.-16     	; 0x2340 <__gesf2+0xc>
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	1f 93       	push	r17
    2356:	0f 93       	push	r16
    2358:	ff 92       	push	r15
    235a:	c9 2f       	mov	r28, r25
    235c:	dd 27       	eor	r29, r29
    235e:	88 23       	and	r24, r24
    2360:	2a f0       	brmi	.+10     	; 0x236c <log+0x26>
    2362:	21 97       	sbiw	r28, 0x01	; 1
    2364:	66 0f       	add	r22, r22
    2366:	77 1f       	adc	r23, r23
    2368:	88 1f       	adc	r24, r24
    236a:	da f7       	brpl	.-10     	; 0x2362 <log+0x1c>
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	40 e8       	ldi	r20, 0x80	; 128
    2372:	5f eb       	ldi	r21, 0xBF	; 191
    2374:	9f e3       	ldi	r25, 0x3F	; 63
    2376:	88 39       	cpi	r24, 0x98	; 152
    2378:	20 f0       	brcs	.+8      	; 0x2382 <log+0x3c>
    237a:	80 3e       	cpi	r24, 0xE0	; 224
    237c:	30 f0       	brcs	.+12     	; 0x238a <log+0x44>
    237e:	21 96       	adiw	r28, 0x01	; 1
    2380:	8f 77       	andi	r24, 0x7F	; 127
    2382:	74 dd       	rcall	.-1304   	; 0x1e6c <__addsf3>
    2384:	ec ec       	ldi	r30, 0xCC	; 204
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	03 c0       	rjmp	.+6      	; 0x2390 <log+0x4a>
    238a:	70 dd       	rcall	.-1312   	; 0x1e6c <__addsf3>
    238c:	e9 ef       	ldi	r30, 0xF9	; 249
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	64 df       	rcall	.-312    	; 0x225a <__fp_powser>
    2392:	8b 01       	movw	r16, r22
    2394:	be 01       	movw	r22, r28
    2396:	ec 01       	movw	r28, r24
    2398:	fb 2e       	mov	r15, r27
    239a:	6f 57       	subi	r22, 0x7F	; 127
    239c:	71 09       	sbc	r23, r1
    239e:	75 95       	asr	r23
    23a0:	77 1f       	adc	r23, r23
    23a2:	88 0b       	sbc	r24, r24
    23a4:	99 0b       	sbc	r25, r25
    23a6:	a3 de       	rcall	.-698    	; 0x20ee <__floatsisf>
    23a8:	28 e1       	ldi	r18, 0x18	; 24
    23aa:	32 e7       	ldi	r19, 0x72	; 114
    23ac:	41 e3       	ldi	r20, 0x31	; 49
    23ae:	5f e3       	ldi	r21, 0x3F	; 63
    23b0:	16 d0       	rcall	.+44     	; 0x23de <__mulsf3x>
    23b2:	af 2d       	mov	r26, r15
    23b4:	98 01       	movw	r18, r16
    23b6:	ae 01       	movw	r20, r28
    23b8:	ff 90       	pop	r15
    23ba:	0f 91       	pop	r16
    23bc:	1f 91       	pop	r17
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	65 dd       	rcall	.-1334   	; 0x1e8e <__addsf3x>
    23c4:	7d cf       	rjmp	.-262    	; 0x22c0 <__fp_round>

000023c6 <__mulsf3>:
    23c6:	0b d0       	rcall	.+22     	; 0x23de <__mulsf3x>
    23c8:	7b cf       	rjmp	.-266    	; 0x22c0 <__fp_round>
    23ca:	6c df       	rcall	.-296    	; 0x22a4 <__fp_pscA>
    23cc:	28 f0       	brcs	.+10     	; 0x23d8 <__mulsf3+0x12>
    23ce:	71 df       	rcall	.-286    	; 0x22b2 <__fp_pscB>
    23d0:	18 f0       	brcs	.+6      	; 0x23d8 <__mulsf3+0x12>
    23d2:	95 23       	and	r25, r21
    23d4:	09 f0       	breq	.+2      	; 0x23d8 <__mulsf3+0x12>
    23d6:	28 cf       	rjmp	.-432    	; 0x2228 <__fp_inf>
    23d8:	2d cf       	rjmp	.-422    	; 0x2234 <__fp_nan>
    23da:	11 24       	eor	r1, r1
    23dc:	a5 cf       	rjmp	.-182    	; 0x2328 <__fp_szero>

000023de <__mulsf3x>:
    23de:	81 df       	rcall	.-254    	; 0x22e2 <__fp_split3>
    23e0:	a0 f3       	brcs	.-24     	; 0x23ca <__mulsf3+0x4>

000023e2 <__mulsf3_pse>:
    23e2:	95 9f       	mul	r25, r21
    23e4:	d1 f3       	breq	.-12     	; 0x23da <__mulsf3+0x14>
    23e6:	95 0f       	add	r25, r21
    23e8:	50 e0       	ldi	r21, 0x00	; 0
    23ea:	55 1f       	adc	r21, r21
    23ec:	62 9f       	mul	r22, r18
    23ee:	f0 01       	movw	r30, r0
    23f0:	72 9f       	mul	r23, r18
    23f2:	bb 27       	eor	r27, r27
    23f4:	f0 0d       	add	r31, r0
    23f6:	b1 1d       	adc	r27, r1
    23f8:	63 9f       	mul	r22, r19
    23fa:	aa 27       	eor	r26, r26
    23fc:	f0 0d       	add	r31, r0
    23fe:	b1 1d       	adc	r27, r1
    2400:	aa 1f       	adc	r26, r26
    2402:	64 9f       	mul	r22, r20
    2404:	66 27       	eor	r22, r22
    2406:	b0 0d       	add	r27, r0
    2408:	a1 1d       	adc	r26, r1
    240a:	66 1f       	adc	r22, r22
    240c:	82 9f       	mul	r24, r18
    240e:	22 27       	eor	r18, r18
    2410:	b0 0d       	add	r27, r0
    2412:	a1 1d       	adc	r26, r1
    2414:	62 1f       	adc	r22, r18
    2416:	73 9f       	mul	r23, r19
    2418:	b0 0d       	add	r27, r0
    241a:	a1 1d       	adc	r26, r1
    241c:	62 1f       	adc	r22, r18
    241e:	83 9f       	mul	r24, r19
    2420:	a0 0d       	add	r26, r0
    2422:	61 1d       	adc	r22, r1
    2424:	22 1f       	adc	r18, r18
    2426:	74 9f       	mul	r23, r20
    2428:	33 27       	eor	r19, r19
    242a:	a0 0d       	add	r26, r0
    242c:	61 1d       	adc	r22, r1
    242e:	23 1f       	adc	r18, r19
    2430:	84 9f       	mul	r24, r20
    2432:	60 0d       	add	r22, r0
    2434:	21 1d       	adc	r18, r1
    2436:	82 2f       	mov	r24, r18
    2438:	76 2f       	mov	r23, r22
    243a:	6a 2f       	mov	r22, r26
    243c:	11 24       	eor	r1, r1
    243e:	9f 57       	subi	r25, 0x7F	; 127
    2440:	50 40       	sbci	r21, 0x00	; 0
    2442:	8a f0       	brmi	.+34     	; 0x2466 <__mulsf3_pse+0x84>
    2444:	e1 f0       	breq	.+56     	; 0x247e <__mulsf3_pse+0x9c>
    2446:	88 23       	and	r24, r24
    2448:	4a f0       	brmi	.+18     	; 0x245c <__mulsf3_pse+0x7a>
    244a:	ee 0f       	add	r30, r30
    244c:	ff 1f       	adc	r31, r31
    244e:	bb 1f       	adc	r27, r27
    2450:	66 1f       	adc	r22, r22
    2452:	77 1f       	adc	r23, r23
    2454:	88 1f       	adc	r24, r24
    2456:	91 50       	subi	r25, 0x01	; 1
    2458:	50 40       	sbci	r21, 0x00	; 0
    245a:	a9 f7       	brne	.-22     	; 0x2446 <__mulsf3_pse+0x64>
    245c:	9e 3f       	cpi	r25, 0xFE	; 254
    245e:	51 05       	cpc	r21, r1
    2460:	70 f0       	brcs	.+28     	; 0x247e <__mulsf3_pse+0x9c>
    2462:	e2 ce       	rjmp	.-572    	; 0x2228 <__fp_inf>
    2464:	61 cf       	rjmp	.-318    	; 0x2328 <__fp_szero>
    2466:	5f 3f       	cpi	r21, 0xFF	; 255
    2468:	ec f3       	brlt	.-6      	; 0x2464 <__mulsf3_pse+0x82>
    246a:	98 3e       	cpi	r25, 0xE8	; 232
    246c:	dc f3       	brlt	.-10     	; 0x2464 <__mulsf3_pse+0x82>
    246e:	86 95       	lsr	r24
    2470:	77 95       	ror	r23
    2472:	67 95       	ror	r22
    2474:	b7 95       	ror	r27
    2476:	f7 95       	ror	r31
    2478:	e7 95       	ror	r30
    247a:	9f 5f       	subi	r25, 0xFF	; 255
    247c:	c1 f7       	brne	.-16     	; 0x246e <__mulsf3_pse+0x8c>
    247e:	fe 2b       	or	r31, r30
    2480:	88 0f       	add	r24, r24
    2482:	91 1d       	adc	r25, r1
    2484:	96 95       	lsr	r25
    2486:	87 95       	ror	r24
    2488:	97 f9       	bld	r25, 7
    248a:	08 95       	ret

0000248c <round>:
    248c:	32 df       	rcall	.-412    	; 0x22f2 <__fp_splitA>
    248e:	e0 f0       	brcs	.+56     	; 0x24c8 <round+0x3c>
    2490:	9e 37       	cpi	r25, 0x7E	; 126
    2492:	d8 f0       	brcs	.+54     	; 0x24ca <round+0x3e>
    2494:	96 39       	cpi	r25, 0x96	; 150
    2496:	b8 f4       	brcc	.+46     	; 0x24c6 <round+0x3a>
    2498:	9e 38       	cpi	r25, 0x8E	; 142
    249a:	48 f4       	brcc	.+18     	; 0x24ae <round+0x22>
    249c:	67 2f       	mov	r22, r23
    249e:	78 2f       	mov	r23, r24
    24a0:	88 27       	eor	r24, r24
    24a2:	98 5f       	subi	r25, 0xF8	; 248
    24a4:	f9 cf       	rjmp	.-14     	; 0x2498 <round+0xc>
    24a6:	86 95       	lsr	r24
    24a8:	77 95       	ror	r23
    24aa:	67 95       	ror	r22
    24ac:	93 95       	inc	r25
    24ae:	95 39       	cpi	r25, 0x95	; 149
    24b0:	d0 f3       	brcs	.-12     	; 0x24a6 <round+0x1a>
    24b2:	b6 2f       	mov	r27, r22
    24b4:	b1 70       	andi	r27, 0x01	; 1
    24b6:	6b 0f       	add	r22, r27
    24b8:	71 1d       	adc	r23, r1
    24ba:	81 1d       	adc	r24, r1
    24bc:	20 f4       	brcc	.+8      	; 0x24c6 <round+0x3a>
    24be:	87 95       	ror	r24
    24c0:	77 95       	ror	r23
    24c2:	67 95       	ror	r22
    24c4:	93 95       	inc	r25
    24c6:	02 c0       	rjmp	.+4      	; 0x24cc <__fp_mintl>
    24c8:	1c c0       	rjmp	.+56     	; 0x2502 <__fp_mpack>
    24ca:	2e cf       	rjmp	.-420    	; 0x2328 <__fp_szero>

000024cc <__fp_mintl>:
    24cc:	88 23       	and	r24, r24
    24ce:	71 f4       	brne	.+28     	; 0x24ec <__fp_mintl+0x20>
    24d0:	77 23       	and	r23, r23
    24d2:	21 f0       	breq	.+8      	; 0x24dc <__fp_mintl+0x10>
    24d4:	98 50       	subi	r25, 0x08	; 8
    24d6:	87 2b       	or	r24, r23
    24d8:	76 2f       	mov	r23, r22
    24da:	07 c0       	rjmp	.+14     	; 0x24ea <__fp_mintl+0x1e>
    24dc:	66 23       	and	r22, r22
    24de:	11 f4       	brne	.+4      	; 0x24e4 <__fp_mintl+0x18>
    24e0:	99 27       	eor	r25, r25
    24e2:	0d c0       	rjmp	.+26     	; 0x24fe <__fp_mintl+0x32>
    24e4:	90 51       	subi	r25, 0x10	; 16
    24e6:	86 2b       	or	r24, r22
    24e8:	70 e0       	ldi	r23, 0x00	; 0
    24ea:	60 e0       	ldi	r22, 0x00	; 0
    24ec:	2a f0       	brmi	.+10     	; 0x24f8 <__fp_mintl+0x2c>
    24ee:	9a 95       	dec	r25
    24f0:	66 0f       	add	r22, r22
    24f2:	77 1f       	adc	r23, r23
    24f4:	88 1f       	adc	r24, r24
    24f6:	da f7       	brpl	.-10     	; 0x24ee <__fp_mintl+0x22>
    24f8:	88 0f       	add	r24, r24
    24fa:	96 95       	lsr	r25
    24fc:	87 95       	ror	r24
    24fe:	97 f9       	bld	r25, 7
    2500:	08 95       	ret

00002502 <__fp_mpack>:
    2502:	9f 3f       	cpi	r25, 0xFF	; 255
    2504:	31 f0       	breq	.+12     	; 0x2512 <__fp_mpack_finite+0xc>

00002506 <__fp_mpack_finite>:
    2506:	91 50       	subi	r25, 0x01	; 1
    2508:	20 f4       	brcc	.+8      	; 0x2512 <__fp_mpack_finite+0xc>
    250a:	87 95       	ror	r24
    250c:	77 95       	ror	r23
    250e:	67 95       	ror	r22
    2510:	b7 95       	ror	r27
    2512:	88 0f       	add	r24, r24
    2514:	91 1d       	adc	r25, r1
    2516:	96 95       	lsr	r25
    2518:	87 95       	ror	r24
    251a:	97 f9       	bld	r25, 7
    251c:	08 95       	ret

0000251e <__udivmodsi4>:
    251e:	a1 e2       	ldi	r26, 0x21	; 33
    2520:	1a 2e       	mov	r1, r26
    2522:	aa 1b       	sub	r26, r26
    2524:	bb 1b       	sub	r27, r27
    2526:	fd 01       	movw	r30, r26
    2528:	0d c0       	rjmp	.+26     	; 0x2544 <__udivmodsi4_ep>

0000252a <__udivmodsi4_loop>:
    252a:	aa 1f       	adc	r26, r26
    252c:	bb 1f       	adc	r27, r27
    252e:	ee 1f       	adc	r30, r30
    2530:	ff 1f       	adc	r31, r31
    2532:	a2 17       	cp	r26, r18
    2534:	b3 07       	cpc	r27, r19
    2536:	e4 07       	cpc	r30, r20
    2538:	f5 07       	cpc	r31, r21
    253a:	20 f0       	brcs	.+8      	; 0x2544 <__udivmodsi4_ep>
    253c:	a2 1b       	sub	r26, r18
    253e:	b3 0b       	sbc	r27, r19
    2540:	e4 0b       	sbc	r30, r20
    2542:	f5 0b       	sbc	r31, r21

00002544 <__udivmodsi4_ep>:
    2544:	66 1f       	adc	r22, r22
    2546:	77 1f       	adc	r23, r23
    2548:	88 1f       	adc	r24, r24
    254a:	99 1f       	adc	r25, r25
    254c:	1a 94       	dec	r1
    254e:	69 f7       	brne	.-38     	; 0x252a <__udivmodsi4_loop>
    2550:	60 95       	com	r22
    2552:	70 95       	com	r23
    2554:	80 95       	com	r24
    2556:	90 95       	com	r25
    2558:	9b 01       	movw	r18, r22
    255a:	ac 01       	movw	r20, r24
    255c:	bd 01       	movw	r22, r26
    255e:	cf 01       	movw	r24, r30
    2560:	08 95       	ret

00002562 <__muluhisi3>:
    2562:	5a d0       	rcall	.+180    	; 0x2618 <__umulhisi3>
    2564:	a5 9f       	mul	r26, r21
    2566:	90 0d       	add	r25, r0
    2568:	b4 9f       	mul	r27, r20
    256a:	90 0d       	add	r25, r0
    256c:	a4 9f       	mul	r26, r20
    256e:	80 0d       	add	r24, r0
    2570:	91 1d       	adc	r25, r1
    2572:	11 24       	eor	r1, r1
    2574:	08 95       	ret

00002576 <__muldi3>:
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	1f 93       	push	r17
    257c:	0f 93       	push	r16
    257e:	9a 9d       	mul	r25, r10
    2580:	f0 2d       	mov	r31, r0
    2582:	21 9f       	mul	r18, r17
    2584:	f0 0d       	add	r31, r0
    2586:	8b 9d       	mul	r24, r11
    2588:	f0 0d       	add	r31, r0
    258a:	8a 9d       	mul	r24, r10
    258c:	e0 2d       	mov	r30, r0
    258e:	f1 0d       	add	r31, r1
    2590:	03 9f       	mul	r16, r19
    2592:	f0 0d       	add	r31, r0
    2594:	02 9f       	mul	r16, r18
    2596:	e0 0d       	add	r30, r0
    2598:	f1 1d       	adc	r31, r1
    259a:	4e 9d       	mul	r20, r14
    259c:	e0 0d       	add	r30, r0
    259e:	f1 1d       	adc	r31, r1
    25a0:	5e 9d       	mul	r21, r14
    25a2:	f0 0d       	add	r31, r0
    25a4:	4f 9d       	mul	r20, r15
    25a6:	f0 0d       	add	r31, r0
    25a8:	7f 93       	push	r23
    25aa:	6f 93       	push	r22
    25ac:	bf 92       	push	r11
    25ae:	af 92       	push	r10
    25b0:	5f 93       	push	r21
    25b2:	4f 93       	push	r20
    25b4:	d5 01       	movw	r26, r10
    25b6:	30 d0       	rcall	.+96     	; 0x2618 <__umulhisi3>
    25b8:	8b 01       	movw	r16, r22
    25ba:	ac 01       	movw	r20, r24
    25bc:	d7 01       	movw	r26, r14
    25be:	2c d0       	rcall	.+88     	; 0x2618 <__umulhisi3>
    25c0:	eb 01       	movw	r28, r22
    25c2:	e8 0f       	add	r30, r24
    25c4:	f9 1f       	adc	r31, r25
    25c6:	d6 01       	movw	r26, r12
    25c8:	1f d0       	rcall	.+62     	; 0x2608 <__muldi3_6>
    25ca:	2f 91       	pop	r18
    25cc:	3f 91       	pop	r19
    25ce:	d6 01       	movw	r26, r12
    25d0:	23 d0       	rcall	.+70     	; 0x2618 <__umulhisi3>
    25d2:	c6 0f       	add	r28, r22
    25d4:	d7 1f       	adc	r29, r23
    25d6:	e8 1f       	adc	r30, r24
    25d8:	f9 1f       	adc	r31, r25
    25da:	af 91       	pop	r26
    25dc:	bf 91       	pop	r27
    25de:	14 d0       	rcall	.+40     	; 0x2608 <__muldi3_6>
    25e0:	2f 91       	pop	r18
    25e2:	3f 91       	pop	r19
    25e4:	19 d0       	rcall	.+50     	; 0x2618 <__umulhisi3>
    25e6:	c6 0f       	add	r28, r22
    25e8:	d7 1f       	adc	r29, r23
    25ea:	e8 1f       	adc	r30, r24
    25ec:	f9 1f       	adc	r31, r25
    25ee:	d6 01       	movw	r26, r12
    25f0:	13 d0       	rcall	.+38     	; 0x2618 <__umulhisi3>
    25f2:	e6 0f       	add	r30, r22
    25f4:	f7 1f       	adc	r31, r23
    25f6:	98 01       	movw	r18, r16
    25f8:	be 01       	movw	r22, r28
    25fa:	cf 01       	movw	r24, r30
    25fc:	11 24       	eor	r1, r1
    25fe:	0f 91       	pop	r16
    2600:	1f 91       	pop	r17
    2602:	cf 91       	pop	r28
    2604:	df 91       	pop	r29
    2606:	08 95       	ret

00002608 <__muldi3_6>:
    2608:	07 d0       	rcall	.+14     	; 0x2618 <__umulhisi3>
    260a:	46 0f       	add	r20, r22
    260c:	57 1f       	adc	r21, r23
    260e:	c8 1f       	adc	r28, r24
    2610:	d9 1f       	adc	r29, r25
    2612:	08 f4       	brcc	.+2      	; 0x2616 <__muldi3_6+0xe>
    2614:	31 96       	adiw	r30, 0x01	; 1
    2616:	08 95       	ret

00002618 <__umulhisi3>:
    2618:	a2 9f       	mul	r26, r18
    261a:	b0 01       	movw	r22, r0
    261c:	b3 9f       	mul	r27, r19
    261e:	c0 01       	movw	r24, r0
    2620:	a3 9f       	mul	r26, r19
    2622:	70 0d       	add	r23, r0
    2624:	81 1d       	adc	r24, r1
    2626:	11 24       	eor	r1, r1
    2628:	91 1d       	adc	r25, r1
    262a:	b2 9f       	mul	r27, r18
    262c:	70 0d       	add	r23, r0
    262e:	81 1d       	adc	r24, r1
    2630:	11 24       	eor	r1, r1
    2632:	91 1d       	adc	r25, r1
    2634:	08 95       	ret

00002636 <atof>:
    2636:	66 27       	eor	r22, r22
    2638:	77 27       	eor	r23, r23
    263a:	4d c2       	rjmp	.+1178   	; 0x2ad6 <strtod>

0000263c <memcpy>:
    263c:	fb 01       	movw	r30, r22
    263e:	dc 01       	movw	r26, r24
    2640:	02 c0       	rjmp	.+4      	; 0x2646 <memcpy+0xa>
    2642:	01 90       	ld	r0, Z+
    2644:	0d 92       	st	X+, r0
    2646:	41 50       	subi	r20, 0x01	; 1
    2648:	50 40       	sbci	r21, 0x00	; 0
    264a:	d8 f7       	brcc	.-10     	; 0x2642 <memcpy+0x6>
    264c:	08 95       	ret

0000264e <strncpy>:
    264e:	fb 01       	movw	r30, r22
    2650:	dc 01       	movw	r26, r24
    2652:	41 50       	subi	r20, 0x01	; 1
    2654:	50 40       	sbci	r21, 0x00	; 0
    2656:	48 f0       	brcs	.+18     	; 0x266a <strncpy+0x1c>
    2658:	01 90       	ld	r0, Z+
    265a:	0d 92       	st	X+, r0
    265c:	00 20       	and	r0, r0
    265e:	c9 f7       	brne	.-14     	; 0x2652 <strncpy+0x4>
    2660:	01 c0       	rjmp	.+2      	; 0x2664 <strncpy+0x16>
    2662:	1d 92       	st	X+, r1
    2664:	41 50       	subi	r20, 0x01	; 1
    2666:	50 40       	sbci	r21, 0x00	; 0
    2668:	e0 f7       	brcc	.-8      	; 0x2662 <strncpy+0x14>
    266a:	08 95       	ret

0000266c <strsep>:
    266c:	fc 01       	movw	r30, r24
    266e:	a0 81       	ld	r26, Z
    2670:	b1 81       	ldd	r27, Z+1	; 0x01
    2672:	ad 01       	movw	r20, r26
    2674:	10 96       	adiw	r26, 0x00	; 0
    2676:	81 f0       	breq	.+32     	; 0x2698 <strsep+0x2c>
    2678:	3d 91       	ld	r19, X+
    267a:	fb 01       	movw	r30, r22
    267c:	01 90       	ld	r0, Z+
    267e:	03 16       	cp	r0, r19
    2680:	01 10       	cpse	r0, r1
    2682:	e1 f7       	brne	.-8      	; 0x267c <strsep+0x10>
    2684:	c9 f7       	brne	.-14     	; 0x2678 <strsep+0xc>
    2686:	00 20       	and	r0, r0
    2688:	11 f4       	brne	.+4      	; 0x268e <strsep+0x22>
    268a:	d0 01       	movw	r26, r0
    268c:	02 c0       	rjmp	.+4      	; 0x2692 <strsep+0x26>
    268e:	1e 92       	st	-X, r1
    2690:	11 96       	adiw	r26, 0x01	; 1
    2692:	fc 01       	movw	r30, r24
    2694:	a0 83       	st	Z, r26
    2696:	b1 83       	std	Z+1, r27	; 0x01
    2698:	ca 01       	movw	r24, r20
    269a:	08 95       	ret

0000269c <sprintf>:
    269c:	0f 93       	push	r16
    269e:	1f 93       	push	r17
    26a0:	cf 93       	push	r28
    26a2:	df 93       	push	r29
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
    26a8:	2e 97       	sbiw	r28, 0x0e	; 14
    26aa:	0f b6       	in	r0, 0x3f	; 63
    26ac:	f8 94       	cli
    26ae:	de bf       	out	0x3e, r29	; 62
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	cd bf       	out	0x3d, r28	; 61
    26b4:	0e 89       	ldd	r16, Y+22	; 0x16
    26b6:	1f 89       	ldd	r17, Y+23	; 0x17
    26b8:	86 e0       	ldi	r24, 0x06	; 6
    26ba:	8c 83       	std	Y+4, r24	; 0x04
    26bc:	1a 83       	std	Y+2, r17	; 0x02
    26be:	09 83       	std	Y+1, r16	; 0x01
    26c0:	8f ef       	ldi	r24, 0xFF	; 255
    26c2:	9f e7       	ldi	r25, 0x7F	; 127
    26c4:	9e 83       	std	Y+6, r25	; 0x06
    26c6:	8d 83       	std	Y+5, r24	; 0x05
    26c8:	ae 01       	movw	r20, r28
    26ca:	46 5e       	subi	r20, 0xE6	; 230
    26cc:	5f 4f       	sbci	r21, 0xFF	; 255
    26ce:	68 8d       	ldd	r22, Y+24	; 0x18
    26d0:	79 8d       	ldd	r23, Y+25	; 0x19
    26d2:	ce 01       	movw	r24, r28
    26d4:	01 96       	adiw	r24, 0x01	; 1
    26d6:	11 d0       	rcall	.+34     	; 0x26fa <vfprintf>
    26d8:	2f 81       	ldd	r18, Y+7	; 0x07
    26da:	38 85       	ldd	r19, Y+8	; 0x08
    26dc:	f8 01       	movw	r30, r16
    26de:	e2 0f       	add	r30, r18
    26e0:	f3 1f       	adc	r31, r19
    26e2:	10 82       	st	Z, r1
    26e4:	2e 96       	adiw	r28, 0x0e	; 14
    26e6:	0f b6       	in	r0, 0x3f	; 63
    26e8:	f8 94       	cli
    26ea:	de bf       	out	0x3e, r29	; 62
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	cd bf       	out	0x3d, r28	; 61
    26f0:	df 91       	pop	r29
    26f2:	cf 91       	pop	r28
    26f4:	1f 91       	pop	r17
    26f6:	0f 91       	pop	r16
    26f8:	08 95       	ret

000026fa <vfprintf>:
    26fa:	2f 92       	push	r2
    26fc:	3f 92       	push	r3
    26fe:	4f 92       	push	r4
    2700:	5f 92       	push	r5
    2702:	6f 92       	push	r6
    2704:	7f 92       	push	r7
    2706:	8f 92       	push	r8
    2708:	9f 92       	push	r9
    270a:	af 92       	push	r10
    270c:	bf 92       	push	r11
    270e:	cf 92       	push	r12
    2710:	df 92       	push	r13
    2712:	ef 92       	push	r14
    2714:	ff 92       	push	r15
    2716:	0f 93       	push	r16
    2718:	1f 93       	push	r17
    271a:	cf 93       	push	r28
    271c:	df 93       	push	r29
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
    2722:	2c 97       	sbiw	r28, 0x0c	; 12
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	de bf       	out	0x3e, r29	; 62
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	cd bf       	out	0x3d, r28	; 61
    272e:	7c 01       	movw	r14, r24
    2730:	6b 01       	movw	r12, r22
    2732:	8a 01       	movw	r16, r20
    2734:	fc 01       	movw	r30, r24
    2736:	17 82       	std	Z+7, r1	; 0x07
    2738:	16 82       	std	Z+6, r1	; 0x06
    273a:	83 81       	ldd	r24, Z+3	; 0x03
    273c:	81 ff       	sbrs	r24, 1
    273e:	b0 c1       	rjmp	.+864    	; 0x2aa0 <vfprintf+0x3a6>
    2740:	ce 01       	movw	r24, r28
    2742:	01 96       	adiw	r24, 0x01	; 1
    2744:	4c 01       	movw	r8, r24
    2746:	f7 01       	movw	r30, r14
    2748:	93 81       	ldd	r25, Z+3	; 0x03
    274a:	f6 01       	movw	r30, r12
    274c:	93 fd       	sbrc	r25, 3
    274e:	85 91       	lpm	r24, Z+
    2750:	93 ff       	sbrs	r25, 3
    2752:	81 91       	ld	r24, Z+
    2754:	6f 01       	movw	r12, r30
    2756:	88 23       	and	r24, r24
    2758:	09 f4       	brne	.+2      	; 0x275c <vfprintf+0x62>
    275a:	9e c1       	rjmp	.+828    	; 0x2a98 <vfprintf+0x39e>
    275c:	85 32       	cpi	r24, 0x25	; 37
    275e:	39 f4       	brne	.+14     	; 0x276e <vfprintf+0x74>
    2760:	93 fd       	sbrc	r25, 3
    2762:	85 91       	lpm	r24, Z+
    2764:	93 ff       	sbrs	r25, 3
    2766:	81 91       	ld	r24, Z+
    2768:	6f 01       	movw	r12, r30
    276a:	85 32       	cpi	r24, 0x25	; 37
    276c:	21 f4       	brne	.+8      	; 0x2776 <vfprintf+0x7c>
    276e:	b7 01       	movw	r22, r14
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	4d d3       	rcall	.+1690   	; 0x2e0e <fputc>
    2774:	e8 cf       	rjmp	.-48     	; 0x2746 <vfprintf+0x4c>
    2776:	51 2c       	mov	r5, r1
    2778:	31 2c       	mov	r3, r1
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	20 32       	cpi	r18, 0x20	; 32
    277e:	a0 f4       	brcc	.+40     	; 0x27a8 <vfprintf+0xae>
    2780:	8b 32       	cpi	r24, 0x2B	; 43
    2782:	69 f0       	breq	.+26     	; 0x279e <vfprintf+0xa4>
    2784:	30 f4       	brcc	.+12     	; 0x2792 <vfprintf+0x98>
    2786:	80 32       	cpi	r24, 0x20	; 32
    2788:	59 f0       	breq	.+22     	; 0x27a0 <vfprintf+0xa6>
    278a:	83 32       	cpi	r24, 0x23	; 35
    278c:	69 f4       	brne	.+26     	; 0x27a8 <vfprintf+0xae>
    278e:	20 61       	ori	r18, 0x10	; 16
    2790:	2c c0       	rjmp	.+88     	; 0x27ea <vfprintf+0xf0>
    2792:	8d 32       	cpi	r24, 0x2D	; 45
    2794:	39 f0       	breq	.+14     	; 0x27a4 <vfprintf+0xaa>
    2796:	80 33       	cpi	r24, 0x30	; 48
    2798:	39 f4       	brne	.+14     	; 0x27a8 <vfprintf+0xae>
    279a:	21 60       	ori	r18, 0x01	; 1
    279c:	26 c0       	rjmp	.+76     	; 0x27ea <vfprintf+0xf0>
    279e:	22 60       	ori	r18, 0x02	; 2
    27a0:	24 60       	ori	r18, 0x04	; 4
    27a2:	23 c0       	rjmp	.+70     	; 0x27ea <vfprintf+0xf0>
    27a4:	28 60       	ori	r18, 0x08	; 8
    27a6:	21 c0       	rjmp	.+66     	; 0x27ea <vfprintf+0xf0>
    27a8:	27 fd       	sbrc	r18, 7
    27aa:	27 c0       	rjmp	.+78     	; 0x27fa <vfprintf+0x100>
    27ac:	30 ed       	ldi	r19, 0xD0	; 208
    27ae:	38 0f       	add	r19, r24
    27b0:	3a 30       	cpi	r19, 0x0A	; 10
    27b2:	78 f4       	brcc	.+30     	; 0x27d2 <vfprintf+0xd8>
    27b4:	26 ff       	sbrs	r18, 6
    27b6:	06 c0       	rjmp	.+12     	; 0x27c4 <vfprintf+0xca>
    27b8:	fa e0       	ldi	r31, 0x0A	; 10
    27ba:	5f 9e       	mul	r5, r31
    27bc:	30 0d       	add	r19, r0
    27be:	11 24       	eor	r1, r1
    27c0:	53 2e       	mov	r5, r19
    27c2:	13 c0       	rjmp	.+38     	; 0x27ea <vfprintf+0xf0>
    27c4:	8a e0       	ldi	r24, 0x0A	; 10
    27c6:	38 9e       	mul	r3, r24
    27c8:	30 0d       	add	r19, r0
    27ca:	11 24       	eor	r1, r1
    27cc:	33 2e       	mov	r3, r19
    27ce:	20 62       	ori	r18, 0x20	; 32
    27d0:	0c c0       	rjmp	.+24     	; 0x27ea <vfprintf+0xf0>
    27d2:	8e 32       	cpi	r24, 0x2E	; 46
    27d4:	21 f4       	brne	.+8      	; 0x27de <vfprintf+0xe4>
    27d6:	26 fd       	sbrc	r18, 6
    27d8:	5f c1       	rjmp	.+702    	; 0x2a98 <vfprintf+0x39e>
    27da:	20 64       	ori	r18, 0x40	; 64
    27dc:	06 c0       	rjmp	.+12     	; 0x27ea <vfprintf+0xf0>
    27de:	8c 36       	cpi	r24, 0x6C	; 108
    27e0:	11 f4       	brne	.+4      	; 0x27e6 <vfprintf+0xec>
    27e2:	20 68       	ori	r18, 0x80	; 128
    27e4:	02 c0       	rjmp	.+4      	; 0x27ea <vfprintf+0xf0>
    27e6:	88 36       	cpi	r24, 0x68	; 104
    27e8:	41 f4       	brne	.+16     	; 0x27fa <vfprintf+0x100>
    27ea:	f6 01       	movw	r30, r12
    27ec:	93 fd       	sbrc	r25, 3
    27ee:	85 91       	lpm	r24, Z+
    27f0:	93 ff       	sbrs	r25, 3
    27f2:	81 91       	ld	r24, Z+
    27f4:	6f 01       	movw	r12, r30
    27f6:	81 11       	cpse	r24, r1
    27f8:	c1 cf       	rjmp	.-126    	; 0x277c <vfprintf+0x82>
    27fa:	98 2f       	mov	r25, r24
    27fc:	9f 7d       	andi	r25, 0xDF	; 223
    27fe:	95 54       	subi	r25, 0x45	; 69
    2800:	93 30       	cpi	r25, 0x03	; 3
    2802:	28 f4       	brcc	.+10     	; 0x280e <vfprintf+0x114>
    2804:	0c 5f       	subi	r16, 0xFC	; 252
    2806:	1f 4f       	sbci	r17, 0xFF	; 255
    2808:	ff e3       	ldi	r31, 0x3F	; 63
    280a:	f9 83       	std	Y+1, r31	; 0x01
    280c:	0d c0       	rjmp	.+26     	; 0x2828 <vfprintf+0x12e>
    280e:	83 36       	cpi	r24, 0x63	; 99
    2810:	31 f0       	breq	.+12     	; 0x281e <vfprintf+0x124>
    2812:	83 37       	cpi	r24, 0x73	; 115
    2814:	71 f0       	breq	.+28     	; 0x2832 <vfprintf+0x138>
    2816:	83 35       	cpi	r24, 0x53	; 83
    2818:	09 f0       	breq	.+2      	; 0x281c <vfprintf+0x122>
    281a:	57 c0       	rjmp	.+174    	; 0x28ca <vfprintf+0x1d0>
    281c:	21 c0       	rjmp	.+66     	; 0x2860 <vfprintf+0x166>
    281e:	f8 01       	movw	r30, r16
    2820:	80 81       	ld	r24, Z
    2822:	89 83       	std	Y+1, r24	; 0x01
    2824:	0e 5f       	subi	r16, 0xFE	; 254
    2826:	1f 4f       	sbci	r17, 0xFF	; 255
    2828:	44 24       	eor	r4, r4
    282a:	43 94       	inc	r4
    282c:	51 2c       	mov	r5, r1
    282e:	54 01       	movw	r10, r8
    2830:	14 c0       	rjmp	.+40     	; 0x285a <vfprintf+0x160>
    2832:	38 01       	movw	r6, r16
    2834:	f2 e0       	ldi	r31, 0x02	; 2
    2836:	6f 0e       	add	r6, r31
    2838:	71 1c       	adc	r7, r1
    283a:	f8 01       	movw	r30, r16
    283c:	a0 80       	ld	r10, Z
    283e:	b1 80       	ldd	r11, Z+1	; 0x01
    2840:	26 ff       	sbrs	r18, 6
    2842:	03 c0       	rjmp	.+6      	; 0x284a <vfprintf+0x150>
    2844:	65 2d       	mov	r22, r5
    2846:	70 e0       	ldi	r23, 0x00	; 0
    2848:	02 c0       	rjmp	.+4      	; 0x284e <vfprintf+0x154>
    284a:	6f ef       	ldi	r22, 0xFF	; 255
    284c:	7f ef       	ldi	r23, 0xFF	; 255
    284e:	c5 01       	movw	r24, r10
    2850:	2c 87       	std	Y+12, r18	; 0x0c
    2852:	d2 d2       	rcall	.+1444   	; 0x2df8 <strnlen>
    2854:	2c 01       	movw	r4, r24
    2856:	83 01       	movw	r16, r6
    2858:	2c 85       	ldd	r18, Y+12	; 0x0c
    285a:	2f 77       	andi	r18, 0x7F	; 127
    285c:	22 2e       	mov	r2, r18
    285e:	16 c0       	rjmp	.+44     	; 0x288c <vfprintf+0x192>
    2860:	38 01       	movw	r6, r16
    2862:	f2 e0       	ldi	r31, 0x02	; 2
    2864:	6f 0e       	add	r6, r31
    2866:	71 1c       	adc	r7, r1
    2868:	f8 01       	movw	r30, r16
    286a:	a0 80       	ld	r10, Z
    286c:	b1 80       	ldd	r11, Z+1	; 0x01
    286e:	26 ff       	sbrs	r18, 6
    2870:	03 c0       	rjmp	.+6      	; 0x2878 <vfprintf+0x17e>
    2872:	65 2d       	mov	r22, r5
    2874:	70 e0       	ldi	r23, 0x00	; 0
    2876:	02 c0       	rjmp	.+4      	; 0x287c <vfprintf+0x182>
    2878:	6f ef       	ldi	r22, 0xFF	; 255
    287a:	7f ef       	ldi	r23, 0xFF	; 255
    287c:	c5 01       	movw	r24, r10
    287e:	2c 87       	std	Y+12, r18	; 0x0c
    2880:	b0 d2       	rcall	.+1376   	; 0x2de2 <strnlen_P>
    2882:	2c 01       	movw	r4, r24
    2884:	2c 85       	ldd	r18, Y+12	; 0x0c
    2886:	20 68       	ori	r18, 0x80	; 128
    2888:	22 2e       	mov	r2, r18
    288a:	83 01       	movw	r16, r6
    288c:	23 fc       	sbrc	r2, 3
    288e:	19 c0       	rjmp	.+50     	; 0x28c2 <vfprintf+0x1c8>
    2890:	83 2d       	mov	r24, r3
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	48 16       	cp	r4, r24
    2896:	59 06       	cpc	r5, r25
    2898:	a0 f4       	brcc	.+40     	; 0x28c2 <vfprintf+0x1c8>
    289a:	b7 01       	movw	r22, r14
    289c:	80 e2       	ldi	r24, 0x20	; 32
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	b6 d2       	rcall	.+1388   	; 0x2e0e <fputc>
    28a2:	3a 94       	dec	r3
    28a4:	f5 cf       	rjmp	.-22     	; 0x2890 <vfprintf+0x196>
    28a6:	f5 01       	movw	r30, r10
    28a8:	27 fc       	sbrc	r2, 7
    28aa:	85 91       	lpm	r24, Z+
    28ac:	27 fe       	sbrs	r2, 7
    28ae:	81 91       	ld	r24, Z+
    28b0:	5f 01       	movw	r10, r30
    28b2:	b7 01       	movw	r22, r14
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	ab d2       	rcall	.+1366   	; 0x2e0e <fputc>
    28b8:	31 10       	cpse	r3, r1
    28ba:	3a 94       	dec	r3
    28bc:	f1 e0       	ldi	r31, 0x01	; 1
    28be:	4f 1a       	sub	r4, r31
    28c0:	51 08       	sbc	r5, r1
    28c2:	41 14       	cp	r4, r1
    28c4:	51 04       	cpc	r5, r1
    28c6:	79 f7       	brne	.-34     	; 0x28a6 <vfprintf+0x1ac>
    28c8:	de c0       	rjmp	.+444    	; 0x2a86 <vfprintf+0x38c>
    28ca:	84 36       	cpi	r24, 0x64	; 100
    28cc:	11 f0       	breq	.+4      	; 0x28d2 <vfprintf+0x1d8>
    28ce:	89 36       	cpi	r24, 0x69	; 105
    28d0:	31 f5       	brne	.+76     	; 0x291e <vfprintf+0x224>
    28d2:	f8 01       	movw	r30, r16
    28d4:	27 ff       	sbrs	r18, 7
    28d6:	07 c0       	rjmp	.+14     	; 0x28e6 <vfprintf+0x1ec>
    28d8:	60 81       	ld	r22, Z
    28da:	71 81       	ldd	r23, Z+1	; 0x01
    28dc:	82 81       	ldd	r24, Z+2	; 0x02
    28de:	93 81       	ldd	r25, Z+3	; 0x03
    28e0:	0c 5f       	subi	r16, 0xFC	; 252
    28e2:	1f 4f       	sbci	r17, 0xFF	; 255
    28e4:	08 c0       	rjmp	.+16     	; 0x28f6 <vfprintf+0x1fc>
    28e6:	60 81       	ld	r22, Z
    28e8:	71 81       	ldd	r23, Z+1	; 0x01
    28ea:	07 2e       	mov	r0, r23
    28ec:	00 0c       	add	r0, r0
    28ee:	88 0b       	sbc	r24, r24
    28f0:	99 0b       	sbc	r25, r25
    28f2:	0e 5f       	subi	r16, 0xFE	; 254
    28f4:	1f 4f       	sbci	r17, 0xFF	; 255
    28f6:	2f 76       	andi	r18, 0x6F	; 111
    28f8:	72 2e       	mov	r7, r18
    28fa:	97 ff       	sbrs	r25, 7
    28fc:	09 c0       	rjmp	.+18     	; 0x2910 <vfprintf+0x216>
    28fe:	90 95       	com	r25
    2900:	80 95       	com	r24
    2902:	70 95       	com	r23
    2904:	61 95       	neg	r22
    2906:	7f 4f       	sbci	r23, 0xFF	; 255
    2908:	8f 4f       	sbci	r24, 0xFF	; 255
    290a:	9f 4f       	sbci	r25, 0xFF	; 255
    290c:	20 68       	ori	r18, 0x80	; 128
    290e:	72 2e       	mov	r7, r18
    2910:	2a e0       	ldi	r18, 0x0A	; 10
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	a4 01       	movw	r20, r8
    2916:	b3 d2       	rcall	.+1382   	; 0x2e7e <__ultoa_invert>
    2918:	a8 2e       	mov	r10, r24
    291a:	a8 18       	sub	r10, r8
    291c:	43 c0       	rjmp	.+134    	; 0x29a4 <vfprintf+0x2aa>
    291e:	85 37       	cpi	r24, 0x75	; 117
    2920:	29 f4       	brne	.+10     	; 0x292c <vfprintf+0x232>
    2922:	2f 7e       	andi	r18, 0xEF	; 239
    2924:	b2 2e       	mov	r11, r18
    2926:	2a e0       	ldi	r18, 0x0A	; 10
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	25 c0       	rjmp	.+74     	; 0x2976 <vfprintf+0x27c>
    292c:	f2 2f       	mov	r31, r18
    292e:	f9 7f       	andi	r31, 0xF9	; 249
    2930:	bf 2e       	mov	r11, r31
    2932:	8f 36       	cpi	r24, 0x6F	; 111
    2934:	c1 f0       	breq	.+48     	; 0x2966 <vfprintf+0x26c>
    2936:	18 f4       	brcc	.+6      	; 0x293e <vfprintf+0x244>
    2938:	88 35       	cpi	r24, 0x58	; 88
    293a:	79 f0       	breq	.+30     	; 0x295a <vfprintf+0x260>
    293c:	ad c0       	rjmp	.+346    	; 0x2a98 <vfprintf+0x39e>
    293e:	80 37       	cpi	r24, 0x70	; 112
    2940:	19 f0       	breq	.+6      	; 0x2948 <vfprintf+0x24e>
    2942:	88 37       	cpi	r24, 0x78	; 120
    2944:	21 f0       	breq	.+8      	; 0x294e <vfprintf+0x254>
    2946:	a8 c0       	rjmp	.+336    	; 0x2a98 <vfprintf+0x39e>
    2948:	2f 2f       	mov	r18, r31
    294a:	20 61       	ori	r18, 0x10	; 16
    294c:	b2 2e       	mov	r11, r18
    294e:	b4 fe       	sbrs	r11, 4
    2950:	0d c0       	rjmp	.+26     	; 0x296c <vfprintf+0x272>
    2952:	8b 2d       	mov	r24, r11
    2954:	84 60       	ori	r24, 0x04	; 4
    2956:	b8 2e       	mov	r11, r24
    2958:	09 c0       	rjmp	.+18     	; 0x296c <vfprintf+0x272>
    295a:	24 ff       	sbrs	r18, 4
    295c:	0a c0       	rjmp	.+20     	; 0x2972 <vfprintf+0x278>
    295e:	9f 2f       	mov	r25, r31
    2960:	96 60       	ori	r25, 0x06	; 6
    2962:	b9 2e       	mov	r11, r25
    2964:	06 c0       	rjmp	.+12     	; 0x2972 <vfprintf+0x278>
    2966:	28 e0       	ldi	r18, 0x08	; 8
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	05 c0       	rjmp	.+10     	; 0x2976 <vfprintf+0x27c>
    296c:	20 e1       	ldi	r18, 0x10	; 16
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	02 c0       	rjmp	.+4      	; 0x2976 <vfprintf+0x27c>
    2972:	20 e1       	ldi	r18, 0x10	; 16
    2974:	32 e0       	ldi	r19, 0x02	; 2
    2976:	f8 01       	movw	r30, r16
    2978:	b7 fe       	sbrs	r11, 7
    297a:	07 c0       	rjmp	.+14     	; 0x298a <vfprintf+0x290>
    297c:	60 81       	ld	r22, Z
    297e:	71 81       	ldd	r23, Z+1	; 0x01
    2980:	82 81       	ldd	r24, Z+2	; 0x02
    2982:	93 81       	ldd	r25, Z+3	; 0x03
    2984:	0c 5f       	subi	r16, 0xFC	; 252
    2986:	1f 4f       	sbci	r17, 0xFF	; 255
    2988:	06 c0       	rjmp	.+12     	; 0x2996 <vfprintf+0x29c>
    298a:	60 81       	ld	r22, Z
    298c:	71 81       	ldd	r23, Z+1	; 0x01
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	0e 5f       	subi	r16, 0xFE	; 254
    2994:	1f 4f       	sbci	r17, 0xFF	; 255
    2996:	a4 01       	movw	r20, r8
    2998:	72 d2       	rcall	.+1252   	; 0x2e7e <__ultoa_invert>
    299a:	a8 2e       	mov	r10, r24
    299c:	a8 18       	sub	r10, r8
    299e:	fb 2d       	mov	r31, r11
    29a0:	ff 77       	andi	r31, 0x7F	; 127
    29a2:	7f 2e       	mov	r7, r31
    29a4:	76 fe       	sbrs	r7, 6
    29a6:	0b c0       	rjmp	.+22     	; 0x29be <vfprintf+0x2c4>
    29a8:	37 2d       	mov	r19, r7
    29aa:	3e 7f       	andi	r19, 0xFE	; 254
    29ac:	a5 14       	cp	r10, r5
    29ae:	50 f4       	brcc	.+20     	; 0x29c4 <vfprintf+0x2ca>
    29b0:	74 fe       	sbrs	r7, 4
    29b2:	0a c0       	rjmp	.+20     	; 0x29c8 <vfprintf+0x2ce>
    29b4:	72 fc       	sbrc	r7, 2
    29b6:	08 c0       	rjmp	.+16     	; 0x29c8 <vfprintf+0x2ce>
    29b8:	37 2d       	mov	r19, r7
    29ba:	3e 7e       	andi	r19, 0xEE	; 238
    29bc:	05 c0       	rjmp	.+10     	; 0x29c8 <vfprintf+0x2ce>
    29be:	ba 2c       	mov	r11, r10
    29c0:	37 2d       	mov	r19, r7
    29c2:	03 c0       	rjmp	.+6      	; 0x29ca <vfprintf+0x2d0>
    29c4:	ba 2c       	mov	r11, r10
    29c6:	01 c0       	rjmp	.+2      	; 0x29ca <vfprintf+0x2d0>
    29c8:	b5 2c       	mov	r11, r5
    29ca:	34 ff       	sbrs	r19, 4
    29cc:	0d c0       	rjmp	.+26     	; 0x29e8 <vfprintf+0x2ee>
    29ce:	fe 01       	movw	r30, r28
    29d0:	ea 0d       	add	r30, r10
    29d2:	f1 1d       	adc	r31, r1
    29d4:	80 81       	ld	r24, Z
    29d6:	80 33       	cpi	r24, 0x30	; 48
    29d8:	11 f4       	brne	.+4      	; 0x29de <vfprintf+0x2e4>
    29da:	39 7e       	andi	r19, 0xE9	; 233
    29dc:	09 c0       	rjmp	.+18     	; 0x29f0 <vfprintf+0x2f6>
    29de:	32 ff       	sbrs	r19, 2
    29e0:	06 c0       	rjmp	.+12     	; 0x29ee <vfprintf+0x2f4>
    29e2:	b3 94       	inc	r11
    29e4:	b3 94       	inc	r11
    29e6:	04 c0       	rjmp	.+8      	; 0x29f0 <vfprintf+0x2f6>
    29e8:	83 2f       	mov	r24, r19
    29ea:	86 78       	andi	r24, 0x86	; 134
    29ec:	09 f0       	breq	.+2      	; 0x29f0 <vfprintf+0x2f6>
    29ee:	b3 94       	inc	r11
    29f0:	33 fd       	sbrc	r19, 3
    29f2:	12 c0       	rjmp	.+36     	; 0x2a18 <vfprintf+0x31e>
    29f4:	30 ff       	sbrs	r19, 0
    29f6:	06 c0       	rjmp	.+12     	; 0x2a04 <vfprintf+0x30a>
    29f8:	5a 2c       	mov	r5, r10
    29fa:	b3 14       	cp	r11, r3
    29fc:	18 f4       	brcc	.+6      	; 0x2a04 <vfprintf+0x30a>
    29fe:	53 0c       	add	r5, r3
    2a00:	5b 18       	sub	r5, r11
    2a02:	b3 2c       	mov	r11, r3
    2a04:	b3 14       	cp	r11, r3
    2a06:	60 f4       	brcc	.+24     	; 0x2a20 <vfprintf+0x326>
    2a08:	b7 01       	movw	r22, r14
    2a0a:	80 e2       	ldi	r24, 0x20	; 32
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	3c 87       	std	Y+12, r19	; 0x0c
    2a10:	fe d1       	rcall	.+1020   	; 0x2e0e <fputc>
    2a12:	b3 94       	inc	r11
    2a14:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a16:	f6 cf       	rjmp	.-20     	; 0x2a04 <vfprintf+0x30a>
    2a18:	b3 14       	cp	r11, r3
    2a1a:	10 f4       	brcc	.+4      	; 0x2a20 <vfprintf+0x326>
    2a1c:	3b 18       	sub	r3, r11
    2a1e:	01 c0       	rjmp	.+2      	; 0x2a22 <vfprintf+0x328>
    2a20:	31 2c       	mov	r3, r1
    2a22:	34 ff       	sbrs	r19, 4
    2a24:	11 c0       	rjmp	.+34     	; 0x2a48 <vfprintf+0x34e>
    2a26:	b7 01       	movw	r22, r14
    2a28:	80 e3       	ldi	r24, 0x30	; 48
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	3c 87       	std	Y+12, r19	; 0x0c
    2a2e:	ef d1       	rcall	.+990    	; 0x2e0e <fputc>
    2a30:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a32:	32 ff       	sbrs	r19, 2
    2a34:	16 c0       	rjmp	.+44     	; 0x2a62 <vfprintf+0x368>
    2a36:	31 fd       	sbrc	r19, 1
    2a38:	03 c0       	rjmp	.+6      	; 0x2a40 <vfprintf+0x346>
    2a3a:	88 e7       	ldi	r24, 0x78	; 120
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	02 c0       	rjmp	.+4      	; 0x2a44 <vfprintf+0x34a>
    2a40:	88 e5       	ldi	r24, 0x58	; 88
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	b7 01       	movw	r22, r14
    2a46:	0c c0       	rjmp	.+24     	; 0x2a60 <vfprintf+0x366>
    2a48:	83 2f       	mov	r24, r19
    2a4a:	86 78       	andi	r24, 0x86	; 134
    2a4c:	51 f0       	breq	.+20     	; 0x2a62 <vfprintf+0x368>
    2a4e:	31 ff       	sbrs	r19, 1
    2a50:	02 c0       	rjmp	.+4      	; 0x2a56 <vfprintf+0x35c>
    2a52:	8b e2       	ldi	r24, 0x2B	; 43
    2a54:	01 c0       	rjmp	.+2      	; 0x2a58 <vfprintf+0x35e>
    2a56:	80 e2       	ldi	r24, 0x20	; 32
    2a58:	37 fd       	sbrc	r19, 7
    2a5a:	8d e2       	ldi	r24, 0x2D	; 45
    2a5c:	b7 01       	movw	r22, r14
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	d6 d1       	rcall	.+940    	; 0x2e0e <fputc>
    2a62:	a5 14       	cp	r10, r5
    2a64:	30 f4       	brcc	.+12     	; 0x2a72 <vfprintf+0x378>
    2a66:	b7 01       	movw	r22, r14
    2a68:	80 e3       	ldi	r24, 0x30	; 48
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	d0 d1       	rcall	.+928    	; 0x2e0e <fputc>
    2a6e:	5a 94       	dec	r5
    2a70:	f8 cf       	rjmp	.-16     	; 0x2a62 <vfprintf+0x368>
    2a72:	aa 94       	dec	r10
    2a74:	f4 01       	movw	r30, r8
    2a76:	ea 0d       	add	r30, r10
    2a78:	f1 1d       	adc	r31, r1
    2a7a:	80 81       	ld	r24, Z
    2a7c:	b7 01       	movw	r22, r14
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	c6 d1       	rcall	.+908    	; 0x2e0e <fputc>
    2a82:	a1 10       	cpse	r10, r1
    2a84:	f6 cf       	rjmp	.-20     	; 0x2a72 <vfprintf+0x378>
    2a86:	33 20       	and	r3, r3
    2a88:	09 f4       	brne	.+2      	; 0x2a8c <vfprintf+0x392>
    2a8a:	5d ce       	rjmp	.-838    	; 0x2746 <vfprintf+0x4c>
    2a8c:	b7 01       	movw	r22, r14
    2a8e:	80 e2       	ldi	r24, 0x20	; 32
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	bd d1       	rcall	.+890    	; 0x2e0e <fputc>
    2a94:	3a 94       	dec	r3
    2a96:	f7 cf       	rjmp	.-18     	; 0x2a86 <vfprintf+0x38c>
    2a98:	f7 01       	movw	r30, r14
    2a9a:	86 81       	ldd	r24, Z+6	; 0x06
    2a9c:	97 81       	ldd	r25, Z+7	; 0x07
    2a9e:	02 c0       	rjmp	.+4      	; 0x2aa4 <vfprintf+0x3aa>
    2aa0:	8f ef       	ldi	r24, 0xFF	; 255
    2aa2:	9f ef       	ldi	r25, 0xFF	; 255
    2aa4:	2c 96       	adiw	r28, 0x0c	; 12
    2aa6:	0f b6       	in	r0, 0x3f	; 63
    2aa8:	f8 94       	cli
    2aaa:	de bf       	out	0x3e, r29	; 62
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	cd bf       	out	0x3d, r28	; 61
    2ab0:	df 91       	pop	r29
    2ab2:	cf 91       	pop	r28
    2ab4:	1f 91       	pop	r17
    2ab6:	0f 91       	pop	r16
    2ab8:	ff 90       	pop	r15
    2aba:	ef 90       	pop	r14
    2abc:	df 90       	pop	r13
    2abe:	cf 90       	pop	r12
    2ac0:	bf 90       	pop	r11
    2ac2:	af 90       	pop	r10
    2ac4:	9f 90       	pop	r9
    2ac6:	8f 90       	pop	r8
    2ac8:	7f 90       	pop	r7
    2aca:	6f 90       	pop	r6
    2acc:	5f 90       	pop	r5
    2ace:	4f 90       	pop	r4
    2ad0:	3f 90       	pop	r3
    2ad2:	2f 90       	pop	r2
    2ad4:	08 95       	ret

00002ad6 <strtod>:
    2ad6:	6f 92       	push	r6
    2ad8:	7f 92       	push	r7
    2ada:	8f 92       	push	r8
    2adc:	9f 92       	push	r9
    2ade:	af 92       	push	r10
    2ae0:	bf 92       	push	r11
    2ae2:	cf 92       	push	r12
    2ae4:	df 92       	push	r13
    2ae6:	ef 92       	push	r14
    2ae8:	ff 92       	push	r15
    2aea:	0f 93       	push	r16
    2aec:	1f 93       	push	r17
    2aee:	cf 93       	push	r28
    2af0:	df 93       	push	r29
    2af2:	ec 01       	movw	r28, r24
    2af4:	7b 01       	movw	r14, r22
    2af6:	61 15       	cp	r22, r1
    2af8:	71 05       	cpc	r23, r1
    2afa:	19 f0       	breq	.+6      	; 0x2b02 <strtod+0x2c>
    2afc:	db 01       	movw	r26, r22
    2afe:	8d 93       	st	X+, r24
    2b00:	9c 93       	st	X, r25
    2b02:	8e 01       	movw	r16, r28
    2b04:	0f 5f       	subi	r16, 0xFF	; 255
    2b06:	1f 4f       	sbci	r17, 0xFF	; 255
    2b08:	78 80       	ld	r7, Y
    2b0a:	87 2d       	mov	r24, r7
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	49 d1       	rcall	.+658    	; 0x2da2 <isspace>
    2b10:	89 2b       	or	r24, r25
    2b12:	11 f0       	breq	.+4      	; 0x2b18 <strtod+0x42>
    2b14:	e8 01       	movw	r28, r16
    2b16:	f5 cf       	rjmp	.-22     	; 0x2b02 <strtod+0x2c>
    2b18:	bd e2       	ldi	r27, 0x2D	; 45
    2b1a:	7b 12       	cpse	r7, r27
    2b1c:	05 c0       	rjmp	.+10     	; 0x2b28 <strtod+0x52>
    2b1e:	0f 5f       	subi	r16, 0xFF	; 255
    2b20:	1f 4f       	sbci	r17, 0xFF	; 255
    2b22:	79 80       	ldd	r7, Y+1	; 0x01
    2b24:	c1 e0       	ldi	r28, 0x01	; 1
    2b26:	08 c0       	rjmp	.+16     	; 0x2b38 <strtod+0x62>
    2b28:	eb e2       	ldi	r30, 0x2B	; 43
    2b2a:	7e 12       	cpse	r7, r30
    2b2c:	04 c0       	rjmp	.+8      	; 0x2b36 <strtod+0x60>
    2b2e:	8e 01       	movw	r16, r28
    2b30:	0e 5f       	subi	r16, 0xFE	; 254
    2b32:	1f 4f       	sbci	r17, 0xFF	; 255
    2b34:	79 80       	ldd	r7, Y+1	; 0x01
    2b36:	c0 e0       	ldi	r28, 0x00	; 0
    2b38:	68 01       	movw	r12, r16
    2b3a:	f1 e0       	ldi	r31, 0x01	; 1
    2b3c:	cf 1a       	sub	r12, r31
    2b3e:	d1 08       	sbc	r13, r1
    2b40:	43 e0       	ldi	r20, 0x03	; 3
    2b42:	50 e0       	ldi	r21, 0x00	; 0
    2b44:	6e e2       	ldi	r22, 0x2E	; 46
    2b46:	71 e0       	ldi	r23, 0x01	; 1
    2b48:	c6 01       	movw	r24, r12
    2b4a:	33 d1       	rcall	.+614    	; 0x2db2 <strncasecmp_P>
    2b4c:	89 2b       	or	r24, r25
    2b4e:	e9 f4       	brne	.+58     	; 0x2b8a <strtod+0xb4>
    2b50:	68 01       	movw	r12, r16
    2b52:	22 e0       	ldi	r18, 0x02	; 2
    2b54:	c2 0e       	add	r12, r18
    2b56:	d1 1c       	adc	r13, r1
    2b58:	45 e0       	ldi	r20, 0x05	; 5
    2b5a:	50 e0       	ldi	r21, 0x00	; 0
    2b5c:	69 e2       	ldi	r22, 0x29	; 41
    2b5e:	71 e0       	ldi	r23, 0x01	; 1
    2b60:	c6 01       	movw	r24, r12
    2b62:	27 d1       	rcall	.+590    	; 0x2db2 <strncasecmp_P>
    2b64:	89 2b       	or	r24, r25
    2b66:	21 f4       	brne	.+8      	; 0x2b70 <strtod+0x9a>
    2b68:	68 01       	movw	r12, r16
    2b6a:	87 e0       	ldi	r24, 0x07	; 7
    2b6c:	c8 0e       	add	r12, r24
    2b6e:	d1 1c       	adc	r13, r1
    2b70:	e1 14       	cp	r14, r1
    2b72:	f1 04       	cpc	r15, r1
    2b74:	19 f0       	breq	.+6      	; 0x2b7c <strtod+0xa6>
    2b76:	d7 01       	movw	r26, r14
    2b78:	cd 92       	st	X+, r12
    2b7a:	dc 92       	st	X, r13
    2b7c:	c1 11       	cpse	r28, r1
    2b7e:	f9 c0       	rjmp	.+498    	; 0x2d72 <strtod+0x29c>
    2b80:	60 e0       	ldi	r22, 0x00	; 0
    2b82:	70 e0       	ldi	r23, 0x00	; 0
    2b84:	80 e8       	ldi	r24, 0x80	; 128
    2b86:	9f e7       	ldi	r25, 0x7F	; 127
    2b88:	fd c0       	rjmp	.+506    	; 0x2d84 <strtod+0x2ae>
    2b8a:	43 e0       	ldi	r20, 0x03	; 3
    2b8c:	50 e0       	ldi	r21, 0x00	; 0
    2b8e:	66 e2       	ldi	r22, 0x26	; 38
    2b90:	71 e0       	ldi	r23, 0x01	; 1
    2b92:	c6 01       	movw	r24, r12
    2b94:	0e d1       	rcall	.+540    	; 0x2db2 <strncasecmp_P>
    2b96:	89 2b       	or	r24, r25
    2b98:	51 f4       	brne	.+20     	; 0x2bae <strtod+0xd8>
    2b9a:	e1 14       	cp	r14, r1
    2b9c:	f1 04       	cpc	r15, r1
    2b9e:	09 f4       	brne	.+2      	; 0x2ba2 <strtod+0xcc>
    2ba0:	ed c0       	rjmp	.+474    	; 0x2d7c <strtod+0x2a6>
    2ba2:	0e 5f       	subi	r16, 0xFE	; 254
    2ba4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba6:	f7 01       	movw	r30, r14
    2ba8:	11 83       	std	Z+1, r17	; 0x01
    2baa:	00 83       	st	Z, r16
    2bac:	e7 c0       	rjmp	.+462    	; 0x2d7c <strtod+0x2a6>
    2bae:	68 01       	movw	r12, r16
    2bb0:	60 e0       	ldi	r22, 0x00	; 0
    2bb2:	70 e0       	ldi	r23, 0x00	; 0
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	00 e0       	ldi	r16, 0x00	; 0
    2bb8:	10 e0       	ldi	r17, 0x00	; 0
    2bba:	f6 01       	movw	r30, r12
    2bbc:	d0 ed       	ldi	r29, 0xD0	; 208
    2bbe:	d7 0d       	add	r29, r7
    2bc0:	da 30       	cpi	r29, 0x0A	; 10
    2bc2:	50 f5       	brcc	.+84     	; 0x2c18 <strtod+0x142>
    2bc4:	2c 2f       	mov	r18, r28
    2bc6:	22 60       	ori	r18, 0x02	; 2
    2bc8:	62 2e       	mov	r6, r18
    2bca:	2c 2f       	mov	r18, r28
    2bcc:	28 70       	andi	r18, 0x08	; 8
    2bce:	c2 ff       	sbrs	r28, 2
    2bd0:	05 c0       	rjmp	.+10     	; 0x2bdc <strtod+0x106>
    2bd2:	21 11       	cpse	r18, r1
    2bd4:	27 c0       	rjmp	.+78     	; 0x2c24 <strtod+0x14e>
    2bd6:	0f 5f       	subi	r16, 0xFF	; 255
    2bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bda:	24 c0       	rjmp	.+72     	; 0x2c24 <strtod+0x14e>
    2bdc:	22 23       	and	r18, r18
    2bde:	11 f0       	breq	.+4      	; 0x2be4 <strtod+0x10e>
    2be0:	01 50       	subi	r16, 0x01	; 1
    2be2:	11 09       	sbc	r17, r1
    2be4:	a5 e0       	ldi	r26, 0x05	; 5
    2be6:	b0 e0       	ldi	r27, 0x00	; 0
    2be8:	9b 01       	movw	r18, r22
    2bea:	ac 01       	movw	r20, r24
    2bec:	ba dc       	rcall	.-1676   	; 0x2562 <__muluhisi3>
    2bee:	4b 01       	movw	r8, r22
    2bf0:	5c 01       	movw	r10, r24
    2bf2:	88 0c       	add	r8, r8
    2bf4:	99 1c       	adc	r9, r9
    2bf6:	aa 1c       	adc	r10, r10
    2bf8:	bb 1c       	adc	r11, r11
    2bfa:	c5 01       	movw	r24, r10
    2bfc:	b4 01       	movw	r22, r8
    2bfe:	6d 0f       	add	r22, r29
    2c00:	71 1d       	adc	r23, r1
    2c02:	81 1d       	adc	r24, r1
    2c04:	91 1d       	adc	r25, r1
    2c06:	68 39       	cpi	r22, 0x98	; 152
    2c08:	a9 e9       	ldi	r26, 0x99	; 153
    2c0a:	7a 07       	cpc	r23, r26
    2c0c:	8a 07       	cpc	r24, r26
    2c0e:	a9 e1       	ldi	r26, 0x19	; 25
    2c10:	9a 07       	cpc	r25, r26
    2c12:	40 f0       	brcs	.+16     	; 0x2c24 <strtod+0x14e>
    2c14:	c6 60       	ori	r28, 0x06	; 6
    2c16:	05 c0       	rjmp	.+10     	; 0x2c22 <strtod+0x14c>
    2c18:	de 3f       	cpi	r29, 0xFE	; 254
    2c1a:	51 f4       	brne	.+20     	; 0x2c30 <strtod+0x15a>
    2c1c:	c3 fd       	sbrc	r28, 3
    2c1e:	44 c0       	rjmp	.+136    	; 0x2ca8 <strtod+0x1d2>
    2c20:	c8 60       	ori	r28, 0x08	; 8
    2c22:	6c 2e       	mov	r6, r28
    2c24:	bf ef       	ldi	r27, 0xFF	; 255
    2c26:	cb 1a       	sub	r12, r27
    2c28:	db 0a       	sbc	r13, r27
    2c2a:	70 80       	ld	r7, Z
    2c2c:	c6 2d       	mov	r28, r6
    2c2e:	c5 cf       	rjmp	.-118    	; 0x2bba <strtod+0xe4>
    2c30:	2d 2f       	mov	r18, r29
    2c32:	2f 7d       	andi	r18, 0xDF	; 223
    2c34:	25 31       	cpi	r18, 0x15	; 21
    2c36:	c1 f5       	brne	.+112    	; 0x2ca8 <strtod+0x1d2>
    2c38:	40 81       	ld	r20, Z
    2c3a:	4d 32       	cpi	r20, 0x2D	; 45
    2c3c:	11 f4       	brne	.+4      	; 0x2c42 <strtod+0x16c>
    2c3e:	c0 61       	ori	r28, 0x10	; 16
    2c40:	06 c0       	rjmp	.+12     	; 0x2c4e <strtod+0x178>
    2c42:	4b 32       	cpi	r20, 0x2B	; 43
    2c44:	21 f0       	breq	.+8      	; 0x2c4e <strtod+0x178>
    2c46:	31 96       	adiw	r30, 0x01	; 1
    2c48:	21 e0       	ldi	r18, 0x01	; 1
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	06 c0       	rjmp	.+12     	; 0x2c5a <strtod+0x184>
    2c4e:	32 96       	adiw	r30, 0x02	; 2
    2c50:	d6 01       	movw	r26, r12
    2c52:	11 96       	adiw	r26, 0x01	; 1
    2c54:	4c 91       	ld	r20, X
    2c56:	22 e0       	ldi	r18, 0x02	; 2
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	a0 ed       	ldi	r26, 0xD0	; 208
    2c5c:	a4 0f       	add	r26, r20
    2c5e:	aa 30       	cpi	r26, 0x0A	; 10
    2c60:	18 f0       	brcs	.+6      	; 0x2c68 <strtod+0x192>
    2c62:	e2 1b       	sub	r30, r18
    2c64:	f3 0b       	sbc	r31, r19
    2c66:	20 c0       	rjmp	.+64     	; 0x2ca8 <strtod+0x1d2>
    2c68:	40 e0       	ldi	r20, 0x00	; 0
    2c6a:	50 e0       	ldi	r21, 0x00	; 0
    2c6c:	40 38       	cpi	r20, 0x80	; 128
    2c6e:	bc e0       	ldi	r27, 0x0C	; 12
    2c70:	5b 07       	cpc	r21, r27
    2c72:	5c f4       	brge	.+22     	; 0x2c8a <strtod+0x1b4>
    2c74:	9a 01       	movw	r18, r20
    2c76:	22 0f       	add	r18, r18
    2c78:	33 1f       	adc	r19, r19
    2c7a:	22 0f       	add	r18, r18
    2c7c:	33 1f       	adc	r19, r19
    2c7e:	42 0f       	add	r20, r18
    2c80:	53 1f       	adc	r21, r19
    2c82:	44 0f       	add	r20, r20
    2c84:	55 1f       	adc	r21, r21
    2c86:	4a 0f       	add	r20, r26
    2c88:	51 1d       	adc	r21, r1
    2c8a:	31 96       	adiw	r30, 0x01	; 1
    2c8c:	df 01       	movw	r26, r30
    2c8e:	11 97       	sbiw	r26, 0x01	; 1
    2c90:	2c 91       	ld	r18, X
    2c92:	a0 ed       	ldi	r26, 0xD0	; 208
    2c94:	a2 0f       	add	r26, r18
    2c96:	aa 30       	cpi	r26, 0x0A	; 10
    2c98:	48 f3       	brcs	.-46     	; 0x2c6c <strtod+0x196>
    2c9a:	c4 ff       	sbrs	r28, 4
    2c9c:	03 c0       	rjmp	.+6      	; 0x2ca4 <strtod+0x1ce>
    2c9e:	51 95       	neg	r21
    2ca0:	41 95       	neg	r20
    2ca2:	51 09       	sbc	r21, r1
    2ca4:	04 0f       	add	r16, r20
    2ca6:	15 1f       	adc	r17, r21
    2ca8:	c1 ff       	sbrs	r28, 1
    2caa:	07 c0       	rjmp	.+14     	; 0x2cba <strtod+0x1e4>
    2cac:	e1 14       	cp	r14, r1
    2cae:	f1 04       	cpc	r15, r1
    2cb0:	21 f0       	breq	.+8      	; 0x2cba <strtod+0x1e4>
    2cb2:	31 97       	sbiw	r30, 0x01	; 1
    2cb4:	d7 01       	movw	r26, r14
    2cb6:	ed 93       	st	X+, r30
    2cb8:	fc 93       	st	X, r31
    2cba:	17 da       	rcall	.-3026   	; 0x20ea <__floatunsisf>
    2cbc:	c3 70       	andi	r28, 0x03	; 3
    2cbe:	c3 30       	cpi	r28, 0x03	; 3
    2cc0:	19 f0       	breq	.+6      	; 0x2cc8 <strtod+0x1f2>
    2cc2:	6b 01       	movw	r12, r22
    2cc4:	7c 01       	movw	r14, r24
    2cc6:	06 c0       	rjmp	.+12     	; 0x2cd4 <strtod+0x1fe>
    2cc8:	6b 01       	movw	r12, r22
    2cca:	7c 01       	movw	r14, r24
    2ccc:	f7 fa       	bst	r15, 7
    2cce:	f0 94       	com	r15
    2cd0:	f7 f8       	bld	r15, 7
    2cd2:	f0 94       	com	r15
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	a9 01       	movw	r20, r18
    2cda:	c7 01       	movw	r24, r14
    2cdc:	b6 01       	movw	r22, r12
    2cde:	2a d9       	rcall	.-3500   	; 0x1f34 <__cmpsf2>
    2ce0:	88 23       	and	r24, r24
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <strtod+0x210>
    2ce4:	43 c0       	rjmp	.+134    	; 0x2d6c <strtod+0x296>
    2ce6:	17 ff       	sbrs	r17, 7
    2ce8:	06 c0       	rjmp	.+12     	; 0x2cf6 <strtod+0x220>
    2cea:	11 95       	neg	r17
    2cec:	01 95       	neg	r16
    2cee:	11 09       	sbc	r17, r1
    2cf0:	c5 e4       	ldi	r28, 0x45	; 69
    2cf2:	d1 e0       	ldi	r29, 0x01	; 1
    2cf4:	02 c0       	rjmp	.+4      	; 0x2cfa <strtod+0x224>
    2cf6:	cd e5       	ldi	r28, 0x5D	; 93
    2cf8:	d1 e0       	ldi	r29, 0x01	; 1
    2cfa:	5e 01       	movw	r10, r28
    2cfc:	b8 e1       	ldi	r27, 0x18	; 24
    2cfe:	ab 1a       	sub	r10, r27
    2d00:	b1 08       	sbc	r11, r1
    2d02:	46 01       	movw	r8, r12
    2d04:	be 2d       	mov	r27, r14
    2d06:	af 2d       	mov	r26, r15
    2d08:	90 e2       	ldi	r25, 0x20	; 32
    2d0a:	e9 2e       	mov	r14, r25
    2d0c:	f1 2c       	mov	r15, r1
    2d0e:	0e 15       	cp	r16, r14
    2d10:	1f 05       	cpc	r17, r15
    2d12:	7c f0       	brlt	.+30     	; 0x2d32 <strtod+0x25c>
    2d14:	fe 01       	movw	r30, r28
    2d16:	25 91       	lpm	r18, Z+
    2d18:	35 91       	lpm	r19, Z+
    2d1a:	45 91       	lpm	r20, Z+
    2d1c:	54 91       	lpm	r21, Z
    2d1e:	b4 01       	movw	r22, r8
    2d20:	8b 2f       	mov	r24, r27
    2d22:	9a 2f       	mov	r25, r26
    2d24:	50 db       	rcall	.-2400   	; 0x23c6 <__mulsf3>
    2d26:	4b 01       	movw	r8, r22
    2d28:	b8 2f       	mov	r27, r24
    2d2a:	a9 2f       	mov	r26, r25
    2d2c:	0e 19       	sub	r16, r14
    2d2e:	1f 09       	sbc	r17, r15
    2d30:	ee cf       	rjmp	.-36     	; 0x2d0e <strtod+0x238>
    2d32:	24 97       	sbiw	r28, 0x04	; 4
    2d34:	f5 94       	asr	r15
    2d36:	e7 94       	ror	r14
    2d38:	ca 15       	cp	r28, r10
    2d3a:	db 05       	cpc	r29, r11
    2d3c:	41 f7       	brne	.-48     	; 0x2d0e <strtod+0x238>
    2d3e:	64 01       	movw	r12, r8
    2d40:	eb 2e       	mov	r14, r27
    2d42:	fa 2e       	mov	r15, r26
    2d44:	8e 2d       	mov	r24, r14
    2d46:	88 0f       	add	r24, r24
    2d48:	8f 2d       	mov	r24, r15
    2d4a:	88 1f       	adc	r24, r24
    2d4c:	8f 3f       	cpi	r24, 0xFF	; 255
    2d4e:	41 f0       	breq	.+16     	; 0x2d60 <strtod+0x28a>
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	a9 01       	movw	r20, r18
    2d56:	c7 01       	movw	r24, r14
    2d58:	b6 01       	movw	r22, r12
    2d5a:	ec d8       	rcall	.-3624   	; 0x1f34 <__cmpsf2>
    2d5c:	81 11       	cpse	r24, r1
    2d5e:	06 c0       	rjmp	.+12     	; 0x2d6c <strtod+0x296>
    2d60:	82 e2       	ldi	r24, 0x22	; 34
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	90 93 7d 03 	sts	0x037D, r25	; 0x80037d <errno+0x1>
    2d68:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <errno>
    2d6c:	c7 01       	movw	r24, r14
    2d6e:	b6 01       	movw	r22, r12
    2d70:	09 c0       	rjmp	.+18     	; 0x2d84 <strtod+0x2ae>
    2d72:	60 e0       	ldi	r22, 0x00	; 0
    2d74:	70 e0       	ldi	r23, 0x00	; 0
    2d76:	80 e8       	ldi	r24, 0x80	; 128
    2d78:	9f ef       	ldi	r25, 0xFF	; 255
    2d7a:	04 c0       	rjmp	.+8      	; 0x2d84 <strtod+0x2ae>
    2d7c:	60 e0       	ldi	r22, 0x00	; 0
    2d7e:	70 e0       	ldi	r23, 0x00	; 0
    2d80:	80 ec       	ldi	r24, 0xC0	; 192
    2d82:	9f e7       	ldi	r25, 0x7F	; 127
    2d84:	df 91       	pop	r29
    2d86:	cf 91       	pop	r28
    2d88:	1f 91       	pop	r17
    2d8a:	0f 91       	pop	r16
    2d8c:	ff 90       	pop	r15
    2d8e:	ef 90       	pop	r14
    2d90:	df 90       	pop	r13
    2d92:	cf 90       	pop	r12
    2d94:	bf 90       	pop	r11
    2d96:	af 90       	pop	r10
    2d98:	9f 90       	pop	r9
    2d9a:	8f 90       	pop	r8
    2d9c:	7f 90       	pop	r7
    2d9e:	6f 90       	pop	r6
    2da0:	08 95       	ret

00002da2 <isspace>:
    2da2:	91 11       	cpse	r25, r1
    2da4:	ca c0       	rjmp	.+404    	; 0x2f3a <__ctype_isfalse>
    2da6:	80 32       	cpi	r24, 0x20	; 32
    2da8:	19 f0       	breq	.+6      	; 0x2db0 <isspace+0xe>
    2daa:	89 50       	subi	r24, 0x09	; 9
    2dac:	85 50       	subi	r24, 0x05	; 5
    2dae:	d0 f7       	brcc	.-12     	; 0x2da4 <isspace+0x2>
    2db0:	08 95       	ret

00002db2 <strncasecmp_P>:
    2db2:	fb 01       	movw	r30, r22
    2db4:	dc 01       	movw	r26, r24
    2db6:	41 50       	subi	r20, 0x01	; 1
    2db8:	50 40       	sbci	r21, 0x00	; 0
    2dba:	88 f0       	brcs	.+34     	; 0x2dde <strncasecmp_P+0x2c>
    2dbc:	8d 91       	ld	r24, X+
    2dbe:	81 34       	cpi	r24, 0x41	; 65
    2dc0:	1c f0       	brlt	.+6      	; 0x2dc8 <strncasecmp_P+0x16>
    2dc2:	8b 35       	cpi	r24, 0x5B	; 91
    2dc4:	0c f4       	brge	.+2      	; 0x2dc8 <strncasecmp_P+0x16>
    2dc6:	80 5e       	subi	r24, 0xE0	; 224
    2dc8:	65 91       	lpm	r22, Z+
    2dca:	61 34       	cpi	r22, 0x41	; 65
    2dcc:	1c f0       	brlt	.+6      	; 0x2dd4 <strncasecmp_P+0x22>
    2dce:	6b 35       	cpi	r22, 0x5B	; 91
    2dd0:	0c f4       	brge	.+2      	; 0x2dd4 <strncasecmp_P+0x22>
    2dd2:	60 5e       	subi	r22, 0xE0	; 224
    2dd4:	86 1b       	sub	r24, r22
    2dd6:	61 11       	cpse	r22, r1
    2dd8:	71 f3       	breq	.-36     	; 0x2db6 <strncasecmp_P+0x4>
    2dda:	99 0b       	sbc	r25, r25
    2ddc:	08 95       	ret
    2dde:	88 1b       	sub	r24, r24
    2de0:	fc cf       	rjmp	.-8      	; 0x2dda <strncasecmp_P+0x28>

00002de2 <strnlen_P>:
    2de2:	fc 01       	movw	r30, r24
    2de4:	05 90       	lpm	r0, Z+
    2de6:	61 50       	subi	r22, 0x01	; 1
    2de8:	70 40       	sbci	r23, 0x00	; 0
    2dea:	01 10       	cpse	r0, r1
    2dec:	d8 f7       	brcc	.-10     	; 0x2de4 <strnlen_P+0x2>
    2dee:	80 95       	com	r24
    2df0:	90 95       	com	r25
    2df2:	8e 0f       	add	r24, r30
    2df4:	9f 1f       	adc	r25, r31
    2df6:	08 95       	ret

00002df8 <strnlen>:
    2df8:	fc 01       	movw	r30, r24
    2dfa:	61 50       	subi	r22, 0x01	; 1
    2dfc:	70 40       	sbci	r23, 0x00	; 0
    2dfe:	01 90       	ld	r0, Z+
    2e00:	01 10       	cpse	r0, r1
    2e02:	d8 f7       	brcc	.-10     	; 0x2dfa <strnlen+0x2>
    2e04:	80 95       	com	r24
    2e06:	90 95       	com	r25
    2e08:	8e 0f       	add	r24, r30
    2e0a:	9f 1f       	adc	r25, r31
    2e0c:	08 95       	ret

00002e0e <fputc>:
    2e0e:	0f 93       	push	r16
    2e10:	1f 93       	push	r17
    2e12:	cf 93       	push	r28
    2e14:	df 93       	push	r29
    2e16:	fb 01       	movw	r30, r22
    2e18:	23 81       	ldd	r18, Z+3	; 0x03
    2e1a:	21 fd       	sbrc	r18, 1
    2e1c:	03 c0       	rjmp	.+6      	; 0x2e24 <fputc+0x16>
    2e1e:	8f ef       	ldi	r24, 0xFF	; 255
    2e20:	9f ef       	ldi	r25, 0xFF	; 255
    2e22:	28 c0       	rjmp	.+80     	; 0x2e74 <fputc+0x66>
    2e24:	22 ff       	sbrs	r18, 2
    2e26:	16 c0       	rjmp	.+44     	; 0x2e54 <fputc+0x46>
    2e28:	46 81       	ldd	r20, Z+6	; 0x06
    2e2a:	57 81       	ldd	r21, Z+7	; 0x07
    2e2c:	24 81       	ldd	r18, Z+4	; 0x04
    2e2e:	35 81       	ldd	r19, Z+5	; 0x05
    2e30:	42 17       	cp	r20, r18
    2e32:	53 07       	cpc	r21, r19
    2e34:	44 f4       	brge	.+16     	; 0x2e46 <fputc+0x38>
    2e36:	a0 81       	ld	r26, Z
    2e38:	b1 81       	ldd	r27, Z+1	; 0x01
    2e3a:	9d 01       	movw	r18, r26
    2e3c:	2f 5f       	subi	r18, 0xFF	; 255
    2e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e40:	31 83       	std	Z+1, r19	; 0x01
    2e42:	20 83       	st	Z, r18
    2e44:	8c 93       	st	X, r24
    2e46:	26 81       	ldd	r18, Z+6	; 0x06
    2e48:	37 81       	ldd	r19, Z+7	; 0x07
    2e4a:	2f 5f       	subi	r18, 0xFF	; 255
    2e4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e4e:	37 83       	std	Z+7, r19	; 0x07
    2e50:	26 83       	std	Z+6, r18	; 0x06
    2e52:	10 c0       	rjmp	.+32     	; 0x2e74 <fputc+0x66>
    2e54:	eb 01       	movw	r28, r22
    2e56:	09 2f       	mov	r16, r25
    2e58:	18 2f       	mov	r17, r24
    2e5a:	00 84       	ldd	r0, Z+8	; 0x08
    2e5c:	f1 85       	ldd	r31, Z+9	; 0x09
    2e5e:	e0 2d       	mov	r30, r0
    2e60:	19 95       	eicall
    2e62:	89 2b       	or	r24, r25
    2e64:	e1 f6       	brne	.-72     	; 0x2e1e <fputc+0x10>
    2e66:	8e 81       	ldd	r24, Y+6	; 0x06
    2e68:	9f 81       	ldd	r25, Y+7	; 0x07
    2e6a:	01 96       	adiw	r24, 0x01	; 1
    2e6c:	9f 83       	std	Y+7, r25	; 0x07
    2e6e:	8e 83       	std	Y+6, r24	; 0x06
    2e70:	81 2f       	mov	r24, r17
    2e72:	90 2f       	mov	r25, r16
    2e74:	df 91       	pop	r29
    2e76:	cf 91       	pop	r28
    2e78:	1f 91       	pop	r17
    2e7a:	0f 91       	pop	r16
    2e7c:	08 95       	ret

00002e7e <__ultoa_invert>:
    2e7e:	fa 01       	movw	r30, r20
    2e80:	aa 27       	eor	r26, r26
    2e82:	28 30       	cpi	r18, 0x08	; 8
    2e84:	51 f1       	breq	.+84     	; 0x2eda <__ultoa_invert+0x5c>
    2e86:	20 31       	cpi	r18, 0x10	; 16
    2e88:	81 f1       	breq	.+96     	; 0x2eea <__ultoa_invert+0x6c>
    2e8a:	e8 94       	clt
    2e8c:	6f 93       	push	r22
    2e8e:	6e 7f       	andi	r22, 0xFE	; 254
    2e90:	6e 5f       	subi	r22, 0xFE	; 254
    2e92:	7f 4f       	sbci	r23, 0xFF	; 255
    2e94:	8f 4f       	sbci	r24, 0xFF	; 255
    2e96:	9f 4f       	sbci	r25, 0xFF	; 255
    2e98:	af 4f       	sbci	r26, 0xFF	; 255
    2e9a:	b1 e0       	ldi	r27, 0x01	; 1
    2e9c:	3e d0       	rcall	.+124    	; 0x2f1a <__ultoa_invert+0x9c>
    2e9e:	b4 e0       	ldi	r27, 0x04	; 4
    2ea0:	3c d0       	rcall	.+120    	; 0x2f1a <__ultoa_invert+0x9c>
    2ea2:	67 0f       	add	r22, r23
    2ea4:	78 1f       	adc	r23, r24
    2ea6:	89 1f       	adc	r24, r25
    2ea8:	9a 1f       	adc	r25, r26
    2eaa:	a1 1d       	adc	r26, r1
    2eac:	68 0f       	add	r22, r24
    2eae:	79 1f       	adc	r23, r25
    2eb0:	8a 1f       	adc	r24, r26
    2eb2:	91 1d       	adc	r25, r1
    2eb4:	a1 1d       	adc	r26, r1
    2eb6:	6a 0f       	add	r22, r26
    2eb8:	71 1d       	adc	r23, r1
    2eba:	81 1d       	adc	r24, r1
    2ebc:	91 1d       	adc	r25, r1
    2ebe:	a1 1d       	adc	r26, r1
    2ec0:	20 d0       	rcall	.+64     	; 0x2f02 <__ultoa_invert+0x84>
    2ec2:	09 f4       	brne	.+2      	; 0x2ec6 <__ultoa_invert+0x48>
    2ec4:	68 94       	set
    2ec6:	3f 91       	pop	r19
    2ec8:	2a e0       	ldi	r18, 0x0A	; 10
    2eca:	26 9f       	mul	r18, r22
    2ecc:	11 24       	eor	r1, r1
    2ece:	30 19       	sub	r19, r0
    2ed0:	30 5d       	subi	r19, 0xD0	; 208
    2ed2:	31 93       	st	Z+, r19
    2ed4:	de f6       	brtc	.-74     	; 0x2e8c <__ultoa_invert+0xe>
    2ed6:	cf 01       	movw	r24, r30
    2ed8:	08 95       	ret
    2eda:	46 2f       	mov	r20, r22
    2edc:	47 70       	andi	r20, 0x07	; 7
    2ede:	40 5d       	subi	r20, 0xD0	; 208
    2ee0:	41 93       	st	Z+, r20
    2ee2:	b3 e0       	ldi	r27, 0x03	; 3
    2ee4:	0f d0       	rcall	.+30     	; 0x2f04 <__ultoa_invert+0x86>
    2ee6:	c9 f7       	brne	.-14     	; 0x2eda <__ultoa_invert+0x5c>
    2ee8:	f6 cf       	rjmp	.-20     	; 0x2ed6 <__ultoa_invert+0x58>
    2eea:	46 2f       	mov	r20, r22
    2eec:	4f 70       	andi	r20, 0x0F	; 15
    2eee:	40 5d       	subi	r20, 0xD0	; 208
    2ef0:	4a 33       	cpi	r20, 0x3A	; 58
    2ef2:	18 f0       	brcs	.+6      	; 0x2efa <__ultoa_invert+0x7c>
    2ef4:	49 5d       	subi	r20, 0xD9	; 217
    2ef6:	31 fd       	sbrc	r19, 1
    2ef8:	40 52       	subi	r20, 0x20	; 32
    2efa:	41 93       	st	Z+, r20
    2efc:	02 d0       	rcall	.+4      	; 0x2f02 <__ultoa_invert+0x84>
    2efe:	a9 f7       	brne	.-22     	; 0x2eea <__ultoa_invert+0x6c>
    2f00:	ea cf       	rjmp	.-44     	; 0x2ed6 <__ultoa_invert+0x58>
    2f02:	b4 e0       	ldi	r27, 0x04	; 4
    2f04:	a6 95       	lsr	r26
    2f06:	97 95       	ror	r25
    2f08:	87 95       	ror	r24
    2f0a:	77 95       	ror	r23
    2f0c:	67 95       	ror	r22
    2f0e:	ba 95       	dec	r27
    2f10:	c9 f7       	brne	.-14     	; 0x2f04 <__ultoa_invert+0x86>
    2f12:	00 97       	sbiw	r24, 0x00	; 0
    2f14:	61 05       	cpc	r22, r1
    2f16:	71 05       	cpc	r23, r1
    2f18:	08 95       	ret
    2f1a:	9b 01       	movw	r18, r22
    2f1c:	ac 01       	movw	r20, r24
    2f1e:	0a 2e       	mov	r0, r26
    2f20:	06 94       	lsr	r0
    2f22:	57 95       	ror	r21
    2f24:	47 95       	ror	r20
    2f26:	37 95       	ror	r19
    2f28:	27 95       	ror	r18
    2f2a:	ba 95       	dec	r27
    2f2c:	c9 f7       	brne	.-14     	; 0x2f20 <__ultoa_invert+0xa2>
    2f2e:	62 0f       	add	r22, r18
    2f30:	73 1f       	adc	r23, r19
    2f32:	84 1f       	adc	r24, r20
    2f34:	95 1f       	adc	r25, r21
    2f36:	a0 1d       	adc	r26, r0
    2f38:	08 95       	ret

00002f3a <__ctype_isfalse>:
    2f3a:	99 27       	eor	r25, r25
    2f3c:	88 27       	eor	r24, r24

00002f3e <__ctype_istrue>:
    2f3e:	08 95       	ret

00002f40 <_exit>:
    2f40:	f8 94       	cli

00002f42 <__stop_program>:
    2f42:	ff cf       	rjmp	.-2      	; 0x2f42 <__stop_program>
