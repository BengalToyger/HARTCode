
HARTCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800200  00003096  0000312a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003096  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000106  00800278  00800278  000031a2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000031a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000408  00000000  00000000  00003240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c36  00000000  00000000  00003648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001856  00000000  00000000  0000727e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000022f6  00000000  00000000  00008ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c9c  00000000  00000000  0000adcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d6a  00000000  00000000  0000ba68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002852  00000000  00000000  0000c7d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000358  00000000  00000000  0000f024  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b0 c0       	rjmp	.+352    	; 0x162 <__ctors_end>
       2:	00 00       	nop
       4:	ce c0       	rjmp	.+412    	; 0x1a2 <__bad_interrupt>
       6:	00 00       	nop
       8:	cc c0       	rjmp	.+408    	; 0x1a2 <__bad_interrupt>
       a:	00 00       	nop
       c:	ca c0       	rjmp	.+404    	; 0x1a2 <__bad_interrupt>
       e:	00 00       	nop
      10:	c8 c0       	rjmp	.+400    	; 0x1a2 <__bad_interrupt>
      12:	00 00       	nop
      14:	c6 c0       	rjmp	.+396    	; 0x1a2 <__bad_interrupt>
      16:	00 00       	nop
      18:	c4 c0       	rjmp	.+392    	; 0x1a2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c2 c0       	rjmp	.+388    	; 0x1a2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c0 c0       	rjmp	.+384    	; 0x1a2 <__bad_interrupt>
      22:	00 00       	nop
      24:	be c0       	rjmp	.+380    	; 0x1a2 <__bad_interrupt>
      26:	00 00       	nop
      28:	bc c0       	rjmp	.+376    	; 0x1a2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ba c0       	rjmp	.+372    	; 0x1a2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b8 c0       	rjmp	.+368    	; 0x1a2 <__bad_interrupt>
      32:	00 00       	nop
      34:	b6 c0       	rjmp	.+364    	; 0x1a2 <__bad_interrupt>
      36:	00 00       	nop
      38:	b4 c0       	rjmp	.+360    	; 0x1a2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b2 c0       	rjmp	.+356    	; 0x1a2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b0 c0       	rjmp	.+352    	; 0x1a2 <__bad_interrupt>
      42:	00 00       	nop
      44:	ae c0       	rjmp	.+348    	; 0x1a2 <__bad_interrupt>
      46:	00 00       	nop
      48:	ac c0       	rjmp	.+344    	; 0x1a2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c0       	rjmp	.+340    	; 0x1a2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a8 c0       	rjmp	.+336    	; 0x1a2 <__bad_interrupt>
      52:	00 00       	nop
      54:	a6 c0       	rjmp	.+332    	; 0x1a2 <__bad_interrupt>
      56:	00 00       	nop
      58:	a4 c0       	rjmp	.+328    	; 0x1a2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a2 c0       	rjmp	.+324    	; 0x1a2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a0 c0       	rjmp	.+320    	; 0x1a2 <__bad_interrupt>
      62:	00 00       	nop
      64:	15 c6       	rjmp	.+3114   	; 0xc90 <__vector_25>
      66:	00 00       	nop
      68:	9c c0       	rjmp	.+312    	; 0x1a2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9a c0       	rjmp	.+308    	; 0x1a2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	98 c0       	rjmp	.+304    	; 0x1a2 <__bad_interrupt>
      72:	00 00       	nop
      74:	96 c0       	rjmp	.+300    	; 0x1a2 <__bad_interrupt>
      76:	00 00       	nop
      78:	94 c0       	rjmp	.+296    	; 0x1a2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	92 c0       	rjmp	.+292    	; 0x1a2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	90 c0       	rjmp	.+288    	; 0x1a2 <__bad_interrupt>
      82:	00 00       	nop
      84:	8e c0       	rjmp	.+284    	; 0x1a2 <__bad_interrupt>
      86:	00 00       	nop
      88:	8c c0       	rjmp	.+280    	; 0x1a2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8a c0       	rjmp	.+276    	; 0x1a2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	88 c0       	rjmp	.+272    	; 0x1a2 <__bad_interrupt>
      92:	00 00       	nop
      94:	86 c0       	rjmp	.+268    	; 0x1a2 <__bad_interrupt>
      96:	00 00       	nop
      98:	84 c0       	rjmp	.+264    	; 0x1a2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	82 c0       	rjmp	.+260    	; 0x1a2 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	80 c0       	rjmp	.+256    	; 0x1a2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	7e c0       	rjmp	.+252    	; 0x1a2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7c c0       	rjmp	.+248    	; 0x1a2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7a c0       	rjmp	.+244    	; 0x1a2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	78 c0       	rjmp	.+240    	; 0x1a2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	76 c0       	rjmp	.+236    	; 0x1a2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	74 c0       	rjmp	.+232    	; 0x1a2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	72 c0       	rjmp	.+228    	; 0x1a2 <__bad_interrupt>
      be:	00 00       	nop
      c0:	70 c0       	rjmp	.+224    	; 0x1a2 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	6e c0       	rjmp	.+220    	; 0x1a2 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	6c c0       	rjmp	.+216    	; 0x1a2 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	08 00       	.word	0x0008	; ????
      ce:	00 00       	nop
      d0:	be 92       	st	-X, r11
      d2:	24 49       	sbci	r18, 0x94	; 148
      d4:	12 3e       	cpi	r17, 0xE2	; 226
      d6:	ab aa       	std	Y+51, r10	; 0x33
      d8:	aa 2a       	or	r10, r26
      da:	be cd       	rjmp	.-1156   	; 0xfffffc58 <__eeprom_end+0xff7efc58>
      dc:	cc cc       	rjmp	.-1640   	; 0xfffffa76 <__eeprom_end+0xff7efa76>
      de:	4c 3e       	cpi	r20, 0xEC	; 236
      e0:	00 00       	nop
      e2:	00 80       	ld	r0, Z
      e4:	be ab       	std	Y+54, r27	; 0x36
      e6:	aa aa       	std	Y+50, r10	; 0x32
      e8:	aa 3e       	cpi	r26, 0xEA	; 234
      ea:	00 00       	nop
      ec:	00 00       	nop
      ee:	bf 00       	.word	0x00bf	; ????
      f0:	00 00       	nop
      f2:	80 3f       	cpi	r24, 0xF0	; 240
      f4:	00 00       	nop
      f6:	00 00       	nop
      f8:	00 08       	sbc	r0, r0
      fa:	41 78       	andi	r20, 0x81	; 129
      fc:	d3 bb       	out	0x13, r29	; 19
      fe:	43 87       	std	Z+11, r20	; 0x0b
     100:	d1 13       	cpse	r29, r17
     102:	3d 19       	sub	r19, r13
     104:	0e 3c       	cpi	r16, 0xCE	; 206
     106:	c3 bd       	out	0x23, r28	; 35
     108:	42 82       	std	Z+2, r4	; 0x02
     10a:	ad 2b       	or	r26, r29
     10c:	3e 68       	ori	r19, 0x8E	; 142
     10e:	ec 82       	std	Y+4, r14	; 0x04
     110:	76 be       	out	0x36, r7	; 54
     112:	d9 8f       	std	Y+25, r29	; 0x19
     114:	e1 a9       	ldd	r30, Z+49	; 0x31
     116:	3e 4c       	sbci	r19, 0xCE	; 206
     118:	80 ef       	ldi	r24, 0xF0	; 240
     11a:	ff be       	out	0x3f, r15	; 63
     11c:	01 c4       	rjmp	.+2050   	; 0x920 <CalcPT+0x42>
     11e:	ff 7f       	andi	r31, 0xFF	; 255
     120:	3f 00       	.word	0x003f	; ????
     122:	00 00       	nop
	...

00000126 <__trampolines_end>:
     126:	4e 41       	sbci	r20, 0x1E	; 30
     128:	4e 49       	Address 0x00000128 is out of bounds.
.word	0xffff	; ????

00000129 <pstr_inity>:
     129:	49 4e 49 54 59                                      INITY

0000012e <pstr_inf>:
     12e:	49 4e 46                                            INF

00000131 <pwr_m10>:
     131:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     141:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000149 <pwr_p10>:
     149:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     159:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d1 e2       	ldi	r29, 0x21	; 33
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61
     16e:	00 e0       	ldi	r16, 0x00	; 0
     170:	0c bf       	out	0x3c, r16	; 60

00000172 <__do_copy_data>:
     172:	12 e0       	ldi	r17, 0x02	; 2
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b2 e0       	ldi	r27, 0x02	; 2
     178:	e6 e9       	ldi	r30, 0x96	; 150
     17a:	f0 e3       	ldi	r31, 0x30	; 48
     17c:	00 e0       	ldi	r16, 0x00	; 0
     17e:	0b bf       	out	0x3b, r16	; 59
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x14>
     182:	07 90       	elpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a8 37       	cpi	r26, 0x78	; 120
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0x10>

0000018c <__do_clear_bss>:
     18c:	23 e0       	ldi	r18, 0x03	; 3
     18e:	a8 e7       	ldi	r26, 0x78	; 120
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	ae 37       	cpi	r26, 0x7E	; 126
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	df d0       	rcall	.+446    	; 0x35c <main>
     19e:	0c 94 49 18 	jmp	0x3092	; 0x3092 <_exit>

000001a2 <__bad_interrupt>:
     1a2:	2e cf       	rjmp	.-420    	; 0x0 <__vectors>

000001a4 <readEmatch>:
	FIREPORT &= ~(1 << SEPIGNITE2);
	return;
}

uint8_t readEmatch(void){
	return CHECKPIN;
     1a4:	80 b1       	in	r24, 0x00	; 0
     1a6:	08 95       	ret

000001a8 <Initdt>:
	TCNT1 = 0;
	return;
}

void Resetdt(void){
	TCNT1 = 0;
     1a8:	83 e0       	ldi	r24, 0x03	; 3
     1aa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
     1ae:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     1b2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     1b6:	08 95       	ret

000001b8 <Readdt>:
	return;
}

float Readdt(void){
	float cnt;
	cnt = TCNT1;
     1b8:	e4 e8       	ldi	r30, 0x84	; 132
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	60 81       	ld	r22, Z
     1be:	71 81       	ldd	r23, Z+1	; 0x01
	TCNT1 = 0;
	return;
}

void Resetdt(void){
	TCNT1 = 0;
     1c0:	11 82       	std	Z+1, r1	; 0x01
     1c2:	10 82       	st	Z, r1
	return;
}

float Readdt(void){
	float cnt;
	cnt = TCNT1;
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 1e 11 	call	0x223c	; 0x223c <__floatunsisf>
	Resetdt();
	return cnt/((float)F_CPU*(float)KALMANPRSCL);
     1cc:	20 e0       	ldi	r18, 0x00	; 0
     1ce:	34 e2       	ldi	r19, 0x24	; 36
     1d0:	44 ef       	ldi	r20, 0xF4	; 244
     1d2:	57 e4       	ldi	r21, 0x47	; 71
     1d4:	0c 94 47 10 	jmp	0x208e	; 0x208e <__divsf3>
}
     1d8:	08 95       	ret

000001da <Estimate>:

void Estimate(struct KalmanStruct* estimate, struct AccelStruct* accelData, float altitude){
     1da:	2f 92       	push	r2
     1dc:	3f 92       	push	r3
     1de:	4f 92       	push	r4
     1e0:	5f 92       	push	r5
     1e2:	6f 92       	push	r6
     1e4:	7f 92       	push	r7
     1e6:	8f 92       	push	r8
     1e8:	9f 92       	push	r9
     1ea:	af 92       	push	r10
     1ec:	bf 92       	push	r11
     1ee:	cf 92       	push	r12
     1f0:	df 92       	push	r13
     1f2:	ef 92       	push	r14
     1f4:	ff 92       	push	r15
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
     202:	2c 97       	sbiw	r28, 0x0c	; 12
     204:	0f b6       	in	r0, 0x3f	; 63
     206:	f8 94       	cli
     208:	de bf       	out	0x3e, r29	; 62
     20a:	0f be       	out	0x3f, r0	; 63
     20c:	cd bf       	out	0x3d, r28	; 61
     20e:	1c 01       	movw	r2, r24
     210:	8b 01       	movw	r16, r22
     212:	49 01       	movw	r8, r18
     214:	5a 01       	movw	r10, r20
	struct KalmanStruct propogated;
	float dt;
	dt = Readdt();
     216:	d0 df       	rcall	.-96     	; 0x1b8 <Readdt>
     218:	69 83       	std	Y+1, r22	; 0x01
     21a:	7a 83       	std	Y+2, r23	; 0x02
     21c:	8b 83       	std	Y+3, r24	; 0x03
     21e:	9c 83       	std	Y+4, r25	; 0x04
	propogated.kAltitude = altitude+dt*estimate->kVelocity+(1/2)*(accelData->AccelXYZ[0] - 9.8)*pow(dt,2);
     220:	f1 01       	movw	r30, r2
     222:	c4 80       	ldd	r12, Z+4	; 0x04
     224:	d5 80       	ldd	r13, Z+5	; 0x05
     226:	e6 80       	ldd	r14, Z+6	; 0x06
     228:	f7 80       	ldd	r15, Z+7	; 0x07
     22a:	2d ec       	ldi	r18, 0xCD	; 205
     22c:	3c ec       	ldi	r19, 0xCC	; 204
     22e:	4c e1       	ldi	r20, 0x1C	; 28
     230:	51 e4       	ldi	r21, 0x41	; 65
     232:	f8 01       	movw	r30, r16
     234:	60 81       	ld	r22, Z
     236:	71 81       	ldd	r23, Z+1	; 0x01
     238:	82 81       	ldd	r24, Z+2	; 0x02
     23a:	93 81       	ldd	r25, Z+3	; 0x03
     23c:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__subsf3>
     240:	6d 83       	std	Y+5, r22	; 0x05
     242:	7e 83       	std	Y+6, r23	; 0x06
     244:	8f 83       	std	Y+7, r24	; 0x07
     246:	98 87       	std	Y+8, r25	; 0x08
     248:	29 81       	ldd	r18, Y+1	; 0x01
     24a:	3a 81       	ldd	r19, Y+2	; 0x02
     24c:	4b 81       	ldd	r20, Y+3	; 0x03
     24e:	5c 81       	ldd	r21, Y+4	; 0x04
     250:	c7 01       	movw	r24, r14
     252:	b6 01       	movw	r22, r12
     254:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     258:	a5 01       	movw	r20, r10
     25a:	94 01       	movw	r18, r8
     25c:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__addsf3>
     260:	69 87       	std	Y+9, r22	; 0x09
     262:	7a 87       	std	Y+10, r23	; 0x0a
     264:	8b 87       	std	Y+11, r24	; 0x0b
     266:	9c 87       	std	Y+12, r25	; 0x0c
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	a9 01       	movw	r20, r18
     26e:	6d 81       	ldd	r22, Y+5	; 0x05
     270:	7e 81       	ldd	r23, Y+6	; 0x06
     272:	8f 81       	ldd	r24, Y+7	; 0x07
     274:	98 85       	ldd	r25, Y+8	; 0x08
     276:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     27a:	2b 01       	movw	r4, r22
     27c:	3c 01       	movw	r6, r24
     27e:	29 81       	ldd	r18, Y+1	; 0x01
     280:	3a 81       	ldd	r19, Y+2	; 0x02
     282:	4b 81       	ldd	r20, Y+3	; 0x03
     284:	5c 81       	ldd	r21, Y+4	; 0x04
     286:	ca 01       	movw	r24, r20
     288:	b9 01       	movw	r22, r18
     28a:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     28e:	9b 01       	movw	r18, r22
     290:	ac 01       	movw	r20, r24
     292:	c3 01       	movw	r24, r6
     294:	b2 01       	movw	r22, r4
     296:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     29a:	9b 01       	movw	r18, r22
     29c:	ac 01       	movw	r20, r24
     29e:	69 85       	ldd	r22, Y+9	; 0x09
     2a0:	7a 85       	ldd	r23, Y+10	; 0x0a
     2a2:	8b 85       	ldd	r24, Y+11	; 0x0b
     2a4:	9c 85       	ldd	r25, Y+12	; 0x0c
     2a6:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__addsf3>
     2aa:	2b 01       	movw	r4, r22
     2ac:	3c 01       	movw	r6, r24
	propogated.kVelocity = estimate->kVelocity+dt*(accelData->AccelXYZ[0] - 9.8);
	estimate->kAltitude = propogated.kAltitude + K11*(altitude - propogated.kAltitude);
     2ae:	9b 01       	movw	r18, r22
     2b0:	ac 01       	movw	r20, r24
     2b2:	c5 01       	movw	r24, r10
     2b4:	b4 01       	movw	r22, r8
     2b6:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__subsf3>
     2ba:	4b 01       	movw	r8, r22
     2bc:	5c 01       	movw	r10, r24
     2be:	28 e6       	ldi	r18, 0x68	; 104
     2c0:	33 eb       	ldi	r19, 0xB3	; 179
     2c2:	4a e2       	ldi	r20, 0x2A	; 42
     2c4:	5f e3       	ldi	r21, 0x3F	; 63
     2c6:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     2ca:	9b 01       	movw	r18, r22
     2cc:	ac 01       	movw	r20, r24
     2ce:	c3 01       	movw	r24, r6
     2d0:	b2 01       	movw	r22, r4
     2d2:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__addsf3>
     2d6:	f1 01       	movw	r30, r2
     2d8:	60 83       	st	Z, r22
     2da:	71 83       	std	Z+1, r23	; 0x01
     2dc:	82 83       	std	Z+2, r24	; 0x02
     2de:	93 83       	std	Z+3, r25	; 0x03
void Estimate(struct KalmanStruct* estimate, struct AccelStruct* accelData, float altitude){
	struct KalmanStruct propogated;
	float dt;
	dt = Readdt();
	propogated.kAltitude = altitude+dt*estimate->kVelocity+(1/2)*(accelData->AccelXYZ[0] - 9.8)*pow(dt,2);
	propogated.kVelocity = estimate->kVelocity+dt*(accelData->AccelXYZ[0] - 9.8);
     2e0:	2d 81       	ldd	r18, Y+5	; 0x05
     2e2:	3e 81       	ldd	r19, Y+6	; 0x06
     2e4:	4f 81       	ldd	r20, Y+7	; 0x07
     2e6:	58 85       	ldd	r21, Y+8	; 0x08
     2e8:	69 81       	ldd	r22, Y+1	; 0x01
     2ea:	7a 81       	ldd	r23, Y+2	; 0x02
     2ec:	8b 81       	ldd	r24, Y+3	; 0x03
     2ee:	9c 81       	ldd	r25, Y+4	; 0x04
     2f0:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     2f4:	9b 01       	movw	r18, r22
     2f6:	ac 01       	movw	r20, r24
     2f8:	c7 01       	movw	r24, r14
     2fa:	b6 01       	movw	r22, r12
     2fc:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__addsf3>
     300:	6b 01       	movw	r12, r22
     302:	7c 01       	movw	r14, r24
	estimate->kAltitude = propogated.kAltitude + K11*(altitude - propogated.kAltitude);
	estimate->kVelocity = propogated.kVelocity + K21*(altitude - propogated.kAltitude);
     304:	2f e6       	ldi	r18, 0x6F	; 111
     306:	30 ef       	ldi	r19, 0xF0	; 240
     308:	45 e0       	ldi	r20, 0x05	; 5
     30a:	5d e3       	ldi	r21, 0x3D	; 61
     30c:	c5 01       	movw	r24, r10
     30e:	b4 01       	movw	r22, r8
     310:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     314:	9b 01       	movw	r18, r22
     316:	ac 01       	movw	r20, r24
     318:	c7 01       	movw	r24, r14
     31a:	b6 01       	movw	r22, r12
     31c:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__addsf3>
     320:	f1 01       	movw	r30, r2
     322:	64 83       	std	Z+4, r22	; 0x04
     324:	75 83       	std	Z+5, r23	; 0x05
     326:	86 83       	std	Z+6, r24	; 0x06
     328:	97 83       	std	Z+7, r25	; 0x07
	return;
}
     32a:	2c 96       	adiw	r28, 0x0c	; 12
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	de bf       	out	0x3e, r29	; 62
     332:	0f be       	out	0x3f, r0	; 63
     334:	cd bf       	out	0x3d, r28	; 61
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	1f 91       	pop	r17
     33c:	0f 91       	pop	r16
     33e:	ff 90       	pop	r15
     340:	ef 90       	pop	r14
     342:	df 90       	pop	r13
     344:	cf 90       	pop	r12
     346:	bf 90       	pop	r11
     348:	af 90       	pop	r10
     34a:	9f 90       	pop	r9
     34c:	8f 90       	pop	r8
     34e:	7f 90       	pop	r7
     350:	6f 90       	pop	r6
     352:	5f 90       	pop	r5
     354:	4f 90       	pop	r4
     356:	3f 90       	pop	r3
     358:	2f 90       	pop	r2
     35a:	08 95       	ret

0000035c <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

int main(void)
{
	stateMain();
     35c:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <stateMain>
}
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	08 95       	ret

00000366 <AccelSelect>:
#include "MPU6000.h"

void AccelSelect(void){
	SPISetMode(MODE0);
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <SPISetMode>
	PORTB = PORTB & ~(1<<CSACCEL);
     36c:	2d 98       	cbi	0x05, 5	; 5
	PORTD = PORTD | (1<<CSMAG);
     36e:	5f 9a       	sbi	0x0b, 7	; 11
	PORTB = PORTB | (1<<CSALT);
     370:	2e 9a       	sbi	0x05, 6	; 5
     372:	08 95       	ret

00000374 <AccelRelease>:
	return;
}

void AccelRelease(void){
	PORTB = PORTB | (1<<CSACCEL);
     374:	2d 9a       	sbi	0x05, 5	; 5
     376:	08 95       	ret

00000378 <WriteAccelerometer>:
	return;
}

void WriteAccelerometer(uint8_t Address, uint8_t WriteVal){
     378:	1f 93       	push	r17
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	1f 92       	push	r1
     380:	cd b7       	in	r28, 0x3d	; 61
     382:	de b7       	in	r29, 0x3e	; 62
     384:	16 2f       	mov	r17, r22
	uint8_t volatile WAddress = Address & ACCELWRITE;
     386:	8f 77       	andi	r24, 0x7F	; 127
     388:	89 83       	std	Y+1, r24	; 0x01
	AccelSelect();
     38a:	ed df       	rcall	.-38     	; 0x366 <AccelSelect>
	SPIMasterTransmit(WAddress);
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <SPIMasterTransmit>
	SPIMasterTransmit(WriteVal);
     392:	81 2f       	mov	r24, r17
     394:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <SPIMasterTransmit>
	AccelRelease();
     398:	ed df       	rcall	.-38     	; 0x374 <AccelRelease>
	return;
}
     39a:	0f 90       	pop	r0
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	1f 91       	pop	r17
     3a2:	08 95       	ret

000003a4 <ReadAccelerometer>:

uint8_t ReadAccelerometer(uint8_t Address){
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	1f 92       	push	r1
     3aa:	1f 92       	push	r1
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
	uint8_t volatile RAddress = Address | ACCELREAD;
     3b0:	80 68       	ori	r24, 0x80	; 128
     3b2:	89 83       	std	Y+1, r24	; 0x01
	uint8_t volatile datum;
	AccelSelect();
     3b4:	d8 df       	rcall	.-80     	; 0x366 <AccelSelect>
	SPIMasterTransmit(RAddress);
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <SPIMasterTransmit>
	datum = SPIRead32Bit(1);
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <SPIRead32Bit>
     3c2:	6a 83       	std	Y+2, r22	; 0x02
	AccelRelease();
     3c4:	d7 df       	rcall	.-82     	; 0x374 <AccelRelease>
	return datum;
     3c6:	8a 81       	ldd	r24, Y+2	; 0x02
}
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	08 95       	ret

000003d2 <AccReadZ>:
	_delay_ms(10);
	WriteAccelerometer(GYROCONFIG,FS1000DEG);
	return;
}

int16_t AccReadZ(void){
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	00 d0       	rcall	.+0      	; 0x3d8 <AccReadZ+0x6>
     3d8:	00 d0       	rcall	.+0      	; 0x3da <AccReadZ+0x8>
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
	uint16_t volatile ValH = 0;
     3de:	1a 82       	std	Y+2, r1	; 0x02
     3e0:	19 82       	std	Y+1, r1	; 0x01
	uint16_t volatile ValL = 0;
     3e2:	1c 82       	std	Y+4, r1	; 0x04
     3e4:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t volatile Val = 0;
     3e6:	1e 82       	std	Y+6, r1	; 0x06
     3e8:	1d 82       	std	Y+5, r1	; 0x05
	ValH = ReadAccelerometer(ACCZOUTH);
     3ea:	8f e3       	ldi	r24, 0x3F	; 63
     3ec:	db df       	rcall	.-74     	; 0x3a4 <ReadAccelerometer>
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	9a 83       	std	Y+2, r25	; 0x02
     3f2:	89 83       	std	Y+1, r24	; 0x01
	ValL = ReadAccelerometer(ACCZOUTL);
     3f4:	80 e4       	ldi	r24, 0x40	; 64
     3f6:	d6 df       	rcall	.-84     	; 0x3a4 <ReadAccelerometer>
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	9c 83       	std	Y+4, r25	; 0x04
     3fc:	8b 83       	std	Y+3, r24	; 0x03
	Val = (ValH << 8) | ValL;
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	9a 81       	ldd	r25, Y+2	; 0x02
     402:	2b 81       	ldd	r18, Y+3	; 0x03
     404:	3c 81       	ldd	r19, Y+4	; 0x04
     406:	98 2f       	mov	r25, r24
     408:	88 27       	eor	r24, r24
     40a:	82 2b       	or	r24, r18
     40c:	93 2b       	or	r25, r19
     40e:	9e 83       	std	Y+6, r25	; 0x06
     410:	8d 83       	std	Y+5, r24	; 0x05
	return Val;
     412:	8d 81       	ldd	r24, Y+5	; 0x05
     414:	9e 81       	ldd	r25, Y+6	; 0x06
}
     416:	26 96       	adiw	r28, 0x06	; 6
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	f8 94       	cli
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	0f be       	out	0x3f, r0	; 63
     420:	cd bf       	out	0x3d, r28	; 61
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	08 95       	ret

00000428 <AccReadY>:

int16_t AccReadY(void){
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	00 d0       	rcall	.+0      	; 0x42e <AccReadY+0x6>
     42e:	00 d0       	rcall	.+0      	; 0x430 <AccReadY+0x8>
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
	uint16_t volatile ValH = 0;
     434:	1a 82       	std	Y+2, r1	; 0x02
     436:	19 82       	std	Y+1, r1	; 0x01
	uint16_t volatile ValL = 0;
     438:	1c 82       	std	Y+4, r1	; 0x04
     43a:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t volatile Val = 0;
     43c:	1e 82       	std	Y+6, r1	; 0x06
     43e:	1d 82       	std	Y+5, r1	; 0x05
	ValH = ReadAccelerometer(ACCYOUTH);
     440:	8d e3       	ldi	r24, 0x3D	; 61
     442:	b0 df       	rcall	.-160    	; 0x3a4 <ReadAccelerometer>
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	9a 83       	std	Y+2, r25	; 0x02
     448:	89 83       	std	Y+1, r24	; 0x01
	ValL = ReadAccelerometer(ACCYOUTL);
     44a:	8e e3       	ldi	r24, 0x3E	; 62
     44c:	ab df       	rcall	.-170    	; 0x3a4 <ReadAccelerometer>
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	8b 83       	std	Y+3, r24	; 0x03
	Val = (ValH << 8) | ValL;
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	9a 81       	ldd	r25, Y+2	; 0x02
     458:	2b 81       	ldd	r18, Y+3	; 0x03
     45a:	3c 81       	ldd	r19, Y+4	; 0x04
     45c:	98 2f       	mov	r25, r24
     45e:	88 27       	eor	r24, r24
     460:	82 2b       	or	r24, r18
     462:	93 2b       	or	r25, r19
     464:	9e 83       	std	Y+6, r25	; 0x06
     466:	8d 83       	std	Y+5, r24	; 0x05
	return Val;
     468:	8d 81       	ldd	r24, Y+5	; 0x05
     46a:	9e 81       	ldd	r25, Y+6	; 0x06
}
     46c:	26 96       	adiw	r28, 0x06	; 6
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	de bf       	out	0x3e, r29	; 62
     474:	0f be       	out	0x3f, r0	; 63
     476:	cd bf       	out	0x3d, r28	; 61
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	08 95       	ret

0000047e <AccReadX>:

int16_t AccReadX(void){
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	00 d0       	rcall	.+0      	; 0x484 <AccReadX+0x6>
     484:	00 d0       	rcall	.+0      	; 0x486 <AccReadX+0x8>
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
	uint16_t volatile ValH = 0;
     48a:	1a 82       	std	Y+2, r1	; 0x02
     48c:	19 82       	std	Y+1, r1	; 0x01
	uint16_t volatile ValL = 0;
     48e:	1c 82       	std	Y+4, r1	; 0x04
     490:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t volatile Val = 0;
     492:	1e 82       	std	Y+6, r1	; 0x06
     494:	1d 82       	std	Y+5, r1	; 0x05
	ValH = ReadAccelerometer(ACCXOUTH);
     496:	8b e3       	ldi	r24, 0x3B	; 59
     498:	85 df       	rcall	.-246    	; 0x3a4 <ReadAccelerometer>
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	9a 83       	std	Y+2, r25	; 0x02
     49e:	89 83       	std	Y+1, r24	; 0x01
	ValL = ReadAccelerometer(ACCXOUTL);
     4a0:	8c e3       	ldi	r24, 0x3C	; 60
     4a2:	80 df       	rcall	.-256    	; 0x3a4 <ReadAccelerometer>
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	9c 83       	std	Y+4, r25	; 0x04
     4a8:	8b 83       	std	Y+3, r24	; 0x03
	Val = (ValH << 8) | ValL;
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	9a 81       	ldd	r25, Y+2	; 0x02
     4ae:	2b 81       	ldd	r18, Y+3	; 0x03
     4b0:	3c 81       	ldd	r19, Y+4	; 0x04
     4b2:	98 2f       	mov	r25, r24
     4b4:	88 27       	eor	r24, r24
     4b6:	82 2b       	or	r24, r18
     4b8:	93 2b       	or	r25, r19
     4ba:	9e 83       	std	Y+6, r25	; 0x06
     4bc:	8d 83       	std	Y+5, r24	; 0x05
	return Val;
     4be:	8d 81       	ldd	r24, Y+5	; 0x05
     4c0:	9e 81       	ldd	r25, Y+6	; 0x06
}
     4c2:	26 96       	adiw	r28, 0x06	; 6
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	de bf       	out	0x3e, r29	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	cd bf       	out	0x3d, r28	; 61
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	08 95       	ret

000004d4 <GyroReadZ>:

int16_t GyroReadZ(void){
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	00 d0       	rcall	.+0      	; 0x4da <GyroReadZ+0x6>
     4da:	00 d0       	rcall	.+0      	; 0x4dc <GyroReadZ+0x8>
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
	uint16_t volatile ValH = 0;
     4e0:	1a 82       	std	Y+2, r1	; 0x02
     4e2:	19 82       	std	Y+1, r1	; 0x01
	uint16_t volatile ValL = 0;
     4e4:	1c 82       	std	Y+4, r1	; 0x04
     4e6:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t volatile Val = 0;
     4e8:	1e 82       	std	Y+6, r1	; 0x06
     4ea:	1d 82       	std	Y+5, r1	; 0x05
	ValH = ReadAccelerometer(GYROZOUTH);
     4ec:	87 e4       	ldi	r24, 0x47	; 71
     4ee:	5a df       	rcall	.-332    	; 0x3a4 <ReadAccelerometer>
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	9a 83       	std	Y+2, r25	; 0x02
     4f4:	89 83       	std	Y+1, r24	; 0x01
	ValL = ReadAccelerometer(GYROZOUTL);
     4f6:	88 e4       	ldi	r24, 0x48	; 72
     4f8:	55 df       	rcall	.-342    	; 0x3a4 <ReadAccelerometer>
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	9c 83       	std	Y+4, r25	; 0x04
     4fe:	8b 83       	std	Y+3, r24	; 0x03
	Val = (ValH << 8) | ValL;
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	9a 81       	ldd	r25, Y+2	; 0x02
     504:	2b 81       	ldd	r18, Y+3	; 0x03
     506:	3c 81       	ldd	r19, Y+4	; 0x04
     508:	98 2f       	mov	r25, r24
     50a:	88 27       	eor	r24, r24
     50c:	82 2b       	or	r24, r18
     50e:	93 2b       	or	r25, r19
     510:	9e 83       	std	Y+6, r25	; 0x06
     512:	8d 83       	std	Y+5, r24	; 0x05
	return Val;
     514:	8d 81       	ldd	r24, Y+5	; 0x05
     516:	9e 81       	ldd	r25, Y+6	; 0x06
}
     518:	26 96       	adiw	r28, 0x06	; 6
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	f8 94       	cli
     51e:	de bf       	out	0x3e, r29	; 62
     520:	0f be       	out	0x3f, r0	; 63
     522:	cd bf       	out	0x3d, r28	; 61
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <GyroReadY>:

int16_t GyroReadY(void){
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	00 d0       	rcall	.+0      	; 0x530 <GyroReadY+0x6>
     530:	00 d0       	rcall	.+0      	; 0x532 <GyroReadY+0x8>
     532:	cd b7       	in	r28, 0x3d	; 61
     534:	de b7       	in	r29, 0x3e	; 62
	uint16_t volatile ValH = 0;
     536:	1a 82       	std	Y+2, r1	; 0x02
     538:	19 82       	std	Y+1, r1	; 0x01
	uint16_t volatile ValL = 0;
     53a:	1c 82       	std	Y+4, r1	; 0x04
     53c:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t volatile Val = 0;
     53e:	1e 82       	std	Y+6, r1	; 0x06
     540:	1d 82       	std	Y+5, r1	; 0x05
	ValH = ReadAccelerometer(GYROYOUTH);
     542:	85 e4       	ldi	r24, 0x45	; 69
     544:	2f df       	rcall	.-418    	; 0x3a4 <ReadAccelerometer>
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	9a 83       	std	Y+2, r25	; 0x02
     54a:	89 83       	std	Y+1, r24	; 0x01
	ValL = ReadAccelerometer(GYROYOUTL);
     54c:	86 e4       	ldi	r24, 0x46	; 70
     54e:	2a df       	rcall	.-428    	; 0x3a4 <ReadAccelerometer>
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	9c 83       	std	Y+4, r25	; 0x04
     554:	8b 83       	std	Y+3, r24	; 0x03
	Val = (ValH << 8) | ValL;
     556:	89 81       	ldd	r24, Y+1	; 0x01
     558:	9a 81       	ldd	r25, Y+2	; 0x02
     55a:	2b 81       	ldd	r18, Y+3	; 0x03
     55c:	3c 81       	ldd	r19, Y+4	; 0x04
     55e:	98 2f       	mov	r25, r24
     560:	88 27       	eor	r24, r24
     562:	82 2b       	or	r24, r18
     564:	93 2b       	or	r25, r19
     566:	9e 83       	std	Y+6, r25	; 0x06
     568:	8d 83       	std	Y+5, r24	; 0x05
	return Val;
     56a:	8d 81       	ldd	r24, Y+5	; 0x05
     56c:	9e 81       	ldd	r25, Y+6	; 0x06
}
     56e:	26 96       	adiw	r28, 0x06	; 6
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	f8 94       	cli
     574:	de bf       	out	0x3e, r29	; 62
     576:	0f be       	out	0x3f, r0	; 63
     578:	cd bf       	out	0x3d, r28	; 61
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	08 95       	ret

00000580 <GyroReadX>:

int16_t GyroReadX(void){
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	00 d0       	rcall	.+0      	; 0x586 <GyroReadX+0x6>
     586:	00 d0       	rcall	.+0      	; 0x588 <GyroReadX+0x8>
     588:	cd b7       	in	r28, 0x3d	; 61
     58a:	de b7       	in	r29, 0x3e	; 62
	uint16_t volatile ValH = 0;
     58c:	1a 82       	std	Y+2, r1	; 0x02
     58e:	19 82       	std	Y+1, r1	; 0x01
	uint16_t volatile ValL = 0;
     590:	1c 82       	std	Y+4, r1	; 0x04
     592:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t volatile Val = 0;
     594:	1e 82       	std	Y+6, r1	; 0x06
     596:	1d 82       	std	Y+5, r1	; 0x05
	ValH = ReadAccelerometer(GYROXOUTH);
     598:	83 e4       	ldi	r24, 0x43	; 67
     59a:	04 df       	rcall	.-504    	; 0x3a4 <ReadAccelerometer>
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	9a 83       	std	Y+2, r25	; 0x02
     5a0:	89 83       	std	Y+1, r24	; 0x01
	ValL = ReadAccelerometer(GYROXOUTL);
     5a2:	84 e4       	ldi	r24, 0x44	; 68
     5a4:	ff de       	rcall	.-514    	; 0x3a4 <ReadAccelerometer>
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	9c 83       	std	Y+4, r25	; 0x04
     5aa:	8b 83       	std	Y+3, r24	; 0x03
	Val = (ValH << 8) | ValL;
     5ac:	89 81       	ldd	r24, Y+1	; 0x01
     5ae:	9a 81       	ldd	r25, Y+2	; 0x02
     5b0:	2b 81       	ldd	r18, Y+3	; 0x03
     5b2:	3c 81       	ldd	r19, Y+4	; 0x04
     5b4:	98 2f       	mov	r25, r24
     5b6:	88 27       	eor	r24, r24
     5b8:	82 2b       	or	r24, r18
     5ba:	93 2b       	or	r25, r19
     5bc:	9e 83       	std	Y+6, r25	; 0x06
     5be:	8d 83       	std	Y+5, r24	; 0x05
	return Val;
     5c0:	8d 81       	ldd	r24, Y+5	; 0x05
     5c2:	9e 81       	ldd	r25, Y+6	; 0x06
}
     5c4:	26 96       	adiw	r28, 0x06	; 6
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	de bf       	out	0x3e, r29	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	cd bf       	out	0x3d, r28	; 61
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	08 95       	ret

000005d6 <GetAccelGyroXYZ>:

void GetAccelGyroXYZ(struct AccelStruct* AccelData){
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	1f 92       	push	r1
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
     5e8:	7c 01       	movw	r14, r24
	uint8_t volatile i = 0;
     5ea:	19 82       	std	Y+1, r1	; 0x01
	AccelData->AccelXYZ[0] = AccReadX();
     5ec:	48 df       	rcall	.-368    	; 0x47e <AccReadX>
     5ee:	bc 01       	movw	r22, r24
     5f0:	99 0f       	add	r25, r25
     5f2:	88 0b       	sbc	r24, r24
     5f4:	99 0b       	sbc	r25, r25
     5f6:	0e 94 20 11 	call	0x2240	; 0x2240 <__floatsisf>
     5fa:	f7 01       	movw	r30, r14
     5fc:	60 83       	st	Z, r22
     5fe:	71 83       	std	Z+1, r23	; 0x01
     600:	82 83       	std	Z+2, r24	; 0x02
     602:	93 83       	std	Z+3, r25	; 0x03
	AccelData->AccelXYZ[1] = AccReadY();
     604:	11 df       	rcall	.-478    	; 0x428 <AccReadY>
     606:	bc 01       	movw	r22, r24
     608:	99 0f       	add	r25, r25
     60a:	88 0b       	sbc	r24, r24
     60c:	99 0b       	sbc	r25, r25
     60e:	0e 94 20 11 	call	0x2240	; 0x2240 <__floatsisf>
     612:	f7 01       	movw	r30, r14
     614:	64 83       	std	Z+4, r22	; 0x04
     616:	75 83       	std	Z+5, r23	; 0x05
     618:	86 83       	std	Z+6, r24	; 0x06
     61a:	97 83       	std	Z+7, r25	; 0x07
	AccelData->AccelXYZ[2] = AccReadZ();
     61c:	da de       	rcall	.-588    	; 0x3d2 <AccReadZ>
     61e:	bc 01       	movw	r22, r24
     620:	99 0f       	add	r25, r25
     622:	88 0b       	sbc	r24, r24
     624:	99 0b       	sbc	r25, r25
     626:	0e 94 20 11 	call	0x2240	; 0x2240 <__floatsisf>
     62a:	f7 01       	movw	r30, r14
     62c:	60 87       	std	Z+8, r22	; 0x08
     62e:	71 87       	std	Z+9, r23	; 0x09
     630:	82 87       	std	Z+10, r24	; 0x0a
     632:	93 87       	std	Z+11, r25	; 0x0b
	AccelData->GyroXYZ[0] = GyroReadX();
     634:	a5 df       	rcall	.-182    	; 0x580 <GyroReadX>
     636:	bc 01       	movw	r22, r24
     638:	99 0f       	add	r25, r25
     63a:	88 0b       	sbc	r24, r24
     63c:	99 0b       	sbc	r25, r25
     63e:	0e 94 20 11 	call	0x2240	; 0x2240 <__floatsisf>
     642:	f7 01       	movw	r30, r14
     644:	64 87       	std	Z+12, r22	; 0x0c
     646:	75 87       	std	Z+13, r23	; 0x0d
     648:	86 87       	std	Z+14, r24	; 0x0e
     64a:	97 87       	std	Z+15, r25	; 0x0f
	AccelData->GyroXYZ[1] = GyroReadY();
     64c:	6e df       	rcall	.-292    	; 0x52a <GyroReadY>
     64e:	bc 01       	movw	r22, r24
     650:	99 0f       	add	r25, r25
     652:	88 0b       	sbc	r24, r24
     654:	99 0b       	sbc	r25, r25
     656:	0e 94 20 11 	call	0x2240	; 0x2240 <__floatsisf>
     65a:	f7 01       	movw	r30, r14
     65c:	60 8b       	std	Z+16, r22	; 0x10
     65e:	71 8b       	std	Z+17, r23	; 0x11
     660:	82 8b       	std	Z+18, r24	; 0x12
     662:	93 8b       	std	Z+19, r25	; 0x13
	AccelData->GyroXYZ[2] = GyroReadZ();
     664:	37 df       	rcall	.-402    	; 0x4d4 <GyroReadZ>
     666:	bc 01       	movw	r22, r24
     668:	99 0f       	add	r25, r25
     66a:	88 0b       	sbc	r24, r24
     66c:	99 0b       	sbc	r25, r25
     66e:	0e 94 20 11 	call	0x2240	; 0x2240 <__floatsisf>
     672:	f7 01       	movw	r30, r14
     674:	64 8b       	std	Z+20, r22	; 0x14
     676:	75 8b       	std	Z+21, r23	; 0x15
     678:	86 8b       	std	Z+22, r24	; 0x16
     67a:	97 8b       	std	Z+23, r25	; 0x17
	for (i; i<3; i++){
     67c:	89 81       	ldd	r24, Y+1	; 0x01
     67e:	89 81       	ldd	r24, Y+1	; 0x01
     680:	83 30       	cpi	r24, 0x03	; 3
     682:	08 f0       	brcs	.+2      	; 0x686 <GetAccelGyroXYZ+0xb0>
     684:	46 c0       	rjmp	.+140    	; 0x712 <GetAccelGyroXYZ+0x13c>
		AccelData->AccelXYZ[i] = ACCELCON*AccelData->AccelXYZ[i];
     686:	99 81       	ldd	r25, Y+1	; 0x01
     688:	89 81       	ldd	r24, Y+1	; 0x01
     68a:	87 01       	movw	r16, r14
     68c:	f4 e0       	ldi	r31, 0x04	; 4
     68e:	9f 9f       	mul	r25, r31
     690:	00 0d       	add	r16, r0
     692:	11 1d       	adc	r17, r1
     694:	11 24       	eor	r1, r1
     696:	f7 01       	movw	r30, r14
     698:	24 e0       	ldi	r18, 0x04	; 4
     69a:	82 9f       	mul	r24, r18
     69c:	e0 0d       	add	r30, r0
     69e:	f1 1d       	adc	r31, r1
     6a0:	11 24       	eor	r1, r1
     6a2:	2d ec       	ldi	r18, 0xCD	; 205
     6a4:	3c ec       	ldi	r19, 0xCC	; 204
     6a6:	4c e9       	ldi	r20, 0x9C	; 156
     6a8:	5b eb       	ldi	r21, 0xBB	; 187
     6aa:	60 81       	ld	r22, Z
     6ac:	71 81       	ldd	r23, Z+1	; 0x01
     6ae:	82 81       	ldd	r24, Z+2	; 0x02
     6b0:	93 81       	ldd	r25, Z+3	; 0x03
     6b2:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     6b6:	f8 01       	movw	r30, r16
     6b8:	60 83       	st	Z, r22
     6ba:	71 83       	std	Z+1, r23	; 0x01
     6bc:	82 83       	std	Z+2, r24	; 0x02
     6be:	93 83       	std	Z+3, r25	; 0x03
		AccelData->GyroXYZ[i] = GYROCON*AccelData->GyroXYZ[i];
     6c0:	09 81       	ldd	r16, Y+1	; 0x01
     6c2:	e9 81       	ldd	r30, Y+1	; 0x01
     6c4:	10 e0       	ldi	r17, 0x00	; 0
     6c6:	0d 5f       	subi	r16, 0xFD	; 253
     6c8:	1f 4f       	sbci	r17, 0xFF	; 255
     6ca:	00 0f       	add	r16, r16
     6cc:	11 1f       	adc	r17, r17
     6ce:	00 0f       	add	r16, r16
     6d0:	11 1f       	adc	r17, r17
     6d2:	0e 0d       	add	r16, r14
     6d4:	1f 1d       	adc	r17, r15
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	33 96       	adiw	r30, 0x03	; 3
     6da:	ee 0f       	add	r30, r30
     6dc:	ff 1f       	adc	r31, r31
     6de:	ee 0f       	add	r30, r30
     6e0:	ff 1f       	adc	r31, r31
     6e2:	ee 0d       	add	r30, r14
     6e4:	ff 1d       	adc	r31, r15
     6e6:	20 e9       	ldi	r18, 0x90	; 144
     6e8:	31 ec       	ldi	r19, 0xC1	; 193
     6ea:	49 ef       	ldi	r20, 0xF9	; 249
     6ec:	5c e3       	ldi	r21, 0x3C	; 60
     6ee:	60 81       	ld	r22, Z
     6f0:	71 81       	ldd	r23, Z+1	; 0x01
     6f2:	82 81       	ldd	r24, Z+2	; 0x02
     6f4:	93 81       	ldd	r25, Z+3	; 0x03
     6f6:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     6fa:	f8 01       	movw	r30, r16
     6fc:	60 83       	st	Z, r22
     6fe:	71 83       	std	Z+1, r23	; 0x01
     700:	82 83       	std	Z+2, r24	; 0x02
     702:	93 83       	std	Z+3, r25	; 0x03
	AccelData->AccelXYZ[1] = AccReadY();
	AccelData->AccelXYZ[2] = AccReadZ();
	AccelData->GyroXYZ[0] = GyroReadX();
	AccelData->GyroXYZ[1] = GyroReadY();
	AccelData->GyroXYZ[2] = GyroReadZ();
	for (i; i<3; i++){
     704:	89 81       	ldd	r24, Y+1	; 0x01
     706:	8f 5f       	subi	r24, 0xFF	; 255
     708:	89 83       	std	Y+1, r24	; 0x01
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	83 30       	cpi	r24, 0x03	; 3
     70e:	08 f4       	brcc	.+2      	; 0x712 <GetAccelGyroXYZ+0x13c>
     710:	ba cf       	rjmp	.-140    	; 0x686 <GetAccelGyroXYZ+0xb0>
		AccelData->AccelXYZ[i] = ACCELCON*AccelData->AccelXYZ[i];
		AccelData->GyroXYZ[i] = GYROCON*AccelData->GyroXYZ[i];
	}
	return;
}
     712:	0f 90       	pop	r0
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	ff 90       	pop	r15
     71e:	ef 90       	pop	r14
     720:	08 95       	ret

00000722 <ResetAccelerometer>:

void ResetAccelerometer(void){
	WriteAccelerometer(PWRMNGMNT1,RESET);
     722:	60 e8       	ldi	r22, 0x80	; 128
     724:	8b e6       	ldi	r24, 0x6B	; 107
     726:	28 de       	rcall	.-944    	; 0x378 <WriteAccelerometer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     728:	8f e1       	ldi	r24, 0x1F	; 31
     72a:	9e e4       	ldi	r25, 0x4E	; 78
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <ResetAccelerometer+0xa>
     730:	00 c0       	rjmp	.+0      	; 0x732 <ResetAccelerometer+0x10>
     732:	00 00       	nop
	_delay_ms(10);
	WriteAccelerometer(SIGNALRESET,SRESET);
     734:	67 e0       	ldi	r22, 0x07	; 7
     736:	88 e6       	ldi	r24, 0x68	; 104
     738:	1f de       	rcall	.-962    	; 0x378 <WriteAccelerometer>
     73a:	8f e1       	ldi	r24, 0x1F	; 31
     73c:	9e e4       	ldi	r25, 0x4E	; 78
     73e:	01 97       	sbiw	r24, 0x01	; 1
     740:	f1 f7       	brne	.-4      	; 0x73e <ResetAccelerometer+0x1c>
     742:	00 c0       	rjmp	.+0      	; 0x744 <ResetAccelerometer+0x22>
     744:	00 00       	nop
	_delay_ms(10);
	WriteAccelerometer(SIGNALRESET,0);
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	88 e6       	ldi	r24, 0x68	; 104
     74a:	16 ce       	rjmp	.-980    	; 0x378 <WriteAccelerometer>
     74c:	08 95       	ret

0000074e <InitAccel>:
	datum = SPIRead32Bit(1);
	AccelRelease();
	return datum;
}

void InitAccel(void){
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	1f 92       	push	r1
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
	uint8_t volatile val;
	DDRB = DDRB | (1<<CSACCEL);
     758:	25 9a       	sbi	0x04, 5	; 4
	ResetAccelerometer();
     75a:	e3 df       	rcall	.-58     	; 0x722 <ResetAccelerometer>
     75c:	8f ec       	ldi	r24, 0xCF	; 207
     75e:	97 e0       	ldi	r25, 0x07	; 7
     760:	01 97       	sbiw	r24, 0x01	; 1
     762:	f1 f7       	brne	.-4      	; 0x760 <InitAccel+0x12>
     764:	00 c0       	rjmp	.+0      	; 0x766 <InitAccel+0x18>
     766:	00 00       	nop
	_delay_ms(1);
	WriteAccelerometer(USERCTRL,I2CIFDIS);
     768:	60 e1       	ldi	r22, 0x10	; 16
     76a:	8a e6       	ldi	r24, 0x6A	; 106
     76c:	05 de       	rcall	.-1014   	; 0x378 <WriteAccelerometer>
	WriteAccelerometer(PWRMNGMNT1,0x00);
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	8b e6       	ldi	r24, 0x6B	; 107
     772:	02 de       	rcall	.-1020   	; 0x378 <WriteAccelerometer>
	val = ReadAccelerometer(0x75);
     774:	85 e7       	ldi	r24, 0x75	; 117
     776:	16 de       	rcall	.-980    	; 0x3a4 <ReadAccelerometer>
     778:	89 83       	std	Y+1, r24	; 0x01
	val = val >> 1;
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	86 95       	lsr	r24
     77e:	89 83       	std	Y+1, r24	; 0x01
     780:	8f e1       	ldi	r24, 0x1F	; 31
     782:	9e e4       	ldi	r25, 0x4E	; 78
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	f1 f7       	brne	.-4      	; 0x784 <InitAccel+0x36>
     788:	00 c0       	rjmp	.+0      	; 0x78a <InitAccel+0x3c>
     78a:	00 00       	nop
	_delay_ms(10);
	WriteAccelerometer(ACCELCONFIG,AFS16G);
     78c:	68 e1       	ldi	r22, 0x18	; 24
     78e:	8c e1       	ldi	r24, 0x1C	; 28
     790:	f3 dd       	rcall	.-1050   	; 0x378 <WriteAccelerometer>
     792:	8f e1       	ldi	r24, 0x1F	; 31
     794:	9e e4       	ldi	r25, 0x4E	; 78
     796:	01 97       	sbiw	r24, 0x01	; 1
     798:	f1 f7       	brne	.-4      	; 0x796 <InitAccel+0x48>
     79a:	00 c0       	rjmp	.+0      	; 0x79c <InitAccel+0x4e>
     79c:	00 00       	nop
	_delay_ms(10);
	WriteAccelerometer(GYROCONFIG,FS1000DEG);
     79e:	60 e1       	ldi	r22, 0x10	; 16
     7a0:	8b e1       	ldi	r24, 0x1B	; 27
     7a2:	ea dd       	rcall	.-1068   	; 0x378 <WriteAccelerometer>
	return;
}
     7a4:	0f 90       	pop	r0
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	08 95       	ret

000007ac <AltSelect>:
#include "MS5607.h"

void AltSelect(void){
	SPISetMode(MODE0);
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <SPISetMode>
	PORTB = PORTB | (1<<CSACCEL);
     7b2:	2d 9a       	sbi	0x05, 5	; 5
	PORTD = PORTD | (1<<CSMAG);
     7b4:	5f 9a       	sbi	0x0b, 7	; 11
	PORTB = PORTB & ~(1<<CSALT);
     7b6:	2e 98       	cbi	0x05, 6	; 5
     7b8:	08 95       	ret

000007ba <AltRelease>:
	return;
}

void AltRelease(void){
	PORTB = PORTB | (1<<CSALT);
     7ba:	2e 9a       	sbi	0x05, 6	; 5
     7bc:	08 95       	ret

000007be <AltReset>:
	return;
}

void AltReset(void){
	AltSelect();
     7be:	f6 df       	rcall	.-20     	; 0x7ac <AltSelect>
	SPIMasterTransmit(ALTRESET);
     7c0:	8e e1       	ldi	r24, 0x1E	; 30
     7c2:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <SPIMasterTransmit>
     7c6:	8f e6       	ldi	r24, 0x6F	; 111
     7c8:	97 e1       	ldi	r25, 0x17	; 23
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	f1 f7       	brne	.-4      	; 0x7ca <AltReset+0xc>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <AltReset+0x12>
     7d0:	00 00       	nop
	_delay_ms(3);
	AltRelease();
     7d2:	f3 cf       	rjmp	.-26     	; 0x7ba <AltRelease>
     7d4:	08 95       	ret

000007d6 <AltReadProm>:
	return;
}

uint16_t AltReadProm(uint8_t PromAddr){
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	1f 92       	push	r1
     7de:	1f 92       	push	r1
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
     7e4:	18 2f       	mov	r17, r24
	uint16_t volatile ReadByte;
	AltSelect();
     7e6:	e2 df       	rcall	.-60     	; 0x7ac <AltSelect>
	SPIMasterTransmit(PromAddr);
     7e8:	81 2f       	mov	r24, r17
     7ea:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <SPIMasterTransmit>
	ReadByte = SPIRead32Bit(2);
     7ee:	82 e0       	ldi	r24, 0x02	; 2
     7f0:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <SPIRead32Bit>
     7f4:	7a 83       	std	Y+2, r23	; 0x02
     7f6:	69 83       	std	Y+1, r22	; 0x01
	AltRelease();
     7f8:	e0 df       	rcall	.-64     	; 0x7ba <AltRelease>
	return ReadByte;
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	9a 81       	ldd	r25, Y+2	; 0x02
}
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	08 95       	ret

0000080a <AltReadCalCoeff>:

void AltReadCalCoeff(uint16_t* CalCoeff){
     80a:	ef 92       	push	r14
     80c:	ff 92       	push	r15
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	1f 92       	push	r1
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	7c 01       	movw	r14, r24
	uint8_t volatile PromOffset = 1;
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	89 83       	std	Y+1, r24	; 0x01
	for (PromOffset; PromOffset < 8; PromOffset++){
     822:	89 81       	ldd	r24, Y+1	; 0x01
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	88 30       	cpi	r24, 0x08	; 8
     828:	98 f4       	brcc	.+38     	; 0x850 <AltReadCalCoeff+0x46>
		CalCoeff[PromOffset] = AltReadProm(ALTPROM + (PromOffset << 1));
     82a:	09 81       	ldd	r16, Y+1	; 0x01
     82c:	10 e0       	ldi	r17, 0x00	; 0
     82e:	00 0f       	add	r16, r16
     830:	11 1f       	adc	r17, r17
     832:	0e 0d       	add	r16, r14
     834:	1f 1d       	adc	r17, r15
     836:	89 81       	ldd	r24, Y+1	; 0x01
     838:	88 0f       	add	r24, r24
     83a:	80 56       	subi	r24, 0x60	; 96
     83c:	cc df       	rcall	.-104    	; 0x7d6 <AltReadProm>
     83e:	f8 01       	movw	r30, r16
     840:	91 83       	std	Z+1, r25	; 0x01
     842:	80 83       	st	Z, r24
	return ReadByte;
}

void AltReadCalCoeff(uint16_t* CalCoeff){
	uint8_t volatile PromOffset = 1;
	for (PromOffset; PromOffset < 8; PromOffset++){
     844:	99 81       	ldd	r25, Y+1	; 0x01
     846:	9f 5f       	subi	r25, 0xFF	; 255
     848:	99 83       	std	Y+1, r25	; 0x01
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	88 30       	cpi	r24, 0x08	; 8
     84e:	68 f3       	brcs	.-38     	; 0x82a <AltReadCalCoeff+0x20>
		CalCoeff[PromOffset] = AltReadProm(ALTPROM + (PromOffset << 1));
	}
	return;
}
     850:	0f 90       	pop	r0
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	ff 90       	pop	r15
     85c:	ef 90       	pop	r14
     85e:	08 95       	ret

00000860 <InitAltimeter>:

void InitAltimeter(uint16_t* CalCoeff){
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	ec 01       	movw	r28, r24
	DDRB = DDRB | (1<<CSALT);
     866:	26 9a       	sbi	0x04, 6	; 4
	AltReset();
     868:	aa df       	rcall	.-172    	; 0x7be <AltReset>
	AltReadCalCoeff(CalCoeff);
     86a:	ce 01       	movw	r24, r28
     86c:	ce df       	rcall	.-100    	; 0x80a <AltReadCalCoeff>
	return;
}
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <InitTempConv>:

void InitTempConv(void){
	AltSelect();
     874:	9b df       	rcall	.-202    	; 0x7ac <AltSelect>
	SPIMasterTransmit(ALTFASTTEMPCONV);
     876:	80 e5       	ldi	r24, 0x50	; 80
     878:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <SPIMasterTransmit>
	AltRelease();
     87c:	9e df       	rcall	.-196    	; 0x7ba <AltRelease>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     87e:	8f ec       	ldi	r24, 0xCF	; 207
     880:	97 e0       	ldi	r25, 0x07	; 7
     882:	01 97       	sbiw	r24, 0x01	; 1
     884:	f1 f7       	brne	.-4      	; 0x882 <InitTempConv+0xe>
     886:	00 c0       	rjmp	.+0      	; 0x888 <InitTempConv+0x14>
     888:	00 00       	nop
     88a:	08 95       	ret

0000088c <InitPresConv>:
	_delay_us(1000);
	return;
}

void InitPresConv(void){
	AltSelect();
     88c:	8f df       	rcall	.-226    	; 0x7ac <AltSelect>
	SPIMasterTransmit(ALTFASTPRESCONV);
     88e:	80 e4       	ldi	r24, 0x40	; 64
     890:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <SPIMasterTransmit>
	AltRelease();
     894:	92 df       	rcall	.-220    	; 0x7ba <AltRelease>
     896:	8f ec       	ldi	r24, 0xCF	; 207
     898:	97 e0       	ldi	r25, 0x07	; 7
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	f1 f7       	brne	.-4      	; 0x89a <InitPresConv+0xe>
     89e:	00 c0       	rjmp	.+0      	; 0x8a0 <InitPresConv+0x14>
     8a0:	00 00       	nop
     8a2:	08 95       	ret

000008a4 <ReadAltimeter>:
	_delay_us(1000);
	return;
}

uint32_t ReadAltimeter(void){
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	00 d0       	rcall	.+0      	; 0x8aa <ReadAltimeter+0x6>
     8aa:	1f 92       	push	r1
     8ac:	cd b7       	in	r28, 0x3d	; 61
     8ae:	de b7       	in	r29, 0x3e	; 62
	uint32_t volatile datum;
	AltSelect();
     8b0:	7d df       	rcall	.-262    	; 0x7ac <AltSelect>
	SPIMasterTransmit(ALTADCREAD);
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <SPIMasterTransmit>
	datum = SPIRead32Bit(3);
     8b8:	83 e0       	ldi	r24, 0x03	; 3
     8ba:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <SPIRead32Bit>
     8be:	69 83       	std	Y+1, r22	; 0x01
     8c0:	7a 83       	std	Y+2, r23	; 0x02
     8c2:	8b 83       	std	Y+3, r24	; 0x03
     8c4:	9c 83       	std	Y+4, r25	; 0x04
	AltRelease();
     8c6:	79 df       	rcall	.-270    	; 0x7ba <AltRelease>
	return datum;
     8c8:	69 81       	ldd	r22, Y+1	; 0x01
     8ca:	7a 81       	ldd	r23, Y+2	; 0x02
     8cc:	8b 81       	ldd	r24, Y+3	; 0x03
     8ce:	9c 81       	ldd	r25, Y+4	; 0x04
}
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <CalcPT>:

void CalcPT(uint32_t* PT, uint16_t* CalCoeff, int32_t* CPT){
     8de:	2f 92       	push	r2
     8e0:	3f 92       	push	r3
     8e2:	4f 92       	push	r4
     8e4:	5f 92       	push	r5
     8e6:	6f 92       	push	r6
     8e8:	7f 92       	push	r7
     8ea:	8f 92       	push	r8
     8ec:	9f 92       	push	r9
     8ee:	af 92       	push	r10
     8f0:	bf 92       	push	r11
     8f2:	cf 92       	push	r12
     8f4:	df 92       	push	r13
     8f6:	ef 92       	push	r14
     8f8:	ff 92       	push	r15
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	cd b7       	in	r28, 0x3d	; 61
     904:	de b7       	in	r29, 0x3e	; 62
     906:	6e 97       	sbiw	r28, 0x1e	; 30
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	f8 94       	cli
     90c:	de bf       	out	0x3e, r29	; 62
     90e:	0f be       	out	0x3f, r0	; 63
     910:	cd bf       	out	0x3d, r28	; 61
     912:	8c 01       	movw	r16, r24
     914:	3b 01       	movw	r6, r22
     916:	4a 01       	movw	r8, r20
	int32_t volatile dT;
	int64_t volatile OFF;
	int64_t volatile SENS;
	dT=PT[1]-CalCoeff[5]*pow(2,8);
     918:	fc 01       	movw	r30, r24
     91a:	64 81       	ldd	r22, Z+4	; 0x04
     91c:	75 81       	ldd	r23, Z+5	; 0x05
     91e:	86 81       	ldd	r24, Z+6	; 0x06
     920:	97 81       	ldd	r25, Z+7	; 0x07
     922:	0e 94 1e 11 	call	0x223c	; 0x223c <__floatunsisf>
     926:	6b 01       	movw	r12, r22
     928:	7c 01       	movw	r14, r24
     92a:	f3 01       	movw	r30, r6
     92c:	82 85       	ldd	r24, Z+10	; 0x0a
     92e:	93 85       	ldd	r25, Z+11	; 0x0b
     930:	bc 01       	movw	r22, r24
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e 94 1e 11 	call	0x223c	; 0x223c <__floatunsisf>
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e8       	ldi	r20, 0x80	; 128
     940:	53 e4       	ldi	r21, 0x43	; 67
     942:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     946:	9b 01       	movw	r18, r22
     948:	ac 01       	movw	r20, r24
     94a:	c7 01       	movw	r24, r14
     94c:	b6 01       	movw	r22, r12
     94e:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__subsf3>
     952:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__fixsfsi>
     956:	69 83       	std	Y+1, r22	; 0x01
     958:	7a 83       	std	Y+2, r23	; 0x02
     95a:	8b 83       	std	Y+3, r24	; 0x03
     95c:	9c 83       	std	Y+4, r25	; 0x04
	OFF=CalCoeff[2]*pow(2,17)+dT*CalCoeff[4]/pow(2,6);
     95e:	c9 80       	ldd	r12, Y+1	; 0x01
     960:	da 80       	ldd	r13, Y+2	; 0x02
     962:	eb 80       	ldd	r14, Y+3	; 0x03
     964:	fc 80       	ldd	r15, Y+4	; 0x04
     966:	f3 01       	movw	r30, r6
     968:	64 81       	ldd	r22, Z+4	; 0x04
     96a:	75 81       	ldd	r23, Z+5	; 0x05
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	0e 94 1e 11 	call	0x223c	; 0x223c <__floatunsisf>
     974:	20 e0       	ldi	r18, 0x00	; 0
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	40 e0       	ldi	r20, 0x00	; 0
     97a:	58 e4       	ldi	r21, 0x48	; 72
     97c:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     980:	1b 01       	movw	r2, r22
     982:	2c 01       	movw	r4, r24
     984:	f3 01       	movw	r30, r6
     986:	a0 85       	ldd	r26, Z+8	; 0x08
     988:	b1 85       	ldd	r27, Z+9	; 0x09
     98a:	a7 01       	movw	r20, r14
     98c:	96 01       	movw	r18, r12
     98e:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__muluhisi3>
     992:	0e 94 20 11 	call	0x2240	; 0x2240 <__floatsisf>
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	40 e8       	ldi	r20, 0x80	; 128
     99c:	5c e3       	ldi	r21, 0x3C	; 60
     99e:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     9a2:	9b 01       	movw	r18, r22
     9a4:	ac 01       	movw	r20, r24
     9a6:	c2 01       	movw	r24, r4
     9a8:	b1 01       	movw	r22, r2
     9aa:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__addsf3>
     9ae:	0e 94 af 10 	call	0x215e	; 0x215e <__fixsfdi>
     9b2:	2d 83       	std	Y+5, r18	; 0x05
     9b4:	3e 83       	std	Y+6, r19	; 0x06
     9b6:	4f 83       	std	Y+7, r20	; 0x07
     9b8:	58 87       	std	Y+8, r21	; 0x08
     9ba:	69 87       	std	Y+9, r22	; 0x09
     9bc:	7a 87       	std	Y+10, r23	; 0x0a
     9be:	8b 87       	std	Y+11, r24	; 0x0b
     9c0:	9c 87       	std	Y+12, r25	; 0x0c
	SENS=CalCoeff[1]*pow(2,16)+dT*CalCoeff[3]/pow(2,7);
     9c2:	c9 80       	ldd	r12, Y+1	; 0x01
     9c4:	da 80       	ldd	r13, Y+2	; 0x02
     9c6:	eb 80       	ldd	r14, Y+3	; 0x03
     9c8:	fc 80       	ldd	r15, Y+4	; 0x04
     9ca:	f3 01       	movw	r30, r6
     9cc:	62 81       	ldd	r22, Z+2	; 0x02
     9ce:	73 81       	ldd	r23, Z+3	; 0x03
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	0e 94 1e 11 	call	0x223c	; 0x223c <__floatunsisf>
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	40 e8       	ldi	r20, 0x80	; 128
     9de:	57 e4       	ldi	r21, 0x47	; 71
     9e0:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     9e4:	1b 01       	movw	r2, r22
     9e6:	2c 01       	movw	r4, r24
     9e8:	f3 01       	movw	r30, r6
     9ea:	a6 81       	ldd	r26, Z+6	; 0x06
     9ec:	b7 81       	ldd	r27, Z+7	; 0x07
     9ee:	a7 01       	movw	r20, r14
     9f0:	96 01       	movw	r18, r12
     9f2:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__muluhisi3>
     9f6:	0e 94 20 11 	call	0x2240	; 0x2240 <__floatsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	5c e3       	ldi	r21, 0x3C	; 60
     a02:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	c2 01       	movw	r24, r4
     a0c:	b1 01       	movw	r22, r2
     a0e:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__addsf3>
     a12:	0e 94 af 10 	call	0x215e	; 0x215e <__fixsfdi>
     a16:	2d 87       	std	Y+13, r18	; 0x0d
     a18:	3e 87       	std	Y+14, r19	; 0x0e
     a1a:	4f 87       	std	Y+15, r20	; 0x0f
     a1c:	58 8b       	std	Y+16, r21	; 0x10
     a1e:	69 8b       	std	Y+17, r22	; 0x11
     a20:	7a 8b       	std	Y+18, r23	; 0x12
     a22:	8b 8b       	std	Y+19, r24	; 0x13
     a24:	9c 8b       	std	Y+20, r25	; 0x14

	CPT[1]=(2000+(dT*CalCoeff[6])/pow(2,23))/100;
     a26:	29 81       	ldd	r18, Y+1	; 0x01
     a28:	3a 81       	ldd	r19, Y+2	; 0x02
     a2a:	4b 81       	ldd	r20, Y+3	; 0x03
     a2c:	5c 81       	ldd	r21, Y+4	; 0x04
     a2e:	f3 01       	movw	r30, r6
     a30:	a4 85       	ldd	r26, Z+12	; 0x0c
     a32:	b5 85       	ldd	r27, Z+13	; 0x0d
     a34:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__muluhisi3>
     a38:	0e 94 20 11 	call	0x2240	; 0x2240 <__floatsisf>
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	40 e0       	ldi	r20, 0x00	; 0
     a42:	54 e3       	ldi	r21, 0x34	; 52
     a44:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	4a ef       	ldi	r20, 0xFA	; 250
     a4e:	54 e4       	ldi	r21, 0x44	; 68
     a50:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__addsf3>
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	48 ec       	ldi	r20, 0xC8	; 200
     a5a:	52 e4       	ldi	r21, 0x42	; 66
     a5c:	0e 94 47 10 	call	0x208e	; 0x208e <__divsf3>
     a60:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__fixsfsi>
     a64:	f4 01       	movw	r30, r8
     a66:	64 83       	std	Z+4, r22	; 0x04
     a68:	75 83       	std	Z+5, r23	; 0x05
     a6a:	86 83       	std	Z+6, r24	; 0x06
     a6c:	97 83       	std	Z+7, r25	; 0x07
	CPT[0]=(((PT[0]*SENS)/pow(2,21)-OFF)/pow(2,15))/100;
     a6e:	ad 84       	ldd	r10, Y+13	; 0x0d
     a70:	be 84       	ldd	r11, Y+14	; 0x0e
     a72:	cf 84       	ldd	r12, Y+15	; 0x0f
     a74:	d8 88       	ldd	r13, Y+16	; 0x10
     a76:	e9 88       	ldd	r14, Y+17	; 0x11
     a78:	fa 88       	ldd	r15, Y+18	; 0x12
     a7a:	9b 89       	ldd	r25, Y+19	; 0x13
     a7c:	8c 89       	ldd	r24, Y+20	; 0x14
     a7e:	2d 80       	ldd	r2, Y+5	; 0x05
     a80:	3e 80       	ldd	r3, Y+6	; 0x06
     a82:	4f 80       	ldd	r4, Y+7	; 0x07
     a84:	58 84       	ldd	r5, Y+8	; 0x08
     a86:	69 84       	ldd	r6, Y+9	; 0x09
     a88:	7a 84       	ldd	r7, Y+10	; 0x0a
     a8a:	fb 85       	ldd	r31, Y+11	; 0x0b
     a8c:	fd 8f       	std	Y+29, r31	; 0x1d
     a8e:	2c 85       	ldd	r18, Y+12	; 0x0c
     a90:	2e 8f       	std	Y+30, r18	; 0x1e
     a92:	f8 01       	movw	r30, r16
     a94:	40 81       	ld	r20, Z
     a96:	51 81       	ldd	r21, Z+1	; 0x01
     a98:	62 81       	ldd	r22, Z+2	; 0x02
     a9a:	73 81       	ldd	r23, Z+3	; 0x03
     a9c:	9a 01       	movw	r18, r20
     a9e:	ab 01       	movw	r20, r22
     aa0:	89 01       	movw	r16, r18
     aa2:	9a 01       	movw	r18, r20
     aa4:	40 e0       	ldi	r20, 0x00	; 0
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	ba 01       	movw	r22, r20
     aaa:	0d 8b       	std	Y+21, r16	; 0x15
     aac:	1e 8b       	std	Y+22, r17	; 0x16
     aae:	2f 8b       	std	Y+23, r18	; 0x17
     ab0:	38 8f       	std	Y+24, r19	; 0x18
     ab2:	49 8f       	std	Y+25, r20	; 0x19
     ab4:	5a 8f       	std	Y+26, r21	; 0x1a
     ab6:	6b 8f       	std	Y+27, r22	; 0x1b
     ab8:	7c 8f       	std	Y+28, r23	; 0x1c
     aba:	09 2f       	mov	r16, r25
     abc:	18 2f       	mov	r17, r24
     abe:	2d 89       	ldd	r18, Y+21	; 0x15
     ac0:	3e 89       	ldd	r19, Y+22	; 0x16
     ac2:	4f 89       	ldd	r20, Y+23	; 0x17
     ac4:	58 8d       	ldd	r21, Y+24	; 0x18
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__muldi3>
     ad2:	0e 94 1a 11 	call	0x2234	; 0x2234 <__floatdisf>
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	40 e0       	ldi	r20, 0x00	; 0
     adc:	55 e3       	ldi	r21, 0x35	; 53
     ade:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     ae2:	6b 01       	movw	r12, r22
     ae4:	7c 01       	movw	r14, r24
     ae6:	22 2d       	mov	r18, r2
     ae8:	33 2d       	mov	r19, r3
     aea:	44 2d       	mov	r20, r4
     aec:	55 2d       	mov	r21, r5
     aee:	66 2d       	mov	r22, r6
     af0:	77 2d       	mov	r23, r7
     af2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     af4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     af6:	0e 94 1a 11 	call	0x2234	; 0x2234 <__floatdisf>
     afa:	9b 01       	movw	r18, r22
     afc:	ac 01       	movw	r20, r24
     afe:	c7 01       	movw	r24, r14
     b00:	b6 01       	movw	r22, r12
     b02:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__subsf3>
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	40 e0       	ldi	r20, 0x00	; 0
     b0c:	58 e3       	ldi	r21, 0x38	; 56
     b0e:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	48 ec       	ldi	r20, 0xC8	; 200
     b18:	52 e4       	ldi	r21, 0x42	; 66
     b1a:	0e 94 47 10 	call	0x208e	; 0x208e <__divsf3>
     b1e:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__fixsfsi>
     b22:	f4 01       	movw	r30, r8
     b24:	60 83       	st	Z, r22
     b26:	71 83       	std	Z+1, r23	; 0x01
     b28:	82 83       	std	Z+2, r24	; 0x02
     b2a:	93 83       	std	Z+3, r25	; 0x03
	return;
}
     b2c:	6e 96       	adiw	r28, 0x1e	; 30
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	f8 94       	cli
     b32:	de bf       	out	0x3e, r29	; 62
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	cd bf       	out	0x3d, r28	; 61
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	ff 90       	pop	r15
     b42:	ef 90       	pop	r14
     b44:	df 90       	pop	r13
     b46:	cf 90       	pop	r12
     b48:	bf 90       	pop	r11
     b4a:	af 90       	pop	r10
     b4c:	9f 90       	pop	r9
     b4e:	8f 90       	pop	r8
     b50:	7f 90       	pop	r7
     b52:	6f 90       	pop	r6
     b54:	5f 90       	pop	r5
     b56:	4f 90       	pop	r4
     b58:	3f 90       	pop	r3
     b5a:	2f 90       	pop	r2
     b5c:	08 95       	ret

00000b5e <GetCPT>:

void GetCPT(uint16_t* CalCoeff, int32_t* CPT){
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	28 97       	sbiw	r28, 0x08	; 8
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
     b7a:	8c 01       	movw	r16, r24
     b7c:	7b 01       	movw	r14, r22
	uint32_t PT[2];
	InitPresConv();
     b7e:	86 de       	rcall	.-756    	; 0x88c <InitPresConv>
	PT[0] = ReadAltimeter();
     b80:	91 de       	rcall	.-734    	; 0x8a4 <ReadAltimeter>
     b82:	69 83       	std	Y+1, r22	; 0x01
     b84:	7a 83       	std	Y+2, r23	; 0x02
     b86:	8b 83       	std	Y+3, r24	; 0x03
     b88:	9c 83       	std	Y+4, r25	; 0x04
	InitTempConv();
     b8a:	74 de       	rcall	.-792    	; 0x874 <InitTempConv>
	PT[1] = ReadAltimeter();
     b8c:	8b de       	rcall	.-746    	; 0x8a4 <ReadAltimeter>
     b8e:	6d 83       	std	Y+5, r22	; 0x05
     b90:	7e 83       	std	Y+6, r23	; 0x06
     b92:	8f 83       	std	Y+7, r24	; 0x07
     b94:	98 87       	std	Y+8, r25	; 0x08
	CalcPT(PT, CalCoeff, CPT);
     b96:	a7 01       	movw	r20, r14
     b98:	b8 01       	movw	r22, r16
     b9a:	ce 01       	movw	r24, r28
     b9c:	01 96       	adiw	r24, 0x01	; 1
     b9e:	9f de       	rcall	.-706    	; 0x8de <CalcPT>
	return;
}
     ba0:	28 96       	adiw	r28, 0x08	; 8
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	ff 90       	pop	r15
     bb6:	ef 90       	pop	r14
     bb8:	08 95       	ret

00000bba <CalcAltitudeConstTemp>:

float CalcAltitudeConstTemp(int32_t* CPT){
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
     bc6:	64 97       	sbiw	r28, 0x14	; 20
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	f8 94       	cli
     bcc:	de bf       	out	0x3e, r29	; 62
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	cd bf       	out	0x3d, r28	; 61
     bd2:	8c 01       	movw	r16, r24
	float volatile Altitude;
	float volatile TempK;
	float volatile Coeff;
	double volatile PressRatio;
	double volatile Pressure;
	Pressure = CPT[0];
     bd4:	fc 01       	movw	r30, r24
     bd6:	60 81       	ld	r22, Z
     bd8:	71 81       	ldd	r23, Z+1	; 0x01
     bda:	82 81       	ldd	r24, Z+2	; 0x02
     bdc:	93 81       	ldd	r25, Z+3	; 0x03
     bde:	0e 94 20 11 	call	0x2240	; 0x2240 <__floatsisf>
     be2:	69 8b       	std	Y+17, r22	; 0x11
     be4:	7a 8b       	std	Y+18, r23	; 0x12
     be6:	8b 8b       	std	Y+19, r24	; 0x13
     be8:	9c 8b       	std	Y+20, r25	; 0x14
	TempK = CPT[1] + 273.15;
     bea:	f8 01       	movw	r30, r16
     bec:	64 81       	ldd	r22, Z+4	; 0x04
     bee:	75 81       	ldd	r23, Z+5	; 0x05
     bf0:	86 81       	ldd	r24, Z+6	; 0x06
     bf2:	97 81       	ldd	r25, Z+7	; 0x07
     bf4:	0e 94 20 11 	call	0x2240	; 0x2240 <__floatsisf>
     bf8:	23 e3       	ldi	r18, 0x33	; 51
     bfa:	33 e9       	ldi	r19, 0x93	; 147
     bfc:	48 e8       	ldi	r20, 0x88	; 136
     bfe:	53 e4       	ldi	r21, 0x43	; 67
     c00:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__addsf3>
     c04:	6d 83       	std	Y+5, r22	; 0x05
     c06:	7e 83       	std	Y+6, r23	; 0x06
     c08:	8f 83       	std	Y+7, r24	; 0x07
     c0a:	98 87       	std	Y+8, r25	; 0x08
	Coeff = 287.058*TempK/9.8;
     c0c:	6d 81       	ldd	r22, Y+5	; 0x05
     c0e:	7e 81       	ldd	r23, Y+6	; 0x06
     c10:	8f 81       	ldd	r24, Y+7	; 0x07
     c12:	98 85       	ldd	r25, Y+8	; 0x08
     c14:	2d e6       	ldi	r18, 0x6D	; 109
     c16:	37 e8       	ldi	r19, 0x87	; 135
     c18:	4f e8       	ldi	r20, 0x8F	; 143
     c1a:	53 e4       	ldi	r21, 0x43	; 67
     c1c:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     c20:	2d ec       	ldi	r18, 0xCD	; 205
     c22:	3c ec       	ldi	r19, 0xCC	; 204
     c24:	4c e1       	ldi	r20, 0x1C	; 28
     c26:	51 e4       	ldi	r21, 0x41	; 65
     c28:	0e 94 47 10 	call	0x208e	; 0x208e <__divsf3>
     c2c:	69 87       	std	Y+9, r22	; 0x09
     c2e:	7a 87       	std	Y+10, r23	; 0x0a
     c30:	8b 87       	std	Y+11, r24	; 0x0b
     c32:	9c 87       	std	Y+12, r25	; 0x0c
	PressRatio = Pressure/1013;
     c34:	69 89       	ldd	r22, Y+17	; 0x11
     c36:	7a 89       	ldd	r23, Y+18	; 0x12
     c38:	8b 89       	ldd	r24, Y+19	; 0x13
     c3a:	9c 89       	ldd	r25, Y+20	; 0x14
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	30 e4       	ldi	r19, 0x40	; 64
     c40:	4d e7       	ldi	r20, 0x7D	; 125
     c42:	54 e4       	ldi	r21, 0x44	; 68
     c44:	0e 94 47 10 	call	0x208e	; 0x208e <__divsf3>
     c48:	6d 87       	std	Y+13, r22	; 0x0d
     c4a:	7e 87       	std	Y+14, r23	; 0x0e
     c4c:	8f 87       	std	Y+15, r24	; 0x0f
     c4e:	98 8b       	std	Y+16, r25	; 0x10
	Altitude = -log(PressRatio)*Coeff;
     c50:	6d 85       	ldd	r22, Y+13	; 0x0d
     c52:	7e 85       	ldd	r23, Y+14	; 0x0e
     c54:	8f 85       	ldd	r24, Y+15	; 0x0f
     c56:	98 89       	ldd	r25, Y+16	; 0x10
     c58:	0e 94 27 12 	call	0x244e	; 0x244e <log>
     c5c:	29 85       	ldd	r18, Y+9	; 0x09
     c5e:	3a 85       	ldd	r19, Y+10	; 0x0a
     c60:	4b 85       	ldd	r20, Y+11	; 0x0b
     c62:	5c 85       	ldd	r21, Y+12	; 0x0c
     c64:	90 58       	subi	r25, 0x80	; 128
     c66:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     c6a:	69 83       	std	Y+1, r22	; 0x01
     c6c:	7a 83       	std	Y+2, r23	; 0x02
     c6e:	8b 83       	std	Y+3, r24	; 0x03
     c70:	9c 83       	std	Y+4, r25	; 0x04
	return Altitude;
     c72:	69 81       	ldd	r22, Y+1	; 0x01
     c74:	7a 81       	ldd	r23, Y+2	; 0x02
     c76:	8b 81       	ldd	r24, Y+3	; 0x03
     c78:	9c 81       	ldd	r25, Y+4	; 0x04
}
     c7a:	64 96       	adiw	r28, 0x14	; 20
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	08 95       	ret

00000c90 <__vector_25>:
	} else if (!checkPUBX(packet)){
		return 0;	
	} else {
		return 1;
	}
}
     c90:	1f 92       	push	r1
     c92:	0f 92       	push	r0
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	0f 92       	push	r0
     c98:	11 24       	eor	r1, r1
     c9a:	0b b6       	in	r0, 0x3b	; 59
     c9c:	0f 92       	push	r0
     c9e:	2f 93       	push	r18
     ca0:	3f 93       	push	r19
     ca2:	4f 93       	push	r20
     ca4:	5f 93       	push	r21
     ca6:	6f 93       	push	r22
     ca8:	7f 93       	push	r23
     caa:	8f 93       	push	r24
     cac:	9f 93       	push	r25
     cae:	af 93       	push	r26
     cb0:	bf 93       	push	r27
     cb2:	ef 93       	push	r30
     cb4:	ff 93       	push	r31
     cb6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     cba:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <msgIndex>
     cbe:	9e 3f       	cpi	r25, 0xFE	; 254
     cc0:	30 f0       	brcs	.+12     	; 0xcce <__vector_25+0x3e>
     cc2:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <msgIndex>
     cc6:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <msgBeginFlag>
     cca:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <msgEndFlag>
     cce:	84 32       	cpi	r24, 0x24	; 36
     cd0:	c1 f4       	brne	.+48     	; 0xd02 <__vector_25+0x72>
     cd2:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <msgEndFlag>
     cd6:	91 11       	cpse	r25, r1
     cd8:	5f c0       	rjmp	.+190    	; 0xd98 <__vector_25+0x108>
     cda:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <__data_end>
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <msgBeginFlag>
     ce4:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <msgIndex>
     ce8:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <msgIndex>
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	e4 58       	subi	r30, 0x84	; 132
     cf0:	fd 4f       	sbci	r31, 0xFD	; 253
     cf2:	84 e2       	ldi	r24, 0x24	; 36
     cf4:	80 83       	st	Z, r24
     cf6:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <msgIndex>
     cfa:	8f 5f       	subi	r24, 0xFF	; 255
     cfc:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <msgIndex>
     d00:	60 c0       	rjmp	.+192    	; 0xdc2 <__vector_25+0x132>
     d02:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <msgBeginFlag>
     d06:	99 23       	and	r25, r25
     d08:	d1 f0       	breq	.+52     	; 0xd3e <__vector_25+0xae>
     d0a:	8a 32       	cpi	r24, 0x2A	; 42
     d0c:	09 f4       	brne	.+2      	; 0xd10 <__vector_25+0x80>
     d0e:	49 c0       	rjmp	.+146    	; 0xda2 <__vector_25+0x112>
     d10:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <msgEndFlag>
     d14:	91 11       	cpse	r25, r1
     d16:	4a c0       	rjmp	.+148    	; 0xdac <__vector_25+0x11c>
     d18:	8c 32       	cpi	r24, 0x2C	; 44
     d1a:	29 f4       	brne	.+10     	; 0xd26 <__vector_25+0x96>
     d1c:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <__data_end>
     d20:	9f 5f       	subi	r25, 0xFF	; 255
     d22:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <__data_end>
     d26:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <msgIndex>
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	e4 58       	subi	r30, 0x84	; 132
     d2e:	fd 4f       	sbci	r31, 0xFD	; 253
     d30:	80 83       	st	Z, r24
     d32:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <msgIndex>
     d36:	8f 5f       	subi	r24, 0xFF	; 255
     d38:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <msgIndex>
     d3c:	42 c0       	rjmp	.+132    	; 0xdc2 <__vector_25+0x132>
     d3e:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <msgBeginFlag>
     d42:	99 23       	and	r25, r25
     d44:	f1 f1       	breq	.+124    	; 0xdc2 <__vector_25+0x132>
     d46:	8a 32       	cpi	r24, 0x2A	; 42
     d48:	e1 f5       	brne	.+120    	; 0xdc2 <__vector_25+0x132>
     d4a:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <msgEndFlag>
     d4e:	81 11       	cpse	r24, r1
     d50:	38 c0       	rjmp	.+112    	; 0xdc2 <__vector_25+0x132>
     d52:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <msgIndex>
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	e4 58       	subi	r30, 0x84	; 132
     d5a:	fd 4f       	sbci	r31, 0xFD	; 253
     d5c:	8a e2       	ldi	r24, 0x2A	; 42
     d5e:	80 83       	st	Z, r24
     d60:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <msgIndex>
     d64:	8f 5f       	subi	r24, 0xFF	; 255
     d66:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <msgIndex>
     d6a:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <msgIndex>
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	e4 58       	subi	r30, 0x84	; 132
     d72:	fd 4f       	sbci	r31, 0xFD	; 253
     d74:	10 82       	st	Z, r1
     d76:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <msgIndex>
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <msgEndFlag>
     d80:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <msgBeginFlag>
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	8a e0       	ldi	r24, 0x0A	; 10
     d88:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <USARTTX>
     d8c:	e1 ec       	ldi	r30, 0xC1	; 193
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	8f 77       	andi	r24, 0x7F	; 127
     d94:	80 83       	st	Z, r24
     d96:	15 c0       	rjmp	.+42     	; 0xdc2 <__vector_25+0x132>
     d98:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <msgBeginFlag>
     d9c:	91 11       	cpse	r25, r1
     d9e:	09 c0       	rjmp	.+18     	; 0xdb2 <__vector_25+0x122>
     da0:	0e c0       	rjmp	.+28     	; 0xdbe <__vector_25+0x12e>
     da2:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <msgBeginFlag>
     da6:	81 11       	cpse	r24, r1
     da8:	d0 cf       	rjmp	.-96     	; 0xd4a <__vector_25+0xba>
     daa:	0b c0       	rjmp	.+22     	; 0xdc2 <__vector_25+0x132>
     dac:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <msgBeginFlag>
     db0:	08 c0       	rjmp	.+16     	; 0xdc2 <__vector_25+0x132>
     db2:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <msgEndFlag>
     db6:	99 23       	and	r25, r25
     db8:	09 f4       	brne	.+2      	; 0xdbc <__vector_25+0x12c>
     dba:	b5 cf       	rjmp	.-150    	; 0xd26 <__vector_25+0x96>
     dbc:	f7 cf       	rjmp	.-18     	; 0xdac <__vector_25+0x11c>
     dbe:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <msgBeginFlag>
     dc2:	ff 91       	pop	r31
     dc4:	ef 91       	pop	r30
     dc6:	bf 91       	pop	r27
     dc8:	af 91       	pop	r26
     dca:	9f 91       	pop	r25
     dcc:	8f 91       	pop	r24
     dce:	7f 91       	pop	r23
     dd0:	6f 91       	pop	r22
     dd2:	5f 91       	pop	r21
     dd4:	4f 91       	pop	r20
     dd6:	3f 91       	pop	r19
     dd8:	2f 91       	pop	r18
     dda:	0f 90       	pop	r0
     ddc:	0b be       	out	0x3b, r0	; 59
     dde:	0f 90       	pop	r0
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	0f 90       	pop	r0
     de4:	1f 90       	pop	r1
     de6:	18 95       	reti

00000de8 <SendGPS>:
     de8:	ef 92       	push	r14
     dea:	ff 92       	push	r15
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	1f 92       	push	r1
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	7c 01       	movw	r14, r24
     dfa:	16 2f       	mov	r17, r22
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	84 e2       	ldi	r24, 0x24	; 36
     e00:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <USARTTX>
     e04:	19 82       	std	Y+1, r1	; 0x01
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	81 17       	cp	r24, r17
     e0a:	70 f4       	brcc	.+28     	; 0xe28 <SendGPS+0x40>
     e0c:	99 81       	ldd	r25, Y+1	; 0x01
     e0e:	f7 01       	movw	r30, r14
     e10:	e9 0f       	add	r30, r25
     e12:	f1 1d       	adc	r31, r1
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <USARTTX>
     e1c:	99 81       	ldd	r25, Y+1	; 0x01
     e1e:	9f 5f       	subi	r25, 0xFF	; 255
     e20:	99 83       	std	Y+1, r25	; 0x01
     e22:	99 81       	ldd	r25, Y+1	; 0x01
     e24:	91 17       	cp	r25, r17
     e26:	90 f3       	brcs	.-28     	; 0xe0c <SendGPS+0x24>
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	8d e0       	ldi	r24, 0x0D	; 13
     e2c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <USARTTX>
     e30:	60 e0       	ldi	r22, 0x00	; 0
     e32:	8a e0       	ldi	r24, 0x0A	; 10
     e34:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <USARTTX>
     e38:	0f 90       	pop	r0
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	1f 91       	pop	r17
     e40:	ff 90       	pop	r15
     e42:	ef 90       	pop	r14
     e44:	08 95       	ret

00000e46 <CheckSum>:

// Calculates and writes the checksum for an outgoing packet
void CheckSum(char* packet){
     e46:	0f 93       	push	r16
     e48:	1f 93       	push	r17
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	00 d0       	rcall	.+0      	; 0xe50 <CheckSum+0xa>
     e50:	1f 92       	push	r1
     e52:	1f 92       	push	r1
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	8c 01       	movw	r16, r24
	uint8_t volatile i = 0;
     e5a:	19 82       	std	Y+1, r1	; 0x01
	uint8_t volatile checksum;
	char hexchar[3];
	while(!(packet[i] == '*')){
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	f8 01       	movw	r30, r16
     e60:	e8 0f       	add	r30, r24
     e62:	f1 1d       	adc	r31, r1
     e64:	80 81       	ld	r24, Z
     e66:	8a 32       	cpi	r24, 0x2A	; 42
     e68:	91 f0       	breq	.+36     	; 0xe8e <CheckSum+0x48>
		checksum ^= packet[i]; //XORs all the packet bytes together to get the checksum
     e6a:	99 81       	ldd	r25, Y+1	; 0x01
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	f8 01       	movw	r30, r16
     e70:	e9 0f       	add	r30, r25
     e72:	f1 1d       	adc	r31, r1
     e74:	90 81       	ld	r25, Z
     e76:	98 27       	eor	r25, r24
     e78:	9a 83       	std	Y+2, r25	; 0x02
		i++;
     e7a:	99 81       	ldd	r25, Y+1	; 0x01
     e7c:	9f 5f       	subi	r25, 0xFF	; 255
     e7e:	99 83       	std	Y+1, r25	; 0x01
// Calculates and writes the checksum for an outgoing packet
void CheckSum(char* packet){
	uint8_t volatile i = 0;
	uint8_t volatile checksum;
	char hexchar[3];
	while(!(packet[i] == '*')){
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	f8 01       	movw	r30, r16
     e84:	e8 0f       	add	r30, r24
     e86:	f1 1d       	adc	r31, r1
     e88:	80 81       	ld	r24, Z
     e8a:	8a 32       	cpi	r24, 0x2A	; 42
     e8c:	71 f7       	brne	.-36     	; 0xe6a <CheckSum+0x24>
		checksum ^= packet[i]; //XORs all the packet bytes together to get the checksum
		i++;
	}
	sprintf(hexchar, "%02X", checksum);
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	1f 92       	push	r1
     e92:	8f 93       	push	r24
     e94:	86 e4       	ldi	r24, 0x46	; 70
     e96:	92 e0       	ldi	r25, 0x02	; 2
     e98:	9f 93       	push	r25
     e9a:	8f 93       	push	r24
     e9c:	ce 01       	movw	r24, r28
     e9e:	03 96       	adiw	r24, 0x03	; 3
     ea0:	9f 93       	push	r25
     ea2:	8f 93       	push	r24
     ea4:	0e 94 f7 13 	call	0x27ee	; 0x27ee <sprintf>
	i++;
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	8f 5f       	subi	r24, 0xFF	; 255
     eac:	89 83       	std	Y+1, r24	; 0x01
	packet[i] = hexchar[0];
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	f8 01       	movw	r30, r16
     eb2:	e8 0f       	add	r30, r24
     eb4:	f1 1d       	adc	r31, r1
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	80 83       	st	Z, r24
	i++;
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	8f 5f       	subi	r24, 0xFF	; 255
     ebe:	89 83       	std	Y+1, r24	; 0x01
	packet[i] = hexchar[1];
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	f8 01       	movw	r30, r16
     ec4:	e8 0f       	add	r30, r24
     ec6:	f1 1d       	adc	r31, r1
     ec8:	8c 81       	ldd	r24, Y+4	; 0x04
     eca:	80 83       	st	Z, r24
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
	return;
}
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	08 95       	ret

00000eec <PUBXCFGSetup>:
//	packet: The packet to be sent, consisting of the config message base. The message name gets modified.
//	msg: The particular identifier of the message to be turned off
// Returns:
//	Nothing

void PUBXCFGSetup(char* packet, char* msg){
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
     ef0:	1f 92       	push	r1
     ef2:	1f 92       	push	r1
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	ac 01       	movw	r20, r24
	uint8_t volatile i = MSGSTT; //Sets up the configure message to turn off all the messages we don't want.
     efa:	88 e0       	ldi	r24, 0x08	; 8
     efc:	89 83       	std	Y+1, r24	; 0x01
	uint8_t volatile j = 0; //Takes the message name
     efe:	1a 82       	std	Y+2, r1	; 0x02
	for (i; i < MSGEND; i++){
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	8b 30       	cpi	r24, 0x0B	; 11
     f06:	98 f4       	brcc	.+38     	; 0xf2e <PUBXCFGSetup+0x42>
		packet[i] = msg[j];
     f08:	29 81       	ldd	r18, Y+1	; 0x01
     f0a:	9a 81       	ldd	r25, Y+2	; 0x02
     f0c:	fb 01       	movw	r30, r22
     f0e:	e9 0f       	add	r30, r25
     f10:	f1 1d       	adc	r31, r1
     f12:	90 81       	ld	r25, Z
     f14:	fa 01       	movw	r30, r20
     f16:	e2 0f       	add	r30, r18
     f18:	f1 1d       	adc	r31, r1
     f1a:	90 83       	st	Z, r25
		j++;
     f1c:	9a 81       	ldd	r25, Y+2	; 0x02
     f1e:	9f 5f       	subi	r25, 0xFF	; 255
     f20:	9a 83       	std	Y+2, r25	; 0x02
//	Nothing

void PUBXCFGSetup(char* packet, char* msg){
	uint8_t volatile i = MSGSTT; //Sets up the configure message to turn off all the messages we don't want.
	uint8_t volatile j = 0; //Takes the message name
	for (i; i < MSGEND; i++){
     f22:	99 81       	ldd	r25, Y+1	; 0x01
     f24:	9f 5f       	subi	r25, 0xFF	; 255
     f26:	99 83       	std	Y+1, r25	; 0x01
     f28:	99 81       	ldd	r25, Y+1	; 0x01
     f2a:	9b 30       	cpi	r25, 0x0B	; 11
     f2c:	68 f3       	brcs	.-38     	; 0xf08 <PUBXCFGSetup+0x1c>
		packet[i] = msg[j];
		j++;
	}
	CheckSum(packet);
     f2e:	ca 01       	movw	r24, r20
     f30:	8a df       	rcall	.-236    	; 0xe46 <CheckSum>
	return;
}
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	08 95       	ret

00000f3c <InitGPS>:
		UCSR0B &= ~(1 << RXCIE0);
	}
}

//Use RATE (PUBX,40)
uint16_t InitGPS(void){
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	6c 97       	sbiw	r28, 0x1c	; 28
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
	uint16_t volatile SetUBRR; //Turns off all the messages we don't want
	msgIndex = 0;
     f50:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <msgIndex>
	msgBeginFlag = 0;
     f54:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <msgBeginFlag>
	msgEndFlag = 0;
     f58:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <msgEndFlag>
	char CFGMSG[CFGMSGSIZE] = PUBXNOCOMMCFGMSGBASE;
     f5c:	8a e1       	ldi	r24, 0x1A	; 26
     f5e:	e0 e0       	ldi	r30, 0x00	; 0
     f60:	f2 e0       	ldi	r31, 0x02	; 2
     f62:	de 01       	movw	r26, r28
     f64:	13 96       	adiw	r26, 0x03	; 3
     f66:	01 90       	ld	r0, Z+
     f68:	0d 92       	st	X+, r0
     f6a:	8a 95       	dec	r24
     f6c:	e1 f7       	brne	.-8      	; 0xf66 <InitGPS+0x2a>
	SetUBRR = InitUSART(GPSBAUD, GPSPORT);
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	60 e8       	ldi	r22, 0x80	; 128
     f72:	75 e2       	ldi	r23, 0x25	; 37
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	ed d7       	rcall	.+4058   	; 0x1f54 <InitUSART>
     f7a:	9a 83       	std	Y+2, r25	; 0x02
     f7c:	89 83       	std	Y+1, r24	; 0x01
	if (SetUBRR){
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	9a 81       	ldd	r25, Y+2	; 0x02
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	09 f4       	brne	.+2      	; 0xf88 <InitGPS+0x4c>
     f86:	5d c0       	rjmp	.+186    	; 0x1042 <InitGPS+0x106>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f88:	2f ef       	ldi	r18, 0xFF	; 255
     f8a:	83 ed       	ldi	r24, 0xD3	; 211
     f8c:	90 e3       	ldi	r25, 0x30	; 48
     f8e:	21 50       	subi	r18, 0x01	; 1
     f90:	80 40       	sbci	r24, 0x00	; 0
     f92:	90 40       	sbci	r25, 0x00	; 0
     f94:	e1 f7       	brne	.-8      	; 0xf8e <InitGPS+0x52>
     f96:	00 c0       	rjmp	.+0      	; 0xf98 <InitGPS+0x5c>
     f98:	00 00       	nop
		_delay_ms(2000);
		PUBXCFGSetup(CFGMSG, "GLL");
     f9a:	6b e4       	ldi	r22, 0x4B	; 75
     f9c:	72 e0       	ldi	r23, 0x02	; 2
     f9e:	ce 01       	movw	r24, r28
     fa0:	03 96       	adiw	r24, 0x03	; 3
     fa2:	a4 df       	rcall	.-184    	; 0xeec <PUBXCFGSetup>
		SendGPS(CFGMSG, CFGMSGSIZE);
     fa4:	6a e1       	ldi	r22, 0x1A	; 26
     fa6:	ce 01       	movw	r24, r28
     fa8:	03 96       	adiw	r24, 0x03	; 3
     faa:	1e df       	rcall	.-452    	; 0xde8 <SendGPS>
     fac:	2f ef       	ldi	r18, 0xFF	; 255
     fae:	82 e5       	ldi	r24, 0x52	; 82
     fb0:	97 e0       	ldi	r25, 0x07	; 7
     fb2:	21 50       	subi	r18, 0x01	; 1
     fb4:	80 40       	sbci	r24, 0x00	; 0
     fb6:	90 40       	sbci	r25, 0x00	; 0
     fb8:	e1 f7       	brne	.-8      	; 0xfb2 <InitGPS+0x76>
     fba:	00 c0       	rjmp	.+0      	; 0xfbc <InitGPS+0x80>
     fbc:	00 00       	nop
		_delay_ms(300);
		PUBXCFGSetup(CFGMSG, "GSA");
     fbe:	6f e4       	ldi	r22, 0x4F	; 79
     fc0:	72 e0       	ldi	r23, 0x02	; 2
     fc2:	ce 01       	movw	r24, r28
     fc4:	03 96       	adiw	r24, 0x03	; 3
     fc6:	92 df       	rcall	.-220    	; 0xeec <PUBXCFGSetup>
		SendGPS(CFGMSG, CFGMSGSIZE);
     fc8:	6a e1       	ldi	r22, 0x1A	; 26
     fca:	ce 01       	movw	r24, r28
     fcc:	03 96       	adiw	r24, 0x03	; 3
     fce:	0c df       	rcall	.-488    	; 0xde8 <SendGPS>
     fd0:	2f ef       	ldi	r18, 0xFF	; 255
     fd2:	82 e5       	ldi	r24, 0x52	; 82
     fd4:	97 e0       	ldi	r25, 0x07	; 7
     fd6:	21 50       	subi	r18, 0x01	; 1
     fd8:	80 40       	sbci	r24, 0x00	; 0
     fda:	90 40       	sbci	r25, 0x00	; 0
     fdc:	e1 f7       	brne	.-8      	; 0xfd6 <InitGPS+0x9a>
     fde:	00 c0       	rjmp	.+0      	; 0xfe0 <InitGPS+0xa4>
     fe0:	00 00       	nop
		_delay_ms(300);
		PUBXCFGSetup(CFGMSG, "GSV");
     fe2:	63 e5       	ldi	r22, 0x53	; 83
     fe4:	72 e0       	ldi	r23, 0x02	; 2
     fe6:	ce 01       	movw	r24, r28
     fe8:	03 96       	adiw	r24, 0x03	; 3
     fea:	80 df       	rcall	.-256    	; 0xeec <PUBXCFGSetup>
		SendGPS(CFGMSG, CFGMSGSIZE);
     fec:	6a e1       	ldi	r22, 0x1A	; 26
     fee:	ce 01       	movw	r24, r28
     ff0:	03 96       	adiw	r24, 0x03	; 3
     ff2:	fa de       	rcall	.-524    	; 0xde8 <SendGPS>
     ff4:	2f ef       	ldi	r18, 0xFF	; 255
     ff6:	82 e5       	ldi	r24, 0x52	; 82
     ff8:	97 e0       	ldi	r25, 0x07	; 7
     ffa:	21 50       	subi	r18, 0x01	; 1
     ffc:	80 40       	sbci	r24, 0x00	; 0
     ffe:	90 40       	sbci	r25, 0x00	; 0
    1000:	e1 f7       	brne	.-8      	; 0xffa <InitGPS+0xbe>
    1002:	00 c0       	rjmp	.+0      	; 0x1004 <InitGPS+0xc8>
    1004:	00 00       	nop
		_delay_ms(300);
		PUBXCFGSetup(CFGMSG, "RMC");
    1006:	67 e5       	ldi	r22, 0x57	; 87
    1008:	72 e0       	ldi	r23, 0x02	; 2
    100a:	ce 01       	movw	r24, r28
    100c:	03 96       	adiw	r24, 0x03	; 3
    100e:	6e df       	rcall	.-292    	; 0xeec <PUBXCFGSetup>
		SendGPS(CFGMSG, CFGMSGSIZE);
    1010:	6a e1       	ldi	r22, 0x1A	; 26
    1012:	ce 01       	movw	r24, r28
    1014:	03 96       	adiw	r24, 0x03	; 3
    1016:	e8 de       	rcall	.-560    	; 0xde8 <SendGPS>
    1018:	2f ef       	ldi	r18, 0xFF	; 255
    101a:	82 e5       	ldi	r24, 0x52	; 82
    101c:	97 e0       	ldi	r25, 0x07	; 7
    101e:	21 50       	subi	r18, 0x01	; 1
    1020:	80 40       	sbci	r24, 0x00	; 0
    1022:	90 40       	sbci	r25, 0x00	; 0
    1024:	e1 f7       	brne	.-8      	; 0x101e <InitGPS+0xe2>
    1026:	00 c0       	rjmp	.+0      	; 0x1028 <InitGPS+0xec>
    1028:	00 00       	nop
		_delay_ms(300);
		PUBXCFGSetup(CFGMSG, "VTG");
    102a:	6b e5       	ldi	r22, 0x5B	; 91
    102c:	72 e0       	ldi	r23, 0x02	; 2
    102e:	ce 01       	movw	r24, r28
    1030:	03 96       	adiw	r24, 0x03	; 3
    1032:	5c df       	rcall	.-328    	; 0xeec <PUBXCFGSetup>
		SendGPS(CFGMSG, CFGMSGSIZE);
    1034:	6a e1       	ldi	r22, 0x1A	; 26
    1036:	ce 01       	movw	r24, r28
    1038:	03 96       	adiw	r24, 0x03	; 3
    103a:	d6 de       	rcall	.-596    	; 0xde8 <SendGPS>
		sei();
    103c:	78 94       	sei
		return SetUBRR;
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	9a 81       	ldd	r25, Y+2	; 0x02
	} else {
		return 0;
	}
}
    1042:	6c 96       	adiw	r28, 0x1c	; 28
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	08 95       	ret

00001054 <parseDegreesMinutes>:
}

// Parses a string in the format: DDMM.MMMMMMM, where DD is degrees, and MM is minutes.
// degLength is the length of the degrees part. For example, degLength of 3 means
// the string will be DDDMM.MMMMMMM.
float parseDegreesMinutes(char *s, int degLength) {
    1054:	af 92       	push	r10
    1056:	bf 92       	push	r11
    1058:	cf 92       	push	r12
    105a:	df 92       	push	r13
    105c:	ef 92       	push	r14
    105e:	ff 92       	push	r15
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	28 97       	sbiw	r28, 0x08	; 8
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	6c 01       	movw	r12, r24
    107a:	8b 01       	movw	r16, r22
	degrees = atof(degreesString);
	// Convert the minutes
	minutes = atof(s + degLength);
	// Convert the minutes to decimal degrees
	return degrees + (minutes / 60);
}
    107c:	ad b6       	in	r10, 0x3d	; 61
    107e:	be b6       	in	r11, 0x3e	; 62

// Parses a string in the format: DDMM.MMMMMMM, where DD is degrees, and MM is minutes.
// degLength is the length of the degrees part. For example, degLength of 3 means
// the string will be DDDMM.MMMMMMM.
float parseDegreesMinutes(char *s, int degLength) {
	char degreesString[degLength + 1];
    1080:	cb 01       	movw	r24, r22
    1082:	01 96       	adiw	r24, 0x01	; 1
    1084:	2d b7       	in	r18, 0x3d	; 61
    1086:	3e b7       	in	r19, 0x3e	; 62
    1088:	28 1b       	sub	r18, r24
    108a:	39 0b       	sbc	r19, r25
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	3e bf       	out	0x3e, r19	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	2d bf       	out	0x3d, r18	; 61
    1096:	8d b7       	in	r24, 0x3d	; 61
    1098:	9e b7       	in	r25, 0x3e	; 62
    109a:	01 96       	adiw	r24, 0x01	; 1
    109c:	7c 01       	movw	r14, r24
	float volatile degrees;
	float volatile minutes;
	// Copy the degrees part into degreesString and convert it to a float
	strncpy(degreesString, s, degLength);
    109e:	ab 01       	movw	r20, r22
    10a0:	b6 01       	movw	r22, r12
    10a2:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <strncpy>
	degreesString[degLength] = '\0';
    10a6:	f7 01       	movw	r30, r14
    10a8:	e0 0f       	add	r30, r16
    10aa:	f1 1f       	adc	r31, r17
    10ac:	10 82       	st	Z, r1
	degrees = atof(degreesString);
    10ae:	c7 01       	movw	r24, r14
    10b0:	0e 94 c4 13 	call	0x2788	; 0x2788 <atof>
    10b4:	69 83       	std	Y+1, r22	; 0x01
    10b6:	7a 83       	std	Y+2, r23	; 0x02
    10b8:	8b 83       	std	Y+3, r24	; 0x03
    10ba:	9c 83       	std	Y+4, r25	; 0x04
	// Convert the minutes
	minutes = atof(s + degLength);
    10bc:	c6 01       	movw	r24, r12
    10be:	80 0f       	add	r24, r16
    10c0:	91 1f       	adc	r25, r17
    10c2:	0e 94 c4 13 	call	0x2788	; 0x2788 <atof>
    10c6:	6d 83       	std	Y+5, r22	; 0x05
    10c8:	7e 83       	std	Y+6, r23	; 0x06
    10ca:	8f 83       	std	Y+7, r24	; 0x07
    10cc:	98 87       	std	Y+8, r25	; 0x08
	// Convert the minutes to decimal degrees
	return degrees + (minutes / 60);
    10ce:	6d 81       	ldd	r22, Y+5	; 0x05
    10d0:	7e 81       	ldd	r23, Y+6	; 0x06
    10d2:	8f 81       	ldd	r24, Y+7	; 0x07
    10d4:	98 85       	ldd	r25, Y+8	; 0x08
    10d6:	c9 80       	ldd	r12, Y+1	; 0x01
    10d8:	da 80       	ldd	r13, Y+2	; 0x02
    10da:	eb 80       	ldd	r14, Y+3	; 0x03
    10dc:	fc 80       	ldd	r15, Y+4	; 0x04
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	40 e7       	ldi	r20, 0x70	; 112
    10e4:	52 e4       	ldi	r21, 0x42	; 66
    10e6:	d3 d7       	rcall	.+4006   	; 0x208e <__divsf3>
    10e8:	a7 01       	movw	r20, r14
    10ea:	96 01       	movw	r18, r12
    10ec:	68 d7       	rcall	.+3792   	; 0x1fbe <__addsf3>
}
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	be be       	out	0x3e, r11	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	ad be       	out	0x3d, r10	; 61
    10f8:	28 96       	adiw	r28, 0x08	; 8
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	ff 90       	pop	r15
    110e:	ef 90       	pop	r14
    1110:	df 90       	pop	r13
    1112:	cf 90       	pop	r12
    1114:	bf 90       	pop	r11
    1116:	af 90       	pop	r10
    1118:	08 95       	ret

0000111a <parseGGA>:
// Parameters:
//		packet:		the GGA message string
//		GPSdata:	the struct that accepts the final calculated data
// Returns:
//		Nothing
void parseGGA(char *packet, struct GPSStruct *GPSdata) {
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	c3 50       	subi	r28, 0x03	; 3
    1128:	d1 40       	sbci	r29, 0x01	; 1
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	9c 01       	movw	r18, r24
    1136:	8b 01       	movw	r16, r22
	char packetIn[256];
	char* packetCopy;
	uint8_t volatile i = 0;
    1138:	cd 5f       	subi	r28, 0xFD	; 253
    113a:	de 4f       	sbci	r29, 0xFE	; 254
    113c:	18 82       	st	Y, r1
    113e:	c3 50       	subi	r28, 0x03	; 3
    1140:	d1 40       	sbci	r29, 0x01	; 1
	packetCopy = packetIn;
    1142:	ce 01       	movw	r24, r28
    1144:	01 96       	adiw	r24, 0x01	; 1
    1146:	cf 5f       	subi	r28, 0xFF	; 255
    1148:	de 4f       	sbci	r29, 0xFE	; 254
    114a:	99 83       	std	Y+1, r25	; 0x01
    114c:	88 83       	st	Y, r24
    114e:	c1 50       	subi	r28, 0x01	; 1
    1150:	d1 40       	sbci	r29, 0x01	; 1
	strncpy(packetIn, packet, 256);
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	51 e0       	ldi	r21, 0x01	; 1
    1156:	b9 01       	movw	r22, r18
    1158:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <strncpy>
	//USARTTX('\n', GPSPORT);
	//msgIndex = 0;
	//#endif
	
	// Skip the xxGGA and time fields
	for(i = 0; i < 2; i++) {
    115c:	cd 5f       	subi	r28, 0xFD	; 253
    115e:	de 4f       	sbci	r29, 0xFE	; 254
    1160:	18 82       	st	Y, r1
    1162:	c3 50       	subi	r28, 0x03	; 3
    1164:	d1 40       	sbci	r29, 0x01	; 1
    1166:	cd 5f       	subi	r28, 0xFD	; 253
    1168:	de 4f       	sbci	r29, 0xFE	; 254
    116a:	88 81       	ld	r24, Y
    116c:	c3 50       	subi	r28, 0x03	; 3
    116e:	d1 40       	sbci	r29, 0x01	; 1
    1170:	82 30       	cpi	r24, 0x02	; 2
    1172:	c8 f4       	brcc	.+50     	; 0x11a6 <parseGGA+0x8c>
		strsep(&packetCopy, ",");
    1174:	6f e5       	ldi	r22, 0x5F	; 95
    1176:	72 e0       	ldi	r23, 0x02	; 2
    1178:	ce 01       	movw	r24, r28
    117a:	8f 5f       	subi	r24, 0xFF	; 255
    117c:	9e 4f       	sbci	r25, 0xFE	; 254
    117e:	0e 94 df 13 	call	0x27be	; 0x27be <strsep>
	//USARTTX('\n', GPSPORT);
	//msgIndex = 0;
	//#endif
	
	// Skip the xxGGA and time fields
	for(i = 0; i < 2; i++) {
    1182:	cd 5f       	subi	r28, 0xFD	; 253
    1184:	de 4f       	sbci	r29, 0xFE	; 254
    1186:	88 81       	ld	r24, Y
    1188:	c3 50       	subi	r28, 0x03	; 3
    118a:	d1 40       	sbci	r29, 0x01	; 1
    118c:	8f 5f       	subi	r24, 0xFF	; 255
    118e:	cd 5f       	subi	r28, 0xFD	; 253
    1190:	de 4f       	sbci	r29, 0xFE	; 254
    1192:	88 83       	st	Y, r24
    1194:	c3 50       	subi	r28, 0x03	; 3
    1196:	d1 40       	sbci	r29, 0x01	; 1
    1198:	cd 5f       	subi	r28, 0xFD	; 253
    119a:	de 4f       	sbci	r29, 0xFE	; 254
    119c:	88 81       	ld	r24, Y
    119e:	c3 50       	subi	r28, 0x03	; 3
    11a0:	d1 40       	sbci	r29, 0x01	; 1
    11a2:	82 30       	cpi	r24, 0x02	; 2
    11a4:	38 f3       	brcs	.-50     	; 0x1174 <parseGGA+0x5a>
		strsep(&packetCopy, ",");
	}
	i = 0;
    11a6:	cd 5f       	subi	r28, 0xFD	; 253
    11a8:	de 4f       	sbci	r29, 0xFE	; 254
    11aa:	18 82       	st	Y, r1
    11ac:	c3 50       	subi	r28, 0x03	; 3
    11ae:	d1 40       	sbci	r29, 0x01	; 1
	
	// get the latitude
	msgPart = strsep(&packetCopy, ",");
    11b0:	6f e5       	ldi	r22, 0x5F	; 95
    11b2:	72 e0       	ldi	r23, 0x02	; 2
    11b4:	ce 01       	movw	r24, r28
    11b6:	8f 5f       	subi	r24, 0xFF	; 255
    11b8:	9e 4f       	sbci	r25, 0xFE	; 254
    11ba:	0e 94 df 13 	call	0x27be	; 0x27be <strsep>
	if (*msgPart){
    11be:	fc 01       	movw	r30, r24
    11c0:	20 81       	ld	r18, Z
    11c2:	22 23       	and	r18, r18
    11c4:	a1 f0       	breq	.+40     	; 0x11ee <parseGGA+0xd4>
		GPSdata->latitude = parseDegreesMinutes(msgPart, 2);
    11c6:	62 e0       	ldi	r22, 0x02	; 2
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	44 df       	rcall	.-376    	; 0x1054 <parseDegreesMinutes>
    11cc:	f8 01       	movw	r30, r16
    11ce:	62 83       	std	Z+2, r22	; 0x02
    11d0:	73 83       	std	Z+3, r23	; 0x03
    11d2:	84 83       	std	Z+4, r24	; 0x04
    11d4:	95 83       	std	Z+5, r25	; 0x05
		GPSdata->GPSAltitude = 0;
		return;
	}
	
	// get the N/S component of the latitude. If it's 'S', then make the latitude negative
	msgPart = strsep(&packetCopy, ",");
    11d6:	6f e5       	ldi	r22, 0x5F	; 95
    11d8:	72 e0       	ldi	r23, 0x02	; 2
    11da:	ce 01       	movw	r24, r28
    11dc:	8f 5f       	subi	r24, 0xFF	; 255
    11de:	9e 4f       	sbci	r25, 0xFE	; 254
    11e0:	0e 94 df 13 	call	0x27be	; 0x27be <strsep>
	if(*msgPart == 'S') {
    11e4:	fc 01       	movw	r30, r24
    11e6:	80 81       	ld	r24, Z
    11e8:	83 35       	cpi	r24, 0x53	; 83
    11ea:	c1 f4       	brne	.+48     	; 0x121c <parseGGA+0x102>
    11ec:	0c c0       	rjmp	.+24     	; 0x1206 <parseGGA+0xec>
	// get the latitude
	msgPart = strsep(&packetCopy, ",");
	if (*msgPart){
		GPSdata->latitude = parseDegreesMinutes(msgPart, 2);
	} else {
		GPSdata->latitude = 0;
    11ee:	f8 01       	movw	r30, r16
    11f0:	12 82       	std	Z+2, r1	; 0x02
    11f2:	13 82       	std	Z+3, r1	; 0x03
    11f4:	14 82       	std	Z+4, r1	; 0x04
    11f6:	15 82       	std	Z+5, r1	; 0x05
		GPSdata->longitude = 0;
    11f8:	16 82       	std	Z+6, r1	; 0x06
    11fa:	17 82       	std	Z+7, r1	; 0x07
    11fc:	10 86       	std	Z+8, r1	; 0x08
    11fe:	11 86       	std	Z+9, r1	; 0x09
		GPSdata->GPSAltitude = 0;
    1200:	11 82       	std	Z+1, r1	; 0x01
    1202:	10 82       	st	Z, r1
		return;
    1204:	9f c0       	rjmp	.+318    	; 0x1344 <parseGGA+0x22a>
	}
	
	// get the N/S component of the latitude. If it's 'S', then make the latitude negative
	msgPart = strsep(&packetCopy, ",");
	if(*msgPart == 'S') {
		GPSdata->latitude = -GPSdata->latitude;
    1206:	f8 01       	movw	r30, r16
    1208:	82 81       	ldd	r24, Z+2	; 0x02
    120a:	93 81       	ldd	r25, Z+3	; 0x03
    120c:	a4 81       	ldd	r26, Z+4	; 0x04
    120e:	b5 81       	ldd	r27, Z+5	; 0x05
    1210:	b0 58       	subi	r27, 0x80	; 128
    1212:	82 83       	std	Z+2, r24	; 0x02
    1214:	93 83       	std	Z+3, r25	; 0x03
    1216:	a4 83       	std	Z+4, r26	; 0x04
    1218:	b5 83       	std	Z+5, r27	; 0x05
    121a:	0e c0       	rjmp	.+28     	; 0x1238 <parseGGA+0x11e>
	} else if (*msgPart != 'N'){
    121c:	8e 34       	cpi	r24, 0x4E	; 78
    121e:	61 f0       	breq	.+24     	; 0x1238 <parseGGA+0x11e>
		GPSdata->latitude = 0;
    1220:	f8 01       	movw	r30, r16
    1222:	12 82       	std	Z+2, r1	; 0x02
    1224:	13 82       	std	Z+3, r1	; 0x03
    1226:	14 82       	std	Z+4, r1	; 0x04
    1228:	15 82       	std	Z+5, r1	; 0x05
		GPSdata->longitude = 0;
    122a:	16 82       	std	Z+6, r1	; 0x06
    122c:	17 82       	std	Z+7, r1	; 0x07
    122e:	10 86       	std	Z+8, r1	; 0x08
    1230:	11 86       	std	Z+9, r1	; 0x09
		GPSdata->GPSAltitude = 0;
    1232:	11 82       	std	Z+1, r1	; 0x01
    1234:	10 82       	st	Z, r1
		return;
    1236:	86 c0       	rjmp	.+268    	; 0x1344 <parseGGA+0x22a>
	}
	
	// get the longitude
	msgPart = strsep(&packetCopy, ",");
    1238:	6f e5       	ldi	r22, 0x5F	; 95
    123a:	72 e0       	ldi	r23, 0x02	; 2
    123c:	ce 01       	movw	r24, r28
    123e:	8f 5f       	subi	r24, 0xFF	; 255
    1240:	9e 4f       	sbci	r25, 0xFE	; 254
    1242:	0e 94 df 13 	call	0x27be	; 0x27be <strsep>
	// Debug to see what it thinks the longitude is
	
	if (*msgPart){
    1246:	fc 01       	movw	r30, r24
    1248:	20 81       	ld	r18, Z
    124a:	22 23       	and	r18, r18
    124c:	a1 f0       	breq	.+40     	; 0x1276 <parseGGA+0x15c>
		GPSdata->longitude = parseDegreesMinutes(msgPart, 3);
    124e:	63 e0       	ldi	r22, 0x03	; 3
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	00 df       	rcall	.-512    	; 0x1054 <parseDegreesMinutes>
    1254:	f8 01       	movw	r30, r16
    1256:	66 83       	std	Z+6, r22	; 0x06
    1258:	77 83       	std	Z+7, r23	; 0x07
    125a:	80 87       	std	Z+8, r24	; 0x08
    125c:	91 87       	std	Z+9, r25	; 0x09
		GPSdata->longitude = 0;
		GPSdata->GPSAltitude = 0;
		return;
	}
	// get the E/W component of the longitude. If it's 'W', then make the longitude negative
	msgPart = strsep(&packetCopy, ",");
    125e:	6f e5       	ldi	r22, 0x5F	; 95
    1260:	72 e0       	ldi	r23, 0x02	; 2
    1262:	ce 01       	movw	r24, r28
    1264:	8f 5f       	subi	r24, 0xFF	; 255
    1266:	9e 4f       	sbci	r25, 0xFE	; 254
    1268:	0e 94 df 13 	call	0x27be	; 0x27be <strsep>
	if(*msgPart == 'W') {
    126c:	fc 01       	movw	r30, r24
    126e:	80 81       	ld	r24, Z
    1270:	87 35       	cpi	r24, 0x57	; 87
    1272:	c1 f4       	brne	.+48     	; 0x12a4 <parseGGA+0x18a>
    1274:	0c c0       	rjmp	.+24     	; 0x128e <parseGGA+0x174>
	// Debug to see what it thinks the longitude is
	
	if (*msgPart){
		GPSdata->longitude = parseDegreesMinutes(msgPart, 3);
	} else {
		GPSdata->latitude = 0;
    1276:	f8 01       	movw	r30, r16
    1278:	12 82       	std	Z+2, r1	; 0x02
    127a:	13 82       	std	Z+3, r1	; 0x03
    127c:	14 82       	std	Z+4, r1	; 0x04
    127e:	15 82       	std	Z+5, r1	; 0x05
		GPSdata->longitude = 0;
    1280:	16 82       	std	Z+6, r1	; 0x06
    1282:	17 82       	std	Z+7, r1	; 0x07
    1284:	10 86       	std	Z+8, r1	; 0x08
    1286:	11 86       	std	Z+9, r1	; 0x09
		GPSdata->GPSAltitude = 0;
    1288:	11 82       	std	Z+1, r1	; 0x01
    128a:	10 82       	st	Z, r1
		return;
    128c:	5b c0       	rjmp	.+182    	; 0x1344 <parseGGA+0x22a>
	}
	// get the E/W component of the longitude. If it's 'W', then make the longitude negative
	msgPart = strsep(&packetCopy, ",");
	if(*msgPart == 'W') {
		GPSdata->longitude = -GPSdata->longitude;
    128e:	f8 01       	movw	r30, r16
    1290:	86 81       	ldd	r24, Z+6	; 0x06
    1292:	97 81       	ldd	r25, Z+7	; 0x07
    1294:	a0 85       	ldd	r26, Z+8	; 0x08
    1296:	b1 85       	ldd	r27, Z+9	; 0x09
    1298:	b0 58       	subi	r27, 0x80	; 128
    129a:	86 83       	std	Z+6, r24	; 0x06
    129c:	97 83       	std	Z+7, r25	; 0x07
    129e:	a0 87       	std	Z+8, r26	; 0x08
    12a0:	b1 87       	std	Z+9, r27	; 0x09
    12a2:	0e c0       	rjmp	.+28     	; 0x12c0 <parseGGA+0x1a6>
	} else if (*msgPart != 'E'){
    12a4:	85 34       	cpi	r24, 0x45	; 69
    12a6:	61 f0       	breq	.+24     	; 0x12c0 <parseGGA+0x1a6>
		GPSdata->latitude = 0;
    12a8:	f8 01       	movw	r30, r16
    12aa:	12 82       	std	Z+2, r1	; 0x02
    12ac:	13 82       	std	Z+3, r1	; 0x03
    12ae:	14 82       	std	Z+4, r1	; 0x04
    12b0:	15 82       	std	Z+5, r1	; 0x05
		GPSdata->longitude = 0;
    12b2:	16 82       	std	Z+6, r1	; 0x06
    12b4:	17 82       	std	Z+7, r1	; 0x07
    12b6:	10 86       	std	Z+8, r1	; 0x08
    12b8:	11 86       	std	Z+9, r1	; 0x09
		GPSdata->GPSAltitude = 0;
    12ba:	11 82       	std	Z+1, r1	; 0x01
    12bc:	10 82       	st	Z, r1
		return;
    12be:	42 c0       	rjmp	.+132    	; 0x1344 <parseGGA+0x22a>
	}
	
	// Skip the quality, numSV, and HDOP fields
	for(i = 0; i < 3; i++) {
    12c0:	cd 5f       	subi	r28, 0xFD	; 253
    12c2:	de 4f       	sbci	r29, 0xFE	; 254
    12c4:	18 82       	st	Y, r1
    12c6:	c3 50       	subi	r28, 0x03	; 3
    12c8:	d1 40       	sbci	r29, 0x01	; 1
    12ca:	cd 5f       	subi	r28, 0xFD	; 253
    12cc:	de 4f       	sbci	r29, 0xFE	; 254
    12ce:	88 81       	ld	r24, Y
    12d0:	c3 50       	subi	r28, 0x03	; 3
    12d2:	d1 40       	sbci	r29, 0x01	; 1
    12d4:	83 30       	cpi	r24, 0x03	; 3
    12d6:	c8 f4       	brcc	.+50     	; 0x130a <parseGGA+0x1f0>
		strsep(&packetCopy, ",");
    12d8:	6f e5       	ldi	r22, 0x5F	; 95
    12da:	72 e0       	ldi	r23, 0x02	; 2
    12dc:	ce 01       	movw	r24, r28
    12de:	8f 5f       	subi	r24, 0xFF	; 255
    12e0:	9e 4f       	sbci	r25, 0xFE	; 254
    12e2:	0e 94 df 13 	call	0x27be	; 0x27be <strsep>
		GPSdata->GPSAltitude = 0;
		return;
	}
	
	// Skip the quality, numSV, and HDOP fields
	for(i = 0; i < 3; i++) {
    12e6:	cd 5f       	subi	r28, 0xFD	; 253
    12e8:	de 4f       	sbci	r29, 0xFE	; 254
    12ea:	88 81       	ld	r24, Y
    12ec:	c3 50       	subi	r28, 0x03	; 3
    12ee:	d1 40       	sbci	r29, 0x01	; 1
    12f0:	8f 5f       	subi	r24, 0xFF	; 255
    12f2:	cd 5f       	subi	r28, 0xFD	; 253
    12f4:	de 4f       	sbci	r29, 0xFE	; 254
    12f6:	88 83       	st	Y, r24
    12f8:	c3 50       	subi	r28, 0x03	; 3
    12fa:	d1 40       	sbci	r29, 0x01	; 1
    12fc:	cd 5f       	subi	r28, 0xFD	; 253
    12fe:	de 4f       	sbci	r29, 0xFE	; 254
    1300:	88 81       	ld	r24, Y
    1302:	c3 50       	subi	r28, 0x03	; 3
    1304:	d1 40       	sbci	r29, 0x01	; 1
    1306:	83 30       	cpi	r24, 0x03	; 3
    1308:	38 f3       	brcs	.-50     	; 0x12d8 <parseGGA+0x1be>
		strsep(&packetCopy, ",");
	}
	
	// Get the altitude. If there is no altitude, then set it to zero.
	msgPart = strsep(&packetCopy, ",");
    130a:	6f e5       	ldi	r22, 0x5F	; 95
    130c:	72 e0       	ldi	r23, 0x02	; 2
    130e:	ce 01       	movw	r24, r28
    1310:	8f 5f       	subi	r24, 0xFF	; 255
    1312:	9e 4f       	sbci	r25, 0xFE	; 254
    1314:	0e 94 df 13 	call	0x27be	; 0x27be <strsep>
	if(*msgPart != '\0') {
    1318:	fc 01       	movw	r30, r24
    131a:	20 81       	ld	r18, Z
    131c:	22 23       	and	r18, r18
    131e:	39 f0       	breq	.+14     	; 0x132e <parseGGA+0x214>
		GPSdata->GPSAltitude = atof(msgPart);
    1320:	0e 94 c4 13 	call	0x2788	; 0x2788 <atof>
    1324:	5b d7       	rcall	.+3766   	; 0x21dc <__fixunssfsi>
    1326:	f8 01       	movw	r30, r16
    1328:	71 83       	std	Z+1, r23	; 0x01
    132a:	60 83       	st	Z, r22
    132c:	0b c0       	rjmp	.+22     	; 0x1344 <parseGGA+0x22a>
	} else {
		GPSdata->latitude = 0;
    132e:	f8 01       	movw	r30, r16
    1330:	12 82       	std	Z+2, r1	; 0x02
    1332:	13 82       	std	Z+3, r1	; 0x03
    1334:	14 82       	std	Z+4, r1	; 0x04
    1336:	15 82       	std	Z+5, r1	; 0x05
		GPSdata->longitude = 0;
    1338:	16 82       	std	Z+6, r1	; 0x06
    133a:	17 82       	std	Z+7, r1	; 0x07
    133c:	10 86       	std	Z+8, r1	; 0x08
    133e:	11 86       	std	Z+9, r1	; 0x09
		GPSdata->GPSAltitude = 0;
    1340:	11 82       	std	Z+1, r1	; 0x01
    1342:	10 82       	st	Z, r1
		return;
	}
}
    1344:	cd 5f       	subi	r28, 0xFD	; 253
    1346:	de 4f       	sbci	r29, 0xFE	; 254
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	1f 91       	pop	r17
    1358:	0f 91       	pop	r16
    135a:	08 95       	ret

0000135c <getGPSData>:
// Once message end flag is set, puts data in the GPS struct and resets end flag
// Parameters:
//		GPSdata:	Struct that accepts data
//	Returns:
//		Nothing
void getGPSData(struct GPSStruct *GPSdata){
    135c:	4f 92       	push	r4
    135e:	5f 92       	push	r5
    1360:	6f 92       	push	r6
    1362:	7f 92       	push	r7
    1364:	8f 92       	push	r8
    1366:	9f 92       	push	r9
    1368:	af 92       	push	r10
    136a:	bf 92       	push	r11
    136c:	cf 92       	push	r12
    136e:	df 92       	push	r13
    1370:	ef 92       	push	r14
    1372:	ff 92       	push	r15
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	c2 51       	subi	r28, 0x12	; 18
    1382:	d1 40       	sbci	r29, 0x01	; 1
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	8c 01       	movw	r16, r24
	#ifdef DOUNITTEST
	uint8_t volatile echoLength = 0;
    1390:	19 82       	std	Y+1, r1	; 0x01
	uint8_t volatile echoIndex = 0;
    1392:	1a 82       	std	Y+2, r1	; 0x02
	int32_t volatile latConvert = 0; 
    1394:	1b 82       	std	Y+3, r1	; 0x03
    1396:	1c 82       	std	Y+4, r1	; 0x04
    1398:	1d 82       	std	Y+5, r1	; 0x05
    139a:	1e 82       	std	Y+6, r1	; 0x06
	int32_t volatile longConvert = 0;
    139c:	1f 82       	std	Y+7, r1	; 0x07
    139e:	18 86       	std	Y+8, r1	; 0x08
    13a0:	19 86       	std	Y+9, r1	; 0x09
    13a2:	1a 86       	std	Y+10, r1	; 0x0a
	char echoLatLongAlt[256];
	#endif
	if (msgEndFlag){
    13a4:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <msgEndFlag>
    13a8:	99 23       	and	r25, r25
    13aa:	09 f4       	brne	.+2      	; 0x13ae <getGPSData+0x52>
    13ac:	cc c0       	rjmp	.+408    	; 0x1546 <getGPSData+0x1ea>
		parseGGA(gpsBuffer, GPSdata);
    13ae:	b8 01       	movw	r22, r16
    13b0:	8c e7       	ldi	r24, 0x7C	; 124
    13b2:	92 e0       	ldi	r25, 0x02	; 2
    13b4:	b2 de       	rcall	.-668    	; 0x111a <parseGGA>
		msgEndFlag = 0;
    13b6:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <msgEndFlag>
		#ifdef DOUNITTEST
		USARTTX('\n', RADIOPORT);
    13ba:	61 e0       	ldi	r22, 0x01	; 1
    13bc:	8a e0       	ldi	r24, 0x0A	; 10
    13be:	ec d5       	rcall	.+3032   	; 0x1f98 <USARTTX>
		USARTTX('\n', RADIOPORT);
    13c0:	61 e0       	ldi	r22, 0x01	; 1
    13c2:	8a e0       	ldi	r24, 0x0A	; 10
    13c4:	e9 d5       	rcall	.+3026   	; 0x1f98 <USARTTX>
		latConvert = (int32_t)GPSdata->latitude;
    13c6:	d8 01       	movw	r26, r16
    13c8:	12 96       	adiw	r26, 0x02	; 2
    13ca:	4d 90       	ld	r4, X+
    13cc:	5d 90       	ld	r5, X+
    13ce:	6d 90       	ld	r6, X+
    13d0:	7c 90       	ld	r7, X
    13d2:	15 97       	sbiw	r26, 0x05	; 5
    13d4:	c5 5f       	subi	r28, 0xF5	; 245
    13d6:	de 4f       	sbci	r29, 0xFE	; 254
    13d8:	48 82       	st	Y, r4
    13da:	59 82       	std	Y+1, r5	; 0x01
    13dc:	6a 82       	std	Y+2, r6	; 0x02
    13de:	7b 82       	std	Y+3, r7	; 0x03
    13e0:	cb 50       	subi	r28, 0x0B	; 11
    13e2:	d1 40       	sbci	r29, 0x01	; 1
    13e4:	c3 01       	movw	r24, r6
    13e6:	b2 01       	movw	r22, r4
    13e8:	f4 d6       	rcall	.+3560   	; 0x21d2 <__fixsfsi>
    13ea:	6b 83       	std	Y+3, r22	; 0x03
    13ec:	7c 83       	std	Y+4, r23	; 0x04
    13ee:	8d 83       	std	Y+5, r24	; 0x05
    13f0:	9e 83       	std	Y+6, r25	; 0x06
		longConvert = (int32_t)GPSdata->longitude;
    13f2:	f8 01       	movw	r30, r16
    13f4:	86 80       	ldd	r8, Z+6	; 0x06
    13f6:	97 80       	ldd	r9, Z+7	; 0x07
    13f8:	a0 84       	ldd	r10, Z+8	; 0x08
    13fa:	b1 84       	ldd	r11, Z+9	; 0x09
    13fc:	c5 01       	movw	r24, r10
    13fe:	b4 01       	movw	r22, r8
    1400:	e8 d6       	rcall	.+3536   	; 0x21d2 <__fixsfsi>
    1402:	6f 83       	std	Y+7, r22	; 0x07
    1404:	78 87       	std	Y+8, r23	; 0x08
    1406:	89 87       	std	Y+9, r24	; 0x09
    1408:	9a 87       	std	Y+10, r25	; 0x0a
		echoLength = sprintf(echoLatLongAlt, "%ld.%ld %ld.%ld %u %u*", latConvert, labs((int32_t)((GPSdata->latitude - latConvert)*10000)), longConvert, labs((int32_t)((GPSdata->longitude - longConvert)*10000)), GPSdata->GPSAltitude, commaCount);
    140a:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <__data_end>
    140e:	6f 81       	ldd	r22, Y+7	; 0x07
    1410:	78 85       	ldd	r23, Y+8	; 0x08
    1412:	89 85       	ldd	r24, Y+9	; 0x09
    1414:	9a 85       	ldd	r25, Y+10	; 0x0a
    1416:	cf 80       	ldd	r12, Y+7	; 0x07
    1418:	d8 84       	ldd	r13, Y+8	; 0x08
    141a:	e9 84       	ldd	r14, Y+9	; 0x09
    141c:	fa 84       	ldd	r15, Y+10	; 0x0a
    141e:	4b 80       	ldd	r4, Y+3	; 0x03
    1420:	5c 80       	ldd	r5, Y+4	; 0x04
    1422:	6d 80       	ldd	r6, Y+5	; 0x05
    1424:	7e 80       	ldd	r7, Y+6	; 0x06
    1426:	c1 5f       	subi	r28, 0xF1	; 241
    1428:	de 4f       	sbci	r29, 0xFE	; 254
    142a:	48 82       	st	Y, r4
    142c:	59 82       	std	Y+1, r5	; 0x01
    142e:	6a 82       	std	Y+2, r6	; 0x02
    1430:	7b 82       	std	Y+3, r7	; 0x03
    1432:	cf 50       	subi	r28, 0x0F	; 15
    1434:	d1 40       	sbci	r29, 0x01	; 1
    1436:	4b 80       	ldd	r4, Y+3	; 0x03
    1438:	5c 80       	ldd	r5, Y+4	; 0x04
    143a:	6d 80       	ldd	r6, Y+5	; 0x05
    143c:	7e 80       	ldd	r7, Y+6	; 0x06
    143e:	1f 92       	push	r1
    1440:	2f 93       	push	r18
    1442:	d8 01       	movw	r26, r16
    1444:	11 96       	adiw	r26, 0x01	; 1
    1446:	2c 91       	ld	r18, X
    1448:	11 97       	sbiw	r26, 0x01	; 1
    144a:	2f 93       	push	r18
    144c:	2c 91       	ld	r18, X
    144e:	2f 93       	push	r18
    1450:	f7 d6       	rcall	.+3566   	; 0x2240 <__floatsisf>
    1452:	9b 01       	movw	r18, r22
    1454:	ac 01       	movw	r20, r24
    1456:	c5 01       	movw	r24, r10
    1458:	b4 01       	movw	r22, r8
    145a:	b0 d5       	rcall	.+2912   	; 0x1fbc <__subsf3>
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e4       	ldi	r19, 0x40	; 64
    1460:	4c e1       	ldi	r20, 0x1C	; 28
    1462:	56 e4       	ldi	r21, 0x46	; 70
    1464:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
    1468:	b4 d6       	rcall	.+3432   	; 0x21d2 <__fixsfsi>
    146a:	99 23       	and	r25, r25
    146c:	3c f4       	brge	.+14     	; 0x147c <getGPSData+0x120>
    146e:	90 95       	com	r25
    1470:	80 95       	com	r24
    1472:	70 95       	com	r23
    1474:	61 95       	neg	r22
    1476:	7f 4f       	sbci	r23, 0xFF	; 255
    1478:	8f 4f       	sbci	r24, 0xFF	; 255
    147a:	9f 4f       	sbci	r25, 0xFF	; 255
    147c:	9f 93       	push	r25
    147e:	8f 93       	push	r24
    1480:	7f 93       	push	r23
    1482:	6f 93       	push	r22
    1484:	ff 92       	push	r15
    1486:	ef 92       	push	r14
    1488:	df 92       	push	r13
    148a:	cf 92       	push	r12
    148c:	c1 5f       	subi	r28, 0xF1	; 241
    148e:	de 4f       	sbci	r29, 0xFE	; 254
    1490:	68 81       	ld	r22, Y
    1492:	79 81       	ldd	r23, Y+1	; 0x01
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	9b 81       	ldd	r25, Y+3	; 0x03
    1498:	cf 50       	subi	r28, 0x0F	; 15
    149a:	d1 40       	sbci	r29, 0x01	; 1
    149c:	d1 d6       	rcall	.+3490   	; 0x2240 <__floatsisf>
    149e:	9b 01       	movw	r18, r22
    14a0:	ac 01       	movw	r20, r24
    14a2:	c5 5f       	subi	r28, 0xF5	; 245
    14a4:	de 4f       	sbci	r29, 0xFE	; 254
    14a6:	68 81       	ld	r22, Y
    14a8:	79 81       	ldd	r23, Y+1	; 0x01
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	9b 81       	ldd	r25, Y+3	; 0x03
    14ae:	cb 50       	subi	r28, 0x0B	; 11
    14b0:	d1 40       	sbci	r29, 0x01	; 1
    14b2:	84 d5       	rcall	.+2824   	; 0x1fbc <__subsf3>
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e4       	ldi	r19, 0x40	; 64
    14b8:	4c e1       	ldi	r20, 0x1C	; 28
    14ba:	56 e4       	ldi	r21, 0x46	; 70
    14bc:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
    14c0:	88 d6       	rcall	.+3344   	; 0x21d2 <__fixsfsi>
    14c2:	99 23       	and	r25, r25
    14c4:	3c f4       	brge	.+14     	; 0x14d4 <getGPSData+0x178>
    14c6:	90 95       	com	r25
    14c8:	80 95       	com	r24
    14ca:	70 95       	com	r23
    14cc:	61 95       	neg	r22
    14ce:	7f 4f       	sbci	r23, 0xFF	; 255
    14d0:	8f 4f       	sbci	r24, 0xFF	; 255
    14d2:	9f 4f       	sbci	r25, 0xFF	; 255
    14d4:	9f 93       	push	r25
    14d6:	8f 93       	push	r24
    14d8:	7f 93       	push	r23
    14da:	6f 93       	push	r22
    14dc:	7f 92       	push	r7
    14de:	6f 92       	push	r6
    14e0:	5f 92       	push	r5
    14e2:	4f 92       	push	r4
    14e4:	81 e6       	ldi	r24, 0x61	; 97
    14e6:	92 e0       	ldi	r25, 0x02	; 2
    14e8:	9f 93       	push	r25
    14ea:	8f 93       	push	r24
    14ec:	ce 01       	movw	r24, r28
    14ee:	0b 96       	adiw	r24, 0x0b	; 11
    14f0:	9f 93       	push	r25
    14f2:	8f 93       	push	r24
    14f4:	0e 94 f7 13 	call	0x27ee	; 0x27ee <sprintf>
    14f8:	89 83       	std	Y+1, r24	; 0x01
		for (echoIndex; echoIndex < echoLength; echoIndex++){
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	f8 94       	cli
    1504:	de bf       	out	0x3e, r29	; 62
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	cd bf       	out	0x3d, r28	; 61
    150a:	98 17       	cp	r25, r24
    150c:	88 f4       	brcc	.+34     	; 0x1530 <getGPSData+0x1d4>
			USARTTX(echoLatLongAlt[echoIndex], RADIOPORT);
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	eb e0       	ldi	r30, 0x0B	; 11
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	ec 0f       	add	r30, r28
    1516:	fd 1f       	adc	r31, r29
    1518:	e8 0f       	add	r30, r24
    151a:	f1 1d       	adc	r31, r1
    151c:	61 e0       	ldi	r22, 0x01	; 1
    151e:	80 81       	ld	r24, Z
    1520:	3b d5       	rcall	.+2678   	; 0x1f98 <USARTTX>
		USARTTX('\n', RADIOPORT);
		USARTTX('\n', RADIOPORT);
		latConvert = (int32_t)GPSdata->latitude;
		longConvert = (int32_t)GPSdata->longitude;
		echoLength = sprintf(echoLatLongAlt, "%ld.%ld %ld.%ld %u %u*", latConvert, labs((int32_t)((GPSdata->latitude - latConvert)*10000)), longConvert, labs((int32_t)((GPSdata->longitude - longConvert)*10000)), GPSdata->GPSAltitude, commaCount);
		for (echoIndex; echoIndex < echoLength; echoIndex++){
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	8f 5f       	subi	r24, 0xFF	; 255
    1526:	8a 83       	std	Y+2, r24	; 0x02
    1528:	9a 81       	ldd	r25, Y+2	; 0x02
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	98 17       	cp	r25, r24
    152e:	78 f3       	brcs	.-34     	; 0x150e <getGPSData+0x1b2>
			USARTTX(echoLatLongAlt[echoIndex], RADIOPORT);
		}
		USARTTX('\n', RADIOPORT);
    1530:	61 e0       	ldi	r22, 0x01	; 1
    1532:	8a e0       	ldi	r24, 0x0A	; 10
    1534:	31 d5       	rcall	.+2658   	; 0x1f98 <USARTTX>
		USARTTX('\n', RADIOPORT);
    1536:	61 e0       	ldi	r22, 0x01	; 1
    1538:	8a e0       	ldi	r24, 0x0A	; 10
    153a:	2e d5       	rcall	.+2652   	; 0x1f98 <USARTTX>
		#endif
		UCSR0B |= (1 << RXCIE0);
    153c:	e1 ec       	ldi	r30, 0xC1	; 193
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	80 68       	ori	r24, 0x80	; 128
    1544:	80 83       	st	Z, r24
	}
	return;
}
    1546:	ce 5e       	subi	r28, 0xEE	; 238
    1548:	de 4f       	sbci	r29, 0xFE	; 254
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	ff 90       	pop	r15
    155e:	ef 90       	pop	r14
    1560:	df 90       	pop	r13
    1562:	cf 90       	pop	r12
    1564:	bf 90       	pop	r11
    1566:	af 90       	pop	r10
    1568:	9f 90       	pop	r9
    156a:	8f 90       	pop	r8
    156c:	7f 90       	pop	r7
    156e:	6f 90       	pop	r6
    1570:	5f 90       	pop	r5
    1572:	4f 90       	pop	r4
    1574:	08 95       	ret

00001576 <macDecode>:
{
	UCSR1B = (1 << RXEN1) | (1 << TXEN1) | (1 << RXCIE1);   // Turn on the transmission and reception circuitry and enable rx interupt
	UCSR1C = (1 << UCSZ10) | (1 << UCSZ11); // Use 8-bit character sizes

	UBRR1H = 0x00; // Load upper 8-bits of the baud rate value into the high byte of the UBRR register 9600 baud
	UBRR1L = 0x33; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register 9600 baud
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	a0 97       	sbiw	r28, 0x20	; 32
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	28 e0       	ldi	r18, 0x08	; 8
    158c:	eb e1       	ldi	r30, 0x1B	; 27
    158e:	f2 e0       	ldi	r31, 0x02	; 2
    1590:	de 01       	movw	r26, r28
    1592:	11 96       	adiw	r26, 0x01	; 1
    1594:	01 90       	ld	r0, Z+
    1596:	0d 92       	st	X+, r0
    1598:	2a 95       	dec	r18
    159a:	e1 f7       	brne	.-8      	; 0x1594 <macDecode+0x1e>
    159c:	28 e0       	ldi	r18, 0x08	; 8
    159e:	e3 e2       	ldi	r30, 0x23	; 35
    15a0:	f2 e0       	ldi	r31, 0x02	; 2
    15a2:	de 01       	movw	r26, r28
    15a4:	19 96       	adiw	r26, 0x09	; 9
    15a6:	01 90       	ld	r0, Z+
    15a8:	0d 92       	st	X+, r0
    15aa:	2a 95       	dec	r18
    15ac:	e1 f7       	brne	.-8      	; 0x15a6 <macDecode+0x30>
    15ae:	28 e0       	ldi	r18, 0x08	; 8
    15b0:	eb e2       	ldi	r30, 0x2B	; 43
    15b2:	f2 e0       	ldi	r31, 0x02	; 2
    15b4:	de 01       	movw	r26, r28
    15b6:	51 96       	adiw	r26, 0x11	; 17
    15b8:	01 90       	ld	r0, Z+
    15ba:	0d 92       	st	X+, r0
    15bc:	2a 95       	dec	r18
    15be:	e1 f7       	brne	.-8      	; 0x15b8 <macDecode+0x42>
    15c0:	28 e0       	ldi	r18, 0x08	; 8
    15c2:	e3 e3       	ldi	r30, 0x33	; 51
    15c4:	f2 e0       	ldi	r31, 0x02	; 2
    15c6:	de 01       	movw	r26, r28
    15c8:	59 96       	adiw	r26, 0x19	; 25
    15ca:	01 90       	ld	r0, Z+
    15cc:	0d 92       	st	X+, r0
    15ce:	2a 95       	dec	r18
    15d0:	e1 f7       	brne	.-8      	; 0x15ca <macDecode+0x54>
    15d2:	82 30       	cpi	r24, 0x02	; 2
    15d4:	91 05       	cpc	r25, r1
    15d6:	99 f0       	breq	.+38     	; 0x15fe <macDecode+0x88>
    15d8:	1c f4       	brge	.+6      	; 0x15e0 <macDecode+0x6a>
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	39 f0       	breq	.+14     	; 0x15ec <macDecode+0x76>
    15de:	29 c0       	rjmp	.+82     	; 0x1632 <macDecode+0xbc>
    15e0:	83 30       	cpi	r24, 0x03	; 3
    15e2:	91 05       	cpc	r25, r1
    15e4:	a9 f0       	breq	.+42     	; 0x1610 <macDecode+0x9a>
    15e6:	04 97       	sbiw	r24, 0x04	; 4
    15e8:	e1 f0       	breq	.+56     	; 0x1622 <macDecode+0xac>
    15ea:	23 c0       	rjmp	.+70     	; 0x1632 <macDecode+0xbc>
    15ec:	88 e0       	ldi	r24, 0x08	; 8
    15ee:	fe 01       	movw	r30, r28
    15f0:	31 96       	adiw	r30, 0x01	; 1
    15f2:	db 01       	movw	r26, r22
    15f4:	01 90       	ld	r0, Z+
    15f6:	0d 92       	st	X+, r0
    15f8:	8a 95       	dec	r24
    15fa:	e1 f7       	brne	.-8      	; 0x15f4 <macDecode+0x7e>
    15fc:	1a c0       	rjmp	.+52     	; 0x1632 <macDecode+0xbc>
    15fe:	88 e0       	ldi	r24, 0x08	; 8
    1600:	fe 01       	movw	r30, r28
    1602:	39 96       	adiw	r30, 0x09	; 9
    1604:	db 01       	movw	r26, r22
    1606:	01 90       	ld	r0, Z+
    1608:	0d 92       	st	X+, r0
    160a:	8a 95       	dec	r24
    160c:	e1 f7       	brne	.-8      	; 0x1606 <macDecode+0x90>
    160e:	11 c0       	rjmp	.+34     	; 0x1632 <macDecode+0xbc>
    1610:	88 e0       	ldi	r24, 0x08	; 8
    1612:	fe 01       	movw	r30, r28
    1614:	71 96       	adiw	r30, 0x11	; 17
    1616:	db 01       	movw	r26, r22
    1618:	01 90       	ld	r0, Z+
    161a:	0d 92       	st	X+, r0
    161c:	8a 95       	dec	r24
    161e:	e1 f7       	brne	.-8      	; 0x1618 <macDecode+0xa2>
    1620:	08 c0       	rjmp	.+16     	; 0x1632 <macDecode+0xbc>
    1622:	88 e0       	ldi	r24, 0x08	; 8
    1624:	fe 01       	movw	r30, r28
    1626:	79 96       	adiw	r30, 0x19	; 25
    1628:	db 01       	movw	r26, r22
    162a:	01 90       	ld	r0, Z+
    162c:	0d 92       	st	X+, r0
    162e:	8a 95       	dec	r24
    1630:	e1 f7       	brne	.-8      	; 0x162a <macDecode+0xb4>
    1632:	a0 96       	adiw	r28, 0x20	; 32
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	08 95       	ret

00001644 <escape>:
	return 0;
	*/
	return LSB+4;
}

int escape(unsigned char *input, int inLen, unsigned char *output){
    1644:	0f 93       	push	r16
    1646:	1f 93       	push	r17
    1648:	cf 93       	push	r28
    164a:	df 93       	push	r29
	int pos = 1;

	output[0] = input[0];
    164c:	fc 01       	movw	r30, r24
    164e:	20 81       	ld	r18, Z
    1650:	fa 01       	movw	r30, r20
    1652:	20 83       	st	Z, r18
	for (int i=1; i<inLen; i++){
    1654:	62 30       	cpi	r22, 0x02	; 2
    1656:	71 05       	cpc	r23, r1
    1658:	6c f1       	brlt	.+90     	; 0x16b4 <escape+0x70>
    165a:	fc 01       	movw	r30, r24
    165c:	31 96       	adiw	r30, 0x01	; 1
    165e:	68 0f       	add	r22, r24
    1660:	79 1f       	adc	r23, r25
    1662:	21 e0       	ldi	r18, 0x01	; 1
    1664:	30 e0       	ldi	r19, 0x00	; 0
		switch(input[i]){
			case 0x7D:
			case 0x7E:
			case 0x11:
			case 0x13:
			output[pos++] = 0x7D;
    1666:	0d e7       	ldi	r16, 0x7D	; 125
			output[pos++] = input[i] ^ 0x20;
    1668:	10 e2       	ldi	r17, 0x20	; 32
    166a:	ef 01       	movw	r28, r30
int escape(unsigned char *input, int inLen, unsigned char *output){
	int pos = 1;

	output[0] = input[0];
	for (int i=1; i<inLen; i++){
		switch(input[i]){
    166c:	90 81       	ld	r25, Z
    166e:	93 31       	cpi	r25, 0x13	; 19
    1670:	41 f0       	breq	.+16     	; 0x1682 <escape+0x3e>
    1672:	18 f4       	brcc	.+6      	; 0x167a <escape+0x36>
    1674:	91 31       	cpi	r25, 0x11	; 17
    1676:	99 f4       	brne	.+38     	; 0x169e <escape+0x5a>
    1678:	04 c0       	rjmp	.+8      	; 0x1682 <escape+0x3e>
    167a:	83 e8       	ldi	r24, 0x83	; 131
    167c:	89 0f       	add	r24, r25
    167e:	82 30       	cpi	r24, 0x02	; 2
    1680:	70 f4       	brcc	.+28     	; 0x169e <escape+0x5a>
			case 0x7D:
			case 0x7E:
			case 0x11:
			case 0x13:
			output[pos++] = 0x7D;
    1682:	da 01       	movw	r26, r20
    1684:	a2 0f       	add	r26, r18
    1686:	b3 1f       	adc	r27, r19
    1688:	0c 93       	st	X, r16
			output[pos++] = input[i] ^ 0x20;
    168a:	d9 01       	movw	r26, r18
    168c:	11 96       	adiw	r26, 0x01	; 1
    168e:	a4 0f       	add	r26, r20
    1690:	b5 1f       	adc	r27, r21
    1692:	2e 5f       	subi	r18, 0xFE	; 254
    1694:	3f 4f       	sbci	r19, 0xFF	; 255
    1696:	98 81       	ld	r25, Y
    1698:	91 27       	eor	r25, r17
    169a:	9c 93       	st	X, r25
			break;
    169c:	06 c0       	rjmp	.+12     	; 0x16aa <escape+0x66>
			default:
			output[pos++] = input[i];
    169e:	da 01       	movw	r26, r20
    16a0:	a2 0f       	add	r26, r18
    16a2:	b3 1f       	adc	r27, r19
    16a4:	9c 93       	st	X, r25
    16a6:	2f 5f       	subi	r18, 0xFF	; 255
    16a8:	3f 4f       	sbci	r19, 0xFF	; 255
    16aa:	31 96       	adiw	r30, 0x01	; 1

int escape(unsigned char *input, int inLen, unsigned char *output){
	int pos = 1;

	output[0] = input[0];
	for (int i=1; i<inLen; i++){
    16ac:	e6 17       	cp	r30, r22
    16ae:	f7 07       	cpc	r31, r23
    16b0:	e1 f6       	brne	.-72     	; 0x166a <escape+0x26>
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <escape+0x74>
	*/
	return LSB+4;
}

int escape(unsigned char *input, int inLen, unsigned char *output){
	int pos = 1;
    16b4:	21 e0       	ldi	r18, 0x01	; 1
    16b6:	30 e0       	ldi	r19, 0x00	; 0
			break;
		}
	}

	return pos;
}
    16b8:	c9 01       	movw	r24, r18
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	1f 91       	pop	r17
    16c0:	0f 91       	pop	r16
    16c2:	08 95       	ret

000016c4 <send>:
		
	
}


void send(unsigned char *msg, int len, int macAddr){
    16c4:	ef 92       	push	r14
    16c6:	ff 92       	push	r15
    16c8:	0f 93       	push	r16
    16ca:	1f 93       	push	r17
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	c8 50       	subi	r28, 0x08	; 8
    16d6:	d2 40       	sbci	r29, 0x02	; 2
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	7c 01       	movw	r14, r24
    16e4:	8b 01       	movw	r16, r22
    16e6:	ca 01       	movw	r24, r20
	unsigned char escBuff[256];
	int escapedLen = 0;
	unsigned char checksum = 0;
	unsigned char addr[8];
	
	macDecode(macAddr,addr); //call to change #define int to 8 byte address
    16e8:	be 01       	movw	r22, r28
    16ea:	6f 5f       	subi	r22, 0xFF	; 255
    16ec:	7d 4f       	sbci	r23, 0xFD	; 253
    16ee:	43 df       	rcall	.-378    	; 0x1576 <macDecode>

	buf[0] = 0x7E;
    16f0:	8e e7       	ldi	r24, 0x7E	; 126
    16f2:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x00;
    16f4:	1a 82       	std	Y+2, r1	; 0x02
	// LSB = content + 5 (content length + API type + frameid + addr(2) + options)
	buf[2] = (unsigned char)(len + 11);
    16f6:	8b e0       	ldi	r24, 0x0B	; 11
    16f8:	80 0f       	add	r24, r16
    16fa:	8b 83       	std	Y+3, r24	; 0x03
	buf[3] = 0x00;  // frame type - 64bit tx
    16fc:	1c 82       	std	Y+4, r1	; 0x04
	buf[4] = 0x00;  // Frame ID
    16fe:	1d 82       	std	Y+5, r1	; 0x05
    1700:	de 01       	movw	r26, r28
    1702:	af 5f       	subi	r26, 0xFF	; 255
    1704:	bd 4f       	sbci	r27, 0xFD	; 253
    1706:	fe 01       	movw	r30, r28
    1708:	36 96       	adiw	r30, 0x06	; 6
    170a:	9e 01       	movw	r18, r28
    170c:	22 5f       	subi	r18, 0xF2	; 242
    170e:	3f 4f       	sbci	r19, 0xFF	; 255
	for (int j = 0;j<8;j++)
	{
		buf[j+5] = addr[j];
    1710:	9d 91       	ld	r25, X+
    1712:	91 93       	st	Z+, r25
	buf[1] = 0x00;
	// LSB = content + 5 (content length + API type + frameid + addr(2) + options)
	buf[2] = (unsigned char)(len + 11);
	buf[3] = 0x00;  // frame type - 64bit tx
	buf[4] = 0x00;  // Frame ID
	for (int j = 0;j<8;j++)
    1714:	e2 17       	cp	r30, r18
    1716:	f3 07       	cpc	r31, r19
    1718:	d9 f7       	brne	.-10     	; 0x1710 <send+0x4c>
	{
		buf[j+5] = addr[j];
	}
	buf[13] = 0x01;  // Disable acknowledge>>>>>>>>>>may need to reenable for rdf,auto responce gives rssi?
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	8e 87       	std	Y+14, r24	; 0x0e
	memcpy(&buf[14], msg, len);
    171e:	a8 01       	movw	r20, r16
    1720:	b7 01       	movw	r22, r14
    1722:	ce 01       	movw	r24, r28
    1724:	0f 96       	adiw	r24, 0x0f	; 15
    1726:	0e 94 c7 13 	call	0x278e	; 0x278e <memcpy>

	for (int i=3;i<len+14;i++){
    172a:	a8 01       	movw	r20, r16
    172c:	42 5f       	subi	r20, 0xF2	; 242
    172e:	5f 4f       	sbci	r21, 0xFF	; 255
    1730:	44 30       	cpi	r20, 0x04	; 4
    1732:	51 05       	cpc	r21, r1
    1734:	74 f0       	brlt	.+28     	; 0x1752 <send+0x8e>
    1736:	fe 01       	movw	r30, r28
    1738:	34 96       	adiw	r30, 0x04	; 4
    173a:	9e 01       	movw	r18, r28
    173c:	20 0f       	add	r18, r16
    173e:	31 1f       	adc	r19, r17
    1740:	21 5f       	subi	r18, 0xF1	; 241
    1742:	3f 4f       	sbci	r19, 0xFF	; 255
    1744:	80 e0       	ldi	r24, 0x00	; 0
		checksum += buf[i];
    1746:	91 91       	ld	r25, Z+
    1748:	89 0f       	add	r24, r25
		buf[j+5] = addr[j];
	}
	buf[13] = 0x01;  // Disable acknowledge>>>>>>>>>>may need to reenable for rdf,auto responce gives rssi?
	memcpy(&buf[14], msg, len);

	for (int i=3;i<len+14;i++){
    174a:	e2 17       	cp	r30, r18
    174c:	f3 07       	cpc	r31, r19
    174e:	d9 f7       	brne	.-10     	; 0x1746 <send+0x82>
    1750:	01 c0       	rjmp	.+2      	; 0x1754 <send+0x90>
void send(unsigned char *msg, int len, int macAddr){
	
	unsigned char buf[256];
	unsigned char escBuff[256];
	int escapedLen = 0;
	unsigned char checksum = 0;
    1752:	80 e0       	ldi	r24, 0x00	; 0
	for (int i=3;i<len+14;i++){
		checksum += buf[i];
	}

	// Total length = LSB + 9 (LSB value + MSB + LSB + start delimiter + checksum)
	buf[len+14] = 0xFF - checksum;
    1754:	e1 e0       	ldi	r30, 0x01	; 1
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	ec 0f       	add	r30, r28
    175a:	fd 1f       	adc	r31, r29
    175c:	e4 0f       	add	r30, r20
    175e:	f5 1f       	adc	r31, r21
    1760:	80 95       	com	r24
    1762:	80 83       	st	Z, r24
	escapedLen = escape(buf, len+15, escBuff);
    1764:	b8 01       	movw	r22, r16
    1766:	61 5f       	subi	r22, 0xF1	; 241
    1768:	7f 4f       	sbci	r23, 0xFF	; 255
    176a:	ae 01       	movw	r20, r28
    176c:	4f 5f       	subi	r20, 0xFF	; 255
    176e:	5e 4f       	sbci	r21, 0xFE	; 254
    1770:	ce 01       	movw	r24, r28
    1772:	01 96       	adiw	r24, 0x01	; 1
    1774:	67 df       	rcall	.-306    	; 0x1644 <escape>
	
	//send data out serial port
	for (int i = 0; i<escapedLen;i++)
    1776:	18 16       	cp	r1, r24
    1778:	19 06       	cpc	r1, r25
    177a:	ac f4       	brge	.+42     	; 0x17a6 <send+0xe2>
    177c:	be 01       	movw	r22, r28
    177e:	6f 5f       	subi	r22, 0xFF	; 255
    1780:	7e 4f       	sbci	r23, 0xFE	; 254
    1782:	9b 01       	movw	r18, r22
    1784:	28 0f       	add	r18, r24
    1786:	39 1f       	adc	r19, r25
	{
		while (!(UCSR1A & (1 << UDRE1))) {};
    1788:	e8 ec       	ldi	r30, 0xC8	; 200
    178a:	f0 e0       	ldi	r31, 0x00	; 0
		UDR1 = escBuff[i];
    178c:	4e ec       	ldi	r20, 0xCE	; 206
    178e:	50 e0       	ldi	r21, 0x00	; 0
	escapedLen = escape(buf, len+15, escBuff);
	
	//send data out serial port
	for (int i = 0; i<escapedLen;i++)
	{
		while (!(UCSR1A & (1 << UDRE1))) {};
    1790:	80 81       	ld	r24, Z
    1792:	85 ff       	sbrs	r24, 5
    1794:	fd cf       	rjmp	.-6      	; 0x1790 <send+0xcc>
		UDR1 = escBuff[i];
    1796:	db 01       	movw	r26, r22
    1798:	8d 91       	ld	r24, X+
    179a:	bd 01       	movw	r22, r26
    179c:	da 01       	movw	r26, r20
    179e:	8c 93       	st	X, r24
	// Total length = LSB + 9 (LSB value + MSB + LSB + start delimiter + checksum)
	buf[len+14] = 0xFF - checksum;
	escapedLen = escape(buf, len+15, escBuff);
	
	//send data out serial port
	for (int i = 0; i<escapedLen;i++)
    17a0:	62 17       	cp	r22, r18
    17a2:	73 07       	cpc	r23, r19
    17a4:	a9 f7       	brne	.-22     	; 0x1790 <send+0xcc>
	{
		while (!(UCSR1A & (1 << UDRE1))) {};
		UDR1 = escBuff[i];
	}
}
    17a6:	c8 5f       	subi	r28, 0xF8	; 248
    17a8:	dd 4f       	sbci	r29, 0xFD	; 253
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	ff 90       	pop	r15
    17be:	ef 90       	pop	r14
    17c0:	08 95       	ret

000017c2 <collectData>:
void dataOnlyMain(void){
	struct DataStruct data;
	rocketInit(&data);
	while (1){
		rocketMain(&data);
	}
    17c2:	0f 93       	push	r16
    17c4:	1f 93       	push	r17
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
    17ce:	2a 97       	sbiw	r28, 0x0a	; 10
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
    17da:	8c 01       	movw	r16, r24
    17dc:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <GetAccelGyroXYZ>
    17e0:	be 01       	movw	r22, r28
    17e2:	6d 5f       	subi	r22, 0xFD	; 253
    17e4:	7f 4f       	sbci	r23, 0xFF	; 255
    17e6:	c8 01       	movw	r24, r16
    17e8:	8f 5b       	subi	r24, 0xBF	; 191
    17ea:	9f 4f       	sbci	r25, 0xFF	; 255
    17ec:	b8 d9       	rcall	.-3216   	; 0xb5e <GetCPT>
    17ee:	8f 81       	ldd	r24, Y+7	; 0x07
    17f0:	f8 01       	movw	r30, r16
    17f2:	84 af       	std	Z+60, r24	; 0x3c
    17f4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <readEmatch>
    17f8:	f8 01       	movw	r30, r16
    17fa:	87 af       	std	Z+63, r24	; 0x3f
    17fc:	ce 01       	movw	r24, r28
    17fe:	03 96       	adiw	r24, 0x03	; 3
    1800:	dc d9       	rcall	.-3144   	; 0xbba <CalcAltitudeConstTemp>
    1802:	ec d4       	rcall	.+2520   	; 0x21dc <__fixunssfsi>
    1804:	7a 83       	std	Y+2, r23	; 0x02
    1806:	69 83       	std	Y+1, r22	; 0x01
    1808:	69 81       	ldd	r22, Y+1	; 0x01
    180a:	7a 81       	ldd	r23, Y+2	; 0x02
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	15 d5       	rcall	.+2602   	; 0x223c <__floatunsisf>
    1812:	f8 01       	movw	r30, r16
    1814:	62 a7       	std	Z+42, r22	; 0x2a
    1816:	73 a7       	std	Z+43, r23	; 0x2b
    1818:	84 a7       	std	Z+44, r24	; 0x2c
    181a:	95 a7       	std	Z+45, r25	; 0x2d
    181c:	c8 01       	movw	r24, r16
    181e:	48 96       	adiw	r24, 0x18	; 24
    1820:	9d dd       	rcall	.-1222   	; 0x135c <getGPSData>
    1822:	2a 96       	adiw	r28, 0x0a	; 10
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	1f 91       	pop	r17
    1834:	0f 91       	pop	r16
    1836:	08 95       	ret

00001838 <formPayloadMode2>:
    1838:	ef 92       	push	r14
    183a:	ff 92       	push	r15
    183c:	0f 93       	push	r16
    183e:	1f 93       	push	r17
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	27 97       	sbiw	r28, 0x07	; 7
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
    1854:	7c 01       	movw	r14, r24
    1856:	8b 01       	movw	r16, r22
    1858:	1a 82       	std	Y+2, r1	; 0x02
    185a:	19 82       	std	Y+1, r1	; 0x01
    185c:	1b 82       	std	Y+3, r1	; 0x03
    185e:	1c 82       	std	Y+4, r1	; 0x04
    1860:	1d 82       	std	Y+5, r1	; 0x05
    1862:	1e 82       	std	Y+6, r1	; 0x06
    1864:	1f 82       	std	Y+7, r1	; 0x07
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	fb 01       	movw	r30, r22
    186a:	e8 0f       	add	r30, r24
    186c:	f1 1d       	adc	r31, r1
    186e:	82 e0       	ldi	r24, 0x02	; 2
    1870:	80 83       	st	Z, r24
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	8f 5f       	subi	r24, 0xFF	; 255
    1876:	8b 83       	std	Y+3, r24	; 0x03
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	fb 01       	movw	r30, r22
    187c:	e8 0f       	add	r30, r24
    187e:	f1 1d       	adc	r31, r1
    1880:	10 82       	st	Z, r1
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	8f 5f       	subi	r24, 0xFF	; 255
    1886:	8b 83       	std	Y+3, r24	; 0x03
    1888:	f7 01       	movw	r30, r14
    188a:	62 a5       	ldd	r22, Z+42	; 0x2a
    188c:	73 a5       	ldd	r23, Z+43	; 0x2b
    188e:	84 a5       	ldd	r24, Z+44	; 0x2c
    1890:	95 a5       	ldd	r25, Z+45	; 0x2d
    1892:	80 d6       	rcall	.+3328   	; 0x2594 <round>
    1894:	a3 d4       	rcall	.+2374   	; 0x21dc <__fixunssfsi>
    1896:	7a 83       	std	Y+2, r23	; 0x02
    1898:	69 83       	std	Y+1, r22	; 0x01
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	f8 01       	movw	r30, r16
    189e:	e8 0f       	add	r30, r24
    18a0:	f1 1d       	adc	r31, r1
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	9a 81       	ldd	r25, Y+2	; 0x02
    18a6:	91 83       	std	Z+1, r25	; 0x01
    18a8:	80 83       	st	Z, r24
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	8e 5f       	subi	r24, 0xFE	; 254
    18ae:	8b 83       	std	Y+3, r24	; 0x03
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	98 01       	movw	r18, r16
    18b4:	28 0f       	add	r18, r24
    18b6:	31 1d       	adc	r19, r1
    18b8:	f7 01       	movw	r30, r14
    18ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    18bc:	93 8d       	ldd	r25, Z+27	; 0x1b
    18be:	a4 8d       	ldd	r26, Z+28	; 0x1c
    18c0:	b5 8d       	ldd	r27, Z+29	; 0x1d
    18c2:	f9 01       	movw	r30, r18
    18c4:	80 83       	st	Z, r24
    18c6:	91 83       	std	Z+1, r25	; 0x01
    18c8:	a2 83       	std	Z+2, r26	; 0x02
    18ca:	b3 83       	std	Z+3, r27	; 0x03
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	8c 5f       	subi	r24, 0xFC	; 252
    18d0:	8b 83       	std	Y+3, r24	; 0x03
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	98 01       	movw	r18, r16
    18d6:	28 0f       	add	r18, r24
    18d8:	31 1d       	adc	r19, r1
    18da:	f7 01       	movw	r30, r14
    18dc:	86 8d       	ldd	r24, Z+30	; 0x1e
    18de:	97 8d       	ldd	r25, Z+31	; 0x1f
    18e0:	a0 a1       	ldd	r26, Z+32	; 0x20
    18e2:	b1 a1       	ldd	r27, Z+33	; 0x21
    18e4:	f9 01       	movw	r30, r18
    18e6:	80 83       	st	Z, r24
    18e8:	91 83       	std	Z+1, r25	; 0x01
    18ea:	a2 83       	std	Z+2, r26	; 0x02
    18ec:	b3 83       	std	Z+3, r27	; 0x03
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	8c 5f       	subi	r24, 0xFC	; 252
    18f2:	8b 83       	std	Y+3, r24	; 0x03
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	98 01       	movw	r18, r16
    18f8:	28 0f       	add	r18, r24
    18fa:	31 1d       	adc	r19, r1
    18fc:	f7 01       	movw	r30, r14
    18fe:	80 81       	ld	r24, Z
    1900:	91 81       	ldd	r25, Z+1	; 0x01
    1902:	a2 81       	ldd	r26, Z+2	; 0x02
    1904:	b3 81       	ldd	r27, Z+3	; 0x03
    1906:	f9 01       	movw	r30, r18
    1908:	80 83       	st	Z, r24
    190a:	91 83       	std	Z+1, r25	; 0x01
    190c:	a2 83       	std	Z+2, r26	; 0x02
    190e:	b3 83       	std	Z+3, r27	; 0x03
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	8c 5f       	subi	r24, 0xFC	; 252
    1914:	8b 83       	std	Y+3, r24	; 0x03
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	98 01       	movw	r18, r16
    191a:	28 0f       	add	r18, r24
    191c:	31 1d       	adc	r19, r1
    191e:	f7 01       	movw	r30, r14
    1920:	84 81       	ldd	r24, Z+4	; 0x04
    1922:	95 81       	ldd	r25, Z+5	; 0x05
    1924:	a6 81       	ldd	r26, Z+6	; 0x06
    1926:	b7 81       	ldd	r27, Z+7	; 0x07
    1928:	f9 01       	movw	r30, r18
    192a:	80 83       	st	Z, r24
    192c:	91 83       	std	Z+1, r25	; 0x01
    192e:	a2 83       	std	Z+2, r26	; 0x02
    1930:	b3 83       	std	Z+3, r27	; 0x03
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	8c 5f       	subi	r24, 0xFC	; 252
    1936:	8b 83       	std	Y+3, r24	; 0x03
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	98 01       	movw	r18, r16
    193c:	28 0f       	add	r18, r24
    193e:	31 1d       	adc	r19, r1
    1940:	f7 01       	movw	r30, r14
    1942:	80 85       	ldd	r24, Z+8	; 0x08
    1944:	91 85       	ldd	r25, Z+9	; 0x09
    1946:	a2 85       	ldd	r26, Z+10	; 0x0a
    1948:	b3 85       	ldd	r27, Z+11	; 0x0b
    194a:	f9 01       	movw	r30, r18
    194c:	80 83       	st	Z, r24
    194e:	91 83       	std	Z+1, r25	; 0x01
    1950:	a2 83       	std	Z+2, r26	; 0x02
    1952:	b3 83       	std	Z+3, r27	; 0x03
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	8c 5f       	subi	r24, 0xFC	; 252
    1958:	8b 83       	std	Y+3, r24	; 0x03
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	98 01       	movw	r18, r16
    195e:	28 0f       	add	r18, r24
    1960:	31 1d       	adc	r19, r1
    1962:	f7 01       	movw	r30, r14
    1964:	84 85       	ldd	r24, Z+12	; 0x0c
    1966:	95 85       	ldd	r25, Z+13	; 0x0d
    1968:	a6 85       	ldd	r26, Z+14	; 0x0e
    196a:	b7 85       	ldd	r27, Z+15	; 0x0f
    196c:	f9 01       	movw	r30, r18
    196e:	80 83       	st	Z, r24
    1970:	91 83       	std	Z+1, r25	; 0x01
    1972:	a2 83       	std	Z+2, r26	; 0x02
    1974:	b3 83       	std	Z+3, r27	; 0x03
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	8c 5f       	subi	r24, 0xFC	; 252
    197a:	8b 83       	std	Y+3, r24	; 0x03
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	98 01       	movw	r18, r16
    1980:	28 0f       	add	r18, r24
    1982:	31 1d       	adc	r19, r1
    1984:	f7 01       	movw	r30, r14
    1986:	80 89       	ldd	r24, Z+16	; 0x10
    1988:	91 89       	ldd	r25, Z+17	; 0x11
    198a:	a2 89       	ldd	r26, Z+18	; 0x12
    198c:	b3 89       	ldd	r27, Z+19	; 0x13
    198e:	f9 01       	movw	r30, r18
    1990:	80 83       	st	Z, r24
    1992:	91 83       	std	Z+1, r25	; 0x01
    1994:	a2 83       	std	Z+2, r26	; 0x02
    1996:	b3 83       	std	Z+3, r27	; 0x03
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	8c 5f       	subi	r24, 0xFC	; 252
    199c:	8b 83       	std	Y+3, r24	; 0x03
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	98 01       	movw	r18, r16
    19a2:	28 0f       	add	r18, r24
    19a4:	31 1d       	adc	r19, r1
    19a6:	f7 01       	movw	r30, r14
    19a8:	84 89       	ldd	r24, Z+20	; 0x14
    19aa:	95 89       	ldd	r25, Z+21	; 0x15
    19ac:	a6 89       	ldd	r26, Z+22	; 0x16
    19ae:	b7 89       	ldd	r27, Z+23	; 0x17
    19b0:	f9 01       	movw	r30, r18
    19b2:	80 83       	st	Z, r24
    19b4:	91 83       	std	Z+1, r25	; 0x01
    19b6:	a2 83       	std	Z+2, r26	; 0x02
    19b8:	b3 83       	std	Z+3, r27	; 0x03
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	8c 5f       	subi	r24, 0xFC	; 252
    19be:	8b 83       	std	Y+3, r24	; 0x03
    19c0:	f7 01       	movw	r30, r14
    19c2:	63 ad       	ldd	r22, Z+59	; 0x3b
    19c4:	70 e0       	ldi	r23, 0x00	; 0
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	38 d4       	rcall	.+2160   	; 0x223c <__floatunsisf>
    19cc:	6c 83       	std	Y+4, r22	; 0x04
    19ce:	7d 83       	std	Y+5, r23	; 0x05
    19d0:	8e 83       	std	Y+6, r24	; 0x06
    19d2:	9f 83       	std	Y+7, r25	; 0x07
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	f8 01       	movw	r30, r16
    19d8:	e8 0f       	add	r30, r24
    19da:	f1 1d       	adc	r31, r1
    19dc:	8c 81       	ldd	r24, Y+4	; 0x04
    19de:	9d 81       	ldd	r25, Y+5	; 0x05
    19e0:	ae 81       	ldd	r26, Y+6	; 0x06
    19e2:	bf 81       	ldd	r27, Y+7	; 0x07
    19e4:	80 83       	st	Z, r24
    19e6:	91 83       	std	Z+1, r25	; 0x01
    19e8:	a2 83       	std	Z+2, r26	; 0x02
    19ea:	b3 83       	std	Z+3, r27	; 0x03
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	8c 5f       	subi	r24, 0xFC	; 252
    19f0:	8b 83       	std	Y+3, r24	; 0x03
    19f2:	f7 01       	movw	r30, r14
    19f4:	64 ad       	ldd	r22, Z+60	; 0x3c
    19f6:	70 e0       	ldi	r23, 0x00	; 0
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	1f d4       	rcall	.+2110   	; 0x223c <__floatunsisf>
    19fe:	6c 83       	std	Y+4, r22	; 0x04
    1a00:	7d 83       	std	Y+5, r23	; 0x05
    1a02:	8e 83       	std	Y+6, r24	; 0x06
    1a04:	9f 83       	std	Y+7, r25	; 0x07
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	f8 01       	movw	r30, r16
    1a0a:	e8 0f       	add	r30, r24
    1a0c:	f1 1d       	adc	r31, r1
    1a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a10:	9d 81       	ldd	r25, Y+5	; 0x05
    1a12:	ae 81       	ldd	r26, Y+6	; 0x06
    1a14:	bf 81       	ldd	r27, Y+7	; 0x07
    1a16:	80 83       	st	Z, r24
    1a18:	91 83       	std	Z+1, r25	; 0x01
    1a1a:	a2 83       	std	Z+2, r26	; 0x02
    1a1c:	b3 83       	std	Z+3, r27	; 0x03
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	8c 5f       	subi	r24, 0xFC	; 252
    1a22:	8b 83       	std	Y+3, r24	; 0x03
    1a24:	1c 82       	std	Y+4, r1	; 0x04
    1a26:	1d 82       	std	Y+5, r1	; 0x05
    1a28:	1e 82       	std	Y+6, r1	; 0x06
    1a2a:	1f 82       	std	Y+7, r1	; 0x07
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	f8 01       	movw	r30, r16
    1a30:	e8 0f       	add	r30, r24
    1a32:	f1 1d       	adc	r31, r1
    1a34:	8c 81       	ldd	r24, Y+4	; 0x04
    1a36:	9d 81       	ldd	r25, Y+5	; 0x05
    1a38:	ae 81       	ldd	r26, Y+6	; 0x06
    1a3a:	bf 81       	ldd	r27, Y+7	; 0x07
    1a3c:	80 83       	st	Z, r24
    1a3e:	91 83       	std	Z+1, r25	; 0x01
    1a40:	a2 83       	std	Z+2, r26	; 0x02
    1a42:	b3 83       	std	Z+3, r27	; 0x03
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	8c 5f       	subi	r24, 0xFC	; 252
    1a48:	8b 83       	std	Y+3, r24	; 0x03
    1a4a:	f7 01       	movw	r30, r14
    1a4c:	60 8d       	ldd	r22, Z+24	; 0x18
    1a4e:	71 8d       	ldd	r23, Z+25	; 0x19
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	f3 d3       	rcall	.+2022   	; 0x223c <__floatunsisf>
    1a56:	9e d5       	rcall	.+2876   	; 0x2594 <round>
    1a58:	c1 d3       	rcall	.+1922   	; 0x21dc <__fixunssfsi>
    1a5a:	7a 83       	std	Y+2, r23	; 0x02
    1a5c:	69 83       	std	Y+1, r22	; 0x01
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	f8 01       	movw	r30, r16
    1a62:	e8 0f       	add	r30, r24
    1a64:	f1 1d       	adc	r31, r1
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
    1a68:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6a:	91 83       	std	Z+1, r25	; 0x01
    1a6c:	80 83       	st	Z, r24
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	8e 5f       	subi	r24, 0xFE	; 254
    1a72:	8b 83       	std	Y+3, r24	; 0x03
    1a74:	f7 01       	movw	r30, r14
    1a76:	62 a1       	ldd	r22, Z+34	; 0x22
    1a78:	73 a1       	ldd	r23, Z+35	; 0x23
    1a7a:	84 a1       	ldd	r24, Z+36	; 0x24
    1a7c:	95 a1       	ldd	r25, Z+37	; 0x25
    1a7e:	8a d5       	rcall	.+2836   	; 0x2594 <round>
    1a80:	ad d3       	rcall	.+1882   	; 0x21dc <__fixunssfsi>
    1a82:	7a 83       	std	Y+2, r23	; 0x02
    1a84:	69 83       	std	Y+1, r22	; 0x01
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	f8 01       	movw	r30, r16
    1a8a:	e8 0f       	add	r30, r24
    1a8c:	f1 1d       	adc	r31, r1
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	9a 81       	ldd	r25, Y+2	; 0x02
    1a92:	91 83       	std	Z+1, r25	; 0x01
    1a94:	80 83       	st	Z, r24
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	8e 5f       	subi	r24, 0xFE	; 254
    1a9a:	8b 83       	std	Y+3, r24	; 0x03
    1a9c:	f7 01       	movw	r30, r14
    1a9e:	66 a1       	ldd	r22, Z+38	; 0x26
    1aa0:	77 a1       	ldd	r23, Z+39	; 0x27
    1aa2:	80 a5       	ldd	r24, Z+40	; 0x28
    1aa4:	91 a5       	ldd	r25, Z+41	; 0x29
    1aa6:	76 d5       	rcall	.+2796   	; 0x2594 <round>
    1aa8:	99 d3       	rcall	.+1842   	; 0x21dc <__fixunssfsi>
    1aaa:	7a 83       	std	Y+2, r23	; 0x02
    1aac:	69 83       	std	Y+1, r22	; 0x01
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	e8 0f       	add	r30, r24
    1ab4:	f1 1d       	adc	r31, r1
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aba:	91 83       	std	Z+1, r25	; 0x01
    1abc:	80 83       	st	Z, r24
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	8e 5f       	subi	r24, 0xFE	; 254
    1ac2:	8b 83       	std	Y+3, r24	; 0x03
    1ac4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac6:	f7 01       	movw	r30, r14
    1ac8:	86 ad       	ldd	r24, Z+62	; 0x3e
    1aca:	f8 01       	movw	r30, r16
    1acc:	e9 0f       	add	r30, r25
    1ace:	f1 1d       	adc	r31, r1
    1ad0:	80 83       	st	Z, r24
    1ad2:	27 96       	adiw	r28, 0x07	; 7
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	f8 94       	cli
    1ad8:	de bf       	out	0x3e, r29	; 62
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	cd bf       	out	0x3d, r28	; 61
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	1f 91       	pop	r17
    1ae4:	0f 91       	pop	r16
    1ae6:	ff 90       	pop	r15
    1ae8:	ef 90       	pop	r14
    1aea:	08 95       	ret

00001aec <rocketInit>:
    1aec:	0f 93       	push	r16
    1aee:	1f 93       	push	r17
    1af0:	cf 93       	push	r28
    1af2:	df 93       	push	r29
    1af4:	1f 92       	push	r1
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
    1afa:	8c 01       	movw	r16, r24
    1afc:	2f ef       	ldi	r18, 0xFF	; 255
    1afe:	80 e7       	ldi	r24, 0x70	; 112
    1b00:	92 e0       	ldi	r25, 0x02	; 2
    1b02:	21 50       	subi	r18, 0x01	; 1
    1b04:	80 40       	sbci	r24, 0x00	; 0
    1b06:	90 40       	sbci	r25, 0x00	; 0
    1b08:	e1 f7       	brne	.-8      	; 0x1b02 <rocketInit+0x16>
    1b0a:	00 c0       	rjmp	.+0      	; 0x1b0c <rocketInit+0x20>
    1b0c:	00 00       	nop
    1b0e:	41 e0       	ldi	r20, 0x01	; 1
    1b10:	60 e0       	ldi	r22, 0x00	; 0
    1b12:	76 e9       	ldi	r23, 0x96	; 150
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	1d d2       	rcall	.+1082   	; 0x1f54 <InitUSART>
    1b1a:	10 da       	rcall	.-3040   	; 0xf3c <InitGPS>
    1b1c:	0e 94 a7 03 	call	0x74e	; 0x74e <InitAccel>
    1b20:	c8 01       	movw	r24, r16
    1b22:	8f 5b       	subi	r24, 0xBF	; 191
    1b24:	9f 4f       	sbci	r25, 0xFF	; 255
    1b26:	0e 94 30 04 	call	0x860	; 0x860 <InitAltimeter>
    1b2a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <readEmatch>
    1b2e:	f8 01       	movw	r30, r16
    1b30:	87 af       	std	Z+63, r24	; 0x3f
    1b32:	12 a6       	std	Z+42, r1	; 0x2a
    1b34:	13 a6       	std	Z+43, r1	; 0x2b
    1b36:	14 a6       	std	Z+44, r1	; 0x2c
    1b38:	15 a6       	std	Z+45, r1	; 0x2d
    1b3a:	16 a6       	std	Z+46, r1	; 0x2e
    1b3c:	17 a6       	std	Z+47, r1	; 0x2f
    1b3e:	10 aa       	std	Z+48, r1	; 0x30
    1b40:	11 aa       	std	Z+49, r1	; 0x31
    1b42:	12 aa       	std	Z+50, r1	; 0x32
    1b44:	13 aa       	std	Z+51, r1	; 0x33
    1b46:	14 aa       	std	Z+52, r1	; 0x34
    1b48:	15 aa       	std	Z+53, r1	; 0x35
    1b4a:	16 aa       	std	Z+54, r1	; 0x36
    1b4c:	17 aa       	std	Z+55, r1	; 0x37
    1b4e:	10 ae       	std	Z+56, r1	; 0x38
    1b50:	11 ae       	std	Z+57, r1	; 0x39
    1b52:	12 ae       	std	Z+58, r1	; 0x3a
    1b54:	11 8e       	std	Z+25, r1	; 0x19
    1b56:	10 8e       	std	Z+24, r1	; 0x18
    1b58:	12 8e       	std	Z+26, r1	; 0x1a
    1b5a:	13 8e       	std	Z+27, r1	; 0x1b
    1b5c:	14 8e       	std	Z+28, r1	; 0x1c
    1b5e:	15 8e       	std	Z+29, r1	; 0x1d
    1b60:	16 8e       	std	Z+30, r1	; 0x1e
    1b62:	17 8e       	std	Z+31, r1	; 0x1f
    1b64:	10 a2       	std	Z+32, r1	; 0x20
    1b66:	11 a2       	std	Z+33, r1	; 0x21
    1b68:	16 a2       	std	Z+38, r1	; 0x26
    1b6a:	17 a2       	std	Z+39, r1	; 0x27
    1b6c:	10 a6       	std	Z+40, r1	; 0x28
    1b6e:	11 a6       	std	Z+41, r1	; 0x29
    1b70:	16 ae       	std	Z+62, r1	; 0x3e
    1b72:	82 e0       	ldi	r24, 0x02	; 2
    1b74:	85 af       	std	Z+61, r24	; 0x3d
    1b76:	13 ae       	std	Z+59, r1	; 0x3b
    1b78:	19 82       	std	Y+1, r1	; 0x01
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	86 30       	cpi	r24, 0x06	; 6
    1b7e:	f8 f4       	brcc	.+62     	; 0x1bbe <rocketInit+0xd2>
    1b80:	c8 01       	movw	r24, r16
    1b82:	1f de       	rcall	.-962    	; 0x17c2 <collectData>
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 ec       	ldi	r20, 0xC0	; 192
    1b8a:	50 e4       	ldi	r21, 0x40	; 64
    1b8c:	f8 01       	movw	r30, r16
    1b8e:	62 a5       	ldd	r22, Z+42	; 0x2a
    1b90:	73 a5       	ldd	r23, Z+43	; 0x2b
    1b92:	84 a5       	ldd	r24, Z+44	; 0x2c
    1b94:	95 a5       	ldd	r25, Z+45	; 0x2d
    1b96:	7b d2       	rcall	.+1270   	; 0x208e <__divsf3>
    1b98:	9b 01       	movw	r18, r22
    1b9a:	ac 01       	movw	r20, r24
    1b9c:	f8 01       	movw	r30, r16
    1b9e:	66 a5       	ldd	r22, Z+46	; 0x2e
    1ba0:	77 a5       	ldd	r23, Z+47	; 0x2f
    1ba2:	80 a9       	ldd	r24, Z+48	; 0x30
    1ba4:	91 a9       	ldd	r25, Z+49	; 0x31
    1ba6:	0b d2       	rcall	.+1046   	; 0x1fbe <__addsf3>
    1ba8:	f8 01       	movw	r30, r16
    1baa:	66 a7       	std	Z+46, r22	; 0x2e
    1bac:	77 a7       	std	Z+47, r23	; 0x2f
    1bae:	80 ab       	std	Z+48, r24	; 0x30
    1bb0:	91 ab       	std	Z+49, r25	; 0x31
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	8f 5f       	subi	r24, 0xFF	; 255
    1bb6:	89 83       	std	Y+1, r24	; 0x01
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	86 30       	cpi	r24, 0x06	; 6
    1bbc:	08 f3       	brcs	.-62     	; 0x1b80 <rocketInit+0x94>
    1bbe:	f8 01       	movw	r30, r16
    1bc0:	86 a5       	ldd	r24, Z+46	; 0x2e
    1bc2:	97 a5       	ldd	r25, Z+47	; 0x2f
    1bc4:	a0 a9       	ldd	r26, Z+48	; 0x30
    1bc6:	b1 a9       	ldd	r27, Z+49	; 0x31
    1bc8:	82 a3       	std	Z+34, r24	; 0x22
    1bca:	93 a3       	std	Z+35, r25	; 0x23
    1bcc:	a4 a3       	std	Z+36, r26	; 0x24
    1bce:	b5 a3       	std	Z+37, r27	; 0x25
    1bd0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Initdt>
    1bd4:	eb d0       	rcall	.+470    	; 0x1dac <initSendCnt>
    1bd6:	78 94       	sei
    1bd8:	0f 90       	pop	r0
    1bda:	df 91       	pop	r29
    1bdc:	cf 91       	pop	r28
    1bde:	1f 91       	pop	r17
    1be0:	0f 91       	pop	r16
    1be2:	08 95       	ret

00001be4 <rocketMain>:
    1be4:	0f 93       	push	r16
    1be6:	1f 93       	push	r17
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	e7 97       	sbiw	r28, 0x37	; 55
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	8c 01       	movw	r16, r24
    1bfe:	e1 dd       	rcall	.-1086   	; 0x17c2 <collectData>
    1c00:	f8 01       	movw	r30, r16
    1c02:	22 a5       	ldd	r18, Z+42	; 0x2a
    1c04:	33 a5       	ldd	r19, Z+43	; 0x2b
    1c06:	44 a5       	ldd	r20, Z+44	; 0x2c
    1c08:	55 a5       	ldd	r21, Z+45	; 0x2d
    1c0a:	b8 01       	movw	r22, r16
    1c0c:	c8 01       	movw	r24, r16
    1c0e:	82 96       	adiw	r24, 0x22	; 34
    1c10:	0e 94 ed 00 	call	0x1da	; 0x1da <Estimate>
    1c14:	d3 d0       	rcall	.+422    	; 0x1dbc <sendCnt>
    1c16:	88 23       	and	r24, r24
    1c18:	61 f0       	breq	.+24     	; 0x1c32 <rocketMain+0x4e>
    1c1a:	be 01       	movw	r22, r28
    1c1c:	6f 5f       	subi	r22, 0xFF	; 255
    1c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c20:	c8 01       	movw	r24, r16
    1c22:	0a de       	rcall	.-1004   	; 0x1838 <formPayloadMode2>
    1c24:	44 e0       	ldi	r20, 0x04	; 4
    1c26:	50 e0       	ldi	r21, 0x00	; 0
    1c28:	67 e3       	ldi	r22, 0x37	; 55
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	01 96       	adiw	r24, 0x01	; 1
    1c30:	49 dd       	rcall	.-1390   	; 0x16c4 <send>
    1c32:	e7 96       	adiw	r28, 0x37	; 55
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	1f 91       	pop	r17
    1c44:	0f 91       	pop	r16
    1c46:	08 95       	ret

00001c48 <stateOutput>:
    1c48:	cf 93       	push	r28
    1c4a:	df 93       	push	r29
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	23 ad       	ldd	r18, Z+59	; 0x3b
    1c50:	22 30       	cpi	r18, 0x02	; 2
    1c52:	e1 f4       	brne	.+56     	; 0x1c8c <stateOutput+0x44>
    1c54:	ec 01       	movw	r28, r24
    1c56:	8d d0       	rcall	.+282    	; 0x1d72 <cntHalfSeconds>
    1c58:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c5a:	89 0f       	add	r24, r25
    1c5c:	8a af       	std	Y+58, r24	; 0x3a
    1c5e:	91 e0       	ldi	r25, 0x01	; 1
    1c60:	9e af       	std	Y+62, r25	; 0x3e
    1c62:	98 2f       	mov	r25, r24
    1c64:	97 70       	andi	r25, 0x07	; 7
    1c66:	91 f4       	brne	.+36     	; 0x1c8c <stateOutput+0x44>
    1c68:	88 23       	and	r24, r24
    1c6a:	81 f0       	breq	.+32     	; 0x1c8c <stateOutput+0x44>
    1c6c:	8e a9       	ldd	r24, Y+54	; 0x36
    1c6e:	9f a9       	ldd	r25, Y+55	; 0x37
    1c70:	a8 ad       	ldd	r26, Y+56	; 0x38
    1c72:	b9 ad       	ldd	r27, Y+57	; 0x39
    1c74:	8a ab       	std	Y+50, r24	; 0x32
    1c76:	9b ab       	std	Y+51, r25	; 0x33
    1c78:	ac ab       	std	Y+52, r26	; 0x34
    1c7a:	bd ab       	std	Y+53, r27	; 0x35
    1c7c:	8a a5       	ldd	r24, Y+42	; 0x2a
    1c7e:	9b a5       	ldd	r25, Y+43	; 0x2b
    1c80:	ac a5       	ldd	r26, Y+44	; 0x2c
    1c82:	bd a5       	ldd	r27, Y+45	; 0x2d
    1c84:	8e ab       	std	Y+54, r24	; 0x36
    1c86:	9f ab       	std	Y+55, r25	; 0x37
    1c88:	a8 af       	std	Y+56, r26	; 0x38
    1c8a:	b9 af       	std	Y+57, r27	; 0x39
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	08 95       	ret

00001c92 <nextState>:
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	ec 01       	movw	r28, r24
    1c98:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c9a:	91 11       	cpse	r25, r1
    1c9c:	0f c0       	rjmp	.+30     	; 0x1cbc <nextState+0x2a>
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 ea       	ldi	r20, 0xA0	; 160
    1ca4:	51 e4       	ldi	r21, 0x41	; 65
    1ca6:	68 81       	ld	r22, Y
    1ca8:	79 81       	ldd	r23, Y+1	; 0x01
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	9b 81       	ldd	r25, Y+3	; 0x03
    1cae:	c6 d3       	rcall	.+1932   	; 0x243c <__gesf2>
    1cb0:	18 16       	cp	r1, r24
    1cb2:	0c f0       	brlt	.+2      	; 0x1cb6 <nextState+0x24>
    1cb4:	3b c0       	rjmp	.+118    	; 0x1d2c <nextState+0x9a>
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	8b af       	std	Y+59, r24	; 0x3b
    1cba:	38 c0       	rjmp	.+112    	; 0x1d2c <nextState+0x9a>
    1cbc:	91 30       	cpi	r25, 0x01	; 1
    1cbe:	79 f4       	brne	.+30     	; 0x1cde <nextState+0x4c>
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 ea       	ldi	r20, 0xA0	; 160
    1cc6:	51 ec       	ldi	r21, 0xC1	; 193
    1cc8:	68 81       	ld	r22, Y
    1cca:	79 81       	ldd	r23, Y+1	; 0x01
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd0:	da d1       	rcall	.+948    	; 0x2086 <__cmpsf2>
    1cd2:	88 23       	and	r24, r24
    1cd4:	5c f5       	brge	.+86     	; 0x1d2c <nextState+0x9a>
    1cd6:	82 e0       	ldi	r24, 0x02	; 2
    1cd8:	8b af       	std	Y+59, r24	; 0x3b
    1cda:	43 d0       	rcall	.+134    	; 0x1d62 <initSecondCounter>
    1cdc:	27 c0       	rjmp	.+78     	; 0x1d2c <nextState+0x9a>
    1cde:	92 30       	cpi	r25, 0x02	; 2
    1ce0:	89 f4       	brne	.+34     	; 0x1d04 <nextState+0x72>
    1ce2:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ce4:	81 30       	cpi	r24, 0x01	; 1
    1ce6:	11 f5       	brne	.+68     	; 0x1d2c <nextState+0x9a>
    1ce8:	2a a9       	ldd	r18, Y+50	; 0x32
    1cea:	3b a9       	ldd	r19, Y+51	; 0x33
    1cec:	4c a9       	ldd	r20, Y+52	; 0x34
    1cee:	5d a9       	ldd	r21, Y+53	; 0x35
    1cf0:	6e a9       	ldd	r22, Y+54	; 0x36
    1cf2:	7f a9       	ldd	r23, Y+55	; 0x37
    1cf4:	88 ad       	ldd	r24, Y+56	; 0x38
    1cf6:	99 ad       	ldd	r25, Y+57	; 0x39
    1cf8:	c6 d1       	rcall	.+908    	; 0x2086 <__cmpsf2>
    1cfa:	88 23       	and	r24, r24
    1cfc:	bc f4       	brge	.+46     	; 0x1d2c <nextState+0x9a>
    1cfe:	83 e0       	ldi	r24, 0x03	; 3
    1d00:	8b af       	std	Y+59, r24	; 0x3b
    1d02:	14 c0       	rjmp	.+40     	; 0x1d2c <nextState+0x9a>
    1d04:	93 30       	cpi	r25, 0x03	; 3
    1d06:	91 f4       	brne	.+36     	; 0x1d2c <nextState+0x9a>
    1d08:	2e a5       	ldd	r18, Y+46	; 0x2e
    1d0a:	3f a5       	ldd	r19, Y+47	; 0x2f
    1d0c:	48 a9       	ldd	r20, Y+48	; 0x30
    1d0e:	59 a9       	ldd	r21, Y+49	; 0x31
    1d10:	6a a5       	ldd	r22, Y+42	; 0x2a
    1d12:	7b a5       	ldd	r23, Y+43	; 0x2b
    1d14:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d16:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d18:	51 d1       	rcall	.+674    	; 0x1fbc <__subsf3>
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	46 e9       	ldi	r20, 0x96	; 150
    1d20:	53 e4       	ldi	r21, 0x43	; 67
    1d22:	b1 d1       	rcall	.+866    	; 0x2086 <__cmpsf2>
    1d24:	88 23       	and	r24, r24
    1d26:	14 f4       	brge	.+4      	; 0x1d2c <nextState+0x9a>
    1d28:	84 e0       	ldi	r24, 0x04	; 4
    1d2a:	8b af       	std	Y+59, r24	; 0x3b
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	08 95       	ret

00001d32 <stateMain>:
}

void stateMain(void){
    1d32:	cf 93       	push	r28
    1d34:	df 93       	push	r29
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
    1d3a:	cf 54       	subi	r28, 0x4F	; 79
    1d3c:	d1 09       	sbc	r29, r1
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	f8 94       	cli
    1d42:	de bf       	out	0x3e, r29	; 62
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	cd bf       	out	0x3d, r28	; 61
	struct DataStruct data;
	rocketInit(&data);
    1d48:	ce 01       	movw	r24, r28
    1d4a:	01 96       	adiw	r24, 0x01	; 1
    1d4c:	cf de       	rcall	.-610    	; 0x1aec <rocketInit>
	while (1){
		rocketMain(&data);
    1d4e:	ce 01       	movw	r24, r28
    1d50:	01 96       	adiw	r24, 0x01	; 1
    1d52:	48 df       	rcall	.-368    	; 0x1be4 <rocketMain>
		nextState(&data);
    1d54:	ce 01       	movw	r24, r28
    1d56:	01 96       	adiw	r24, 0x01	; 1
    1d58:	9c df       	rcall	.-200    	; 0x1c92 <nextState>
		stateOutput(&data);
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	01 96       	adiw	r24, 0x01	; 1
    1d5e:	74 df       	rcall	.-280    	; 0x1c48 <stateOutput>
	}
    1d60:	f6 cf       	rjmp	.-20     	; 0x1d4e <stateMain+0x1c>

00001d62 <initSecondCounter>:
#include "RocketTiming.h"

void initSecondCounter(void){
	TCCR4B = CSDIV256; //2.09715 seconds until roll-over
    1d62:	84 e0       	ldi	r24, 0x04	; 4
    1d64:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	TCNT4 = 0;
    1d68:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
    1d6c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
    1d70:	08 95       	ret

00001d72 <cntHalfSeconds>:
	return;
}

uint8_t cntHalfSeconds(void){
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	1f 92       	push	r1
    1d78:	1f 92       	push	r1
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
	uint16_t volatile chk;
	chk = TCNT4;
    1d7e:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
    1d82:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
    1d86:	9a 83       	std	Y+2, r25	; 0x02
    1d88:	89 83       	std	Y+1, r24	; 0x01
	if (chk >= HALFSECCLKDIV256){
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8e:	89 30       	cpi	r24, 0x09	; 9
    1d90:	9d 43       	sbci	r25, 0x3D	; 61
    1d92:	30 f0       	brcs	.+12     	; 0x1da0 <cntHalfSeconds+0x2e>
		TCNT4 = 0;
    1d94:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
    1d98:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
		return 1;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	01 c0       	rjmp	.+2      	; 0x1da2 <cntHalfSeconds+0x30>
		} else {
		return 0;
    1da0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	08 95       	ret

00001dac <initSendCnt>:

void initSendCnt(void){
	TCCR5B = CSDIV64; //.524 seconds until rollover
    1dac:	83 e0       	ldi	r24, 0x03	; 3
    1dae:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
	TCNT5 = 0;
    1db2:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
    1db6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
    1dba:	08 95       	ret

00001dbc <sendCnt>:
	return;
}

uint8_t sendCnt(void){
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	1f 92       	push	r1
    1dc2:	1f 92       	push	r1
    1dc4:	cd b7       	in	r28, 0x3d	; 61
    1dc6:	de b7       	in	r29, 0x3e	; 62
	uint16_t volatile chk;
	chk = TCNT5;
    1dc8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
    1dcc:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
    1dd0:	9a 83       	std	Y+2, r25	; 0x02
    1dd2:	89 83       	std	Y+1, r24	; 0x01
	if (chk >= SENDRATE){
    1dd4:	69 81       	ldd	r22, Y+1	; 0x01
    1dd6:	7a 81       	ldd	r23, Y+2	; 0x02
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	2f d2       	rcall	.+1118   	; 0x223c <__floatunsisf>
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e5       	ldi	r19, 0x50	; 80
    1de2:	43 e4       	ldi	r20, 0x43	; 67
    1de4:	56 e4       	ldi	r21, 0x46	; 70
    1de6:	2a d3       	rcall	.+1620   	; 0x243c <__gesf2>
    1de8:	88 23       	and	r24, r24
    1dea:	34 f0       	brlt	.+12     	; 0x1df8 <sendCnt+0x3c>
		TCNT5 = 0;
    1dec:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
    1df0:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
		return 1;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	01 c0       	rjmp	.+2      	; 0x1dfa <sendCnt+0x3e>
		} else {
		return 0;
    1df8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	df 91       	pop	r29
    1e00:	cf 91       	pop	r28
    1e02:	08 95       	ret

00001e04 <SPISetMode>:
#include "SPIComm.h"

void SPISetMode(uint8_t mode){
	SPCR = ((SPCR & ~(3 << CPHA)) | mode);
    1e04:	9c b5       	in	r25, 0x2c	; 44
    1e06:	93 7f       	andi	r25, 0xF3	; 243
    1e08:	89 2b       	or	r24, r25
    1e0a:	8c bd       	out	0x2c, r24	; 44
    1e0c:	08 95       	ret

00001e0e <SPIMasterInit>:
	return;
}

void SPIMasterInit(void){
	/* Set MOSI and SCK output, all others input */
	DDRB = DDRB | (1<<MOSI)|(1<<SCK);
    1e0e:	84 b1       	in	r24, 0x04	; 4
    1e10:	86 60       	ori	r24, 0x06	; 6
    1e12:	84 b9       	out	0x04, r24	; 4
	PORTB = PORTB | (1<<PB0);
    1e14:	28 9a       	sbi	0x05, 0	; 5
	/* Enable SPI, Master, set clock rate fclk/16 125kHz */
	SPCR = ((SPCR & ~((1<<SPE)|(1<<MSTR)|(1<<SPR1))) | ((1<<SPE)|(1<<MSTR)|(1<<SPR1)));
    1e16:	8c b5       	in	r24, 0x2c	; 44
    1e18:	82 65       	ori	r24, 0x52	; 82
    1e1a:	8c bd       	out	0x2c, r24	; 44
    1e1c:	08 95       	ret

00001e1e <SPIMasterTransmit>:
	return;
}

void SPIMasterTransmit(uint8_t datum){
    1e1e:	cf 93       	push	r28
    1e20:	c8 2f       	mov	r28, r24
	SPIMasterInit();
    1e22:	f5 df       	rcall	.-22     	; 0x1e0e <SPIMasterInit>
	/* Start transmission */
	SPDR = datum;
    1e24:	ce bd       	out	0x2e, r28	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF))){};
    1e26:	0d b4       	in	r0, 0x2d	; 45
    1e28:	07 fe       	sbrs	r0, 7
    1e2a:	fd cf       	rjmp	.-6      	; 0x1e26 <SPIMasterTransmit+0x8>
	return;
}
    1e2c:	cf 91       	pop	r28
    1e2e:	08 95       	ret

00001e30 <SPIMasterRead>:

uint8_t SPIMasterRead(void){
	SPDR = 0;
    1e30:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF))){};
    1e32:	0d b4       	in	r0, 0x2d	; 45
    1e34:	07 fe       	sbrs	r0, 7
    1e36:	fd cf       	rjmp	.-6      	; 0x1e32 <SPIMasterRead+0x2>
	return SPDR;
    1e38:	8e b5       	in	r24, 0x2e	; 46
}
    1e3a:	08 95       	ret

00001e3c <SPIRead32Bit>:

/* Reads in up to a 32 bit value */
uint32_t SPIRead32Bit(uint8_t NumBytes){
    1e3c:	1f 93       	push	r17
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <SPIRead32Bit+0x8>
    1e44:	1f 92       	push	r1
    1e46:	1f 92       	push	r1
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
    1e4c:	18 2f       	mov	r17, r24
	uint32_t volatile ReadByte = 0;
    1e4e:	19 82       	std	Y+1, r1	; 0x01
    1e50:	1a 82       	std	Y+2, r1	; 0x02
    1e52:	1b 82       	std	Y+3, r1	; 0x03
    1e54:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t volatile i = 0;
    1e56:	1d 82       	std	Y+5, r1	; 0x05
	for (i; i < NumBytes; i++){
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5c:	81 17       	cp	r24, r17
    1e5e:	f8 f4       	brcc	.+62     	; 0x1e9e <SPIRead32Bit+0x62>
		ReadByte = ReadByte << 8;
    1e60:	49 81       	ldd	r20, Y+1	; 0x01
    1e62:	5a 81       	ldd	r21, Y+2	; 0x02
    1e64:	6b 81       	ldd	r22, Y+3	; 0x03
    1e66:	7c 81       	ldd	r23, Y+4	; 0x04
    1e68:	76 2f       	mov	r23, r22
    1e6a:	65 2f       	mov	r22, r21
    1e6c:	54 2f       	mov	r21, r20
    1e6e:	44 27       	eor	r20, r20
    1e70:	49 83       	std	Y+1, r20	; 0x01
    1e72:	5a 83       	std	Y+2, r21	; 0x02
    1e74:	6b 83       	std	Y+3, r22	; 0x03
    1e76:	7c 83       	std	Y+4, r23	; 0x04
		ReadByte += SPIMasterRead();
    1e78:	db df       	rcall	.-74     	; 0x1e30 <SPIMasterRead>
    1e7a:	49 81       	ldd	r20, Y+1	; 0x01
    1e7c:	5a 81       	ldd	r21, Y+2	; 0x02
    1e7e:	6b 81       	ldd	r22, Y+3	; 0x03
    1e80:	7c 81       	ldd	r23, Y+4	; 0x04
    1e82:	48 0f       	add	r20, r24
    1e84:	51 1d       	adc	r21, r1
    1e86:	61 1d       	adc	r22, r1
    1e88:	71 1d       	adc	r23, r1
    1e8a:	49 83       	std	Y+1, r20	; 0x01
    1e8c:	5a 83       	std	Y+2, r21	; 0x02
    1e8e:	6b 83       	std	Y+3, r22	; 0x03
    1e90:	7c 83       	std	Y+4, r23	; 0x04

/* Reads in up to a 32 bit value */
uint32_t SPIRead32Bit(uint8_t NumBytes){
	uint32_t volatile ReadByte = 0;
	uint8_t volatile i = 0;
	for (i; i < NumBytes; i++){
    1e92:	9d 81       	ldd	r25, Y+5	; 0x05
    1e94:	9f 5f       	subi	r25, 0xFF	; 255
    1e96:	9d 83       	std	Y+5, r25	; 0x05
    1e98:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9a:	81 17       	cp	r24, r17
    1e9c:	08 f3       	brcs	.-62     	; 0x1e60 <SPIRead32Bit+0x24>
		ReadByte = ReadByte << 8;
		ReadByte += SPIMasterRead();
	}
	return ReadByte;
    1e9e:	69 81       	ldd	r22, Y+1	; 0x01
    1ea0:	7a 81       	ldd	r23, Y+2	; 0x02
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	df 91       	pop	r29
    1eb2:	cf 91       	pop	r28
    1eb4:	1f 91       	pop	r17
    1eb6:	08 95       	ret

00001eb8 <SetBR>:
#include "USARTComm.h"

uint16_t SetBR(uint32_t baud, uint8_t port){
    1eb8:	1f 93       	push	r17
    1eba:	cf 93       	push	r28
    1ebc:	df 93       	push	r29
    1ebe:	1f 92       	push	r1
    1ec0:	1f 92       	push	r1
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	14 2f       	mov	r17, r20
	uint16_t volatile SetUBRR;
	SetUBRR = (F_CPU/(16*baud) - 1);
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	aa 1f       	adc	r26, r26
    1ed2:	bb 1f       	adc	r27, r27
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	aa 1f       	adc	r26, r26
    1eda:	bb 1f       	adc	r27, r27
    1edc:	9c 01       	movw	r18, r24
    1ede:	ad 01       	movw	r20, r26
    1ee0:	22 0f       	add	r18, r18
    1ee2:	33 1f       	adc	r19, r19
    1ee4:	44 1f       	adc	r20, r20
    1ee6:	55 1f       	adc	r21, r21
    1ee8:	22 0f       	add	r18, r18
    1eea:	33 1f       	adc	r19, r19
    1eec:	44 1f       	adc	r20, r20
    1eee:	55 1f       	adc	r21, r21
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	72 e1       	ldi	r23, 0x12	; 18
    1ef4:	8a e7       	ldi	r24, 0x7A	; 122
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	bb d3       	rcall	.+1910   	; 0x2670 <__udivmodsi4>
    1efa:	21 50       	subi	r18, 0x01	; 1
    1efc:	31 09       	sbc	r19, r1
    1efe:	3a 83       	std	Y+2, r19	; 0x02
    1f00:	29 83       	std	Y+1, r18	; 0x01
	if (SetUBRR > 4095 || !SetUBRR){
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	9a 81       	ldd	r25, Y+2	; 0x02
    1f06:	81 15       	cp	r24, r1
    1f08:	90 41       	sbci	r25, 0x10	; 16
    1f0a:	e0 f4       	brcc	.+56     	; 0x1f44 <SetBR+0x8c>
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	d1 f0       	breq	.+52     	; 0x1f48 <SetBR+0x90>
		return 0;
	} else {
		if (port){
    1f14:	11 23       	and	r17, r17
    1f16:	59 f0       	breq	.+22     	; 0x1f2e <SetBR+0x76>
			UBRR1H = SetUBRR >> 8;
    1f18:	89 81       	ldd	r24, Y+1	; 0x01
    1f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1c:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
			UBRR1L = SetUBRR;
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	9a 81       	ldd	r25, Y+2	; 0x02
    1f24:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
			return SetUBRR;
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2c:	0d c0       	rjmp	.+26     	; 0x1f48 <SetBR+0x90>
		} else {
			UBRR0H = SetUBRR >> 8;
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	9a 81       	ldd	r25, Y+2	; 0x02
    1f32:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
			UBRR0L = SetUBRR;
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
			return SetUBRR;
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	9a 81       	ldd	r25, Y+2	; 0x02
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <SetBR+0x90>

uint16_t SetBR(uint32_t baud, uint8_t port){
	uint16_t volatile SetUBRR;
	SetUBRR = (F_CPU/(16*baud) - 1);
	if (SetUBRR > 4095 || !SetUBRR){
		return 0;
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	90 e0       	ldi	r25, 0x00	; 0
			UBRR0H = SetUBRR >> 8;
			UBRR0L = SetUBRR;
			return SetUBRR;
		}
	}
}
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	1f 91       	pop	r17
    1f52:	08 95       	ret

00001f54 <InitUSART>:

uint16_t InitUSART(uint32_t baud, uint8_t port){
    1f54:	1f 93       	push	r17
    1f56:	cf 93       	push	r28
    1f58:	df 93       	push	r29
    1f5a:	1f 92       	push	r1
    1f5c:	1f 92       	push	r1
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	14 2f       	mov	r17, r20
	uint16_t volatile SetUBRR;
	SetUBRR = SetBR(baud, port);
    1f64:	a9 df       	rcall	.-174    	; 0x1eb8 <SetBR>
    1f66:	9a 83       	std	Y+2, r25	; 0x02
    1f68:	89 83       	std	Y+1, r24	; 0x01
	if (SetUBRR){
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	69 f0       	breq	.+26     	; 0x1f8c <InitUSART+0x38>
		if (port){
    1f72:	11 23       	and	r17, r17
    1f74:	31 f0       	breq	.+12     	; 0x1f82 <InitUSART+0x2e>
			UCSR1B = (1 << RXEN1)|(1 << TXEN1);
    1f76:	88 e1       	ldi	r24, 0x18	; 24
    1f78:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
			return SetUBRR;
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f80:	05 c0       	rjmp	.+10     	; 0x1f8c <InitUSART+0x38>
		} else {
			UCSR0B = (1 << RXEN0)|(1 << TXEN0)|(1 << RXCIE0);
    1f82:	88 e9       	ldi	r24, 0x98	; 152
    1f84:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
			return SetUBRR;
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
    1f8a:	9a 81       	ldd	r25, Y+2	; 0x02
		}
	} else {
		return 0;
	}
}
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	df 91       	pop	r29
    1f92:	cf 91       	pop	r28
    1f94:	1f 91       	pop	r17
    1f96:	08 95       	ret

00001f98 <USARTTX>:

void USARTTX(uint8_t TXval, uint8_t port){
	if (port){	
    1f98:	66 23       	and	r22, r22
    1f9a:	41 f0       	breq	.+16     	; 0x1fac <USARTTX+0x14>
		while(!(UCSR1A & (1 << UDRE1))){}
    1f9c:	e8 ec       	ldi	r30, 0xC8	; 200
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	90 81       	ld	r25, Z
    1fa2:	95 ff       	sbrs	r25, 5
    1fa4:	fd cf       	rjmp	.-6      	; 0x1fa0 <USARTTX+0x8>
		UDR1 = TXval;
    1fa6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1faa:	08 95       	ret
	} else {
		while(!(UCSR0A & (1 << UDRE0))){}
    1fac:	e0 ec       	ldi	r30, 0xC0	; 192
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	90 81       	ld	r25, Z
    1fb2:	95 ff       	sbrs	r25, 5
    1fb4:	fd cf       	rjmp	.-6      	; 0x1fb0 <USARTTX+0x18>
		UDR0 = TXval;
    1fb6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1fba:	08 95       	ret

00001fbc <__subsf3>:
    1fbc:	50 58       	subi	r21, 0x80	; 128

00001fbe <__addsf3>:
    1fbe:	bb 27       	eor	r27, r27
    1fc0:	aa 27       	eor	r26, r26
    1fc2:	0e d0       	rcall	.+28     	; 0x1fe0 <__addsf3x>
    1fc4:	01 c2       	rjmp	.+1026   	; 0x23c8 <__fp_round>
    1fc6:	f2 d1       	rcall	.+996    	; 0x23ac <__fp_pscA>
    1fc8:	30 f0       	brcs	.+12     	; 0x1fd6 <__addsf3+0x18>
    1fca:	f7 d1       	rcall	.+1006   	; 0x23ba <__fp_pscB>
    1fcc:	20 f0       	brcs	.+8      	; 0x1fd6 <__addsf3+0x18>
    1fce:	31 f4       	brne	.+12     	; 0x1fdc <__addsf3+0x1e>
    1fd0:	9f 3f       	cpi	r25, 0xFF	; 255
    1fd2:	11 f4       	brne	.+4      	; 0x1fd8 <__addsf3+0x1a>
    1fd4:	1e f4       	brtc	.+6      	; 0x1fdc <__addsf3+0x1e>
    1fd6:	d7 c1       	rjmp	.+942    	; 0x2386 <__fp_nan>
    1fd8:	0e f4       	brtc	.+2      	; 0x1fdc <__addsf3+0x1e>
    1fda:	e0 95       	com	r30
    1fdc:	e7 fb       	bst	r30, 7
    1fde:	cd c1       	rjmp	.+922    	; 0x237a <__fp_inf>

00001fe0 <__addsf3x>:
    1fe0:	e9 2f       	mov	r30, r25
    1fe2:	03 d2       	rcall	.+1030   	; 0x23ea <__fp_split3>
    1fe4:	80 f3       	brcs	.-32     	; 0x1fc6 <__addsf3+0x8>
    1fe6:	ba 17       	cp	r27, r26
    1fe8:	62 07       	cpc	r22, r18
    1fea:	73 07       	cpc	r23, r19
    1fec:	84 07       	cpc	r24, r20
    1fee:	95 07       	cpc	r25, r21
    1ff0:	18 f0       	brcs	.+6      	; 0x1ff8 <__addsf3x+0x18>
    1ff2:	71 f4       	brne	.+28     	; 0x2010 <__addsf3x+0x30>
    1ff4:	9e f5       	brtc	.+102    	; 0x205c <__addsf3x+0x7c>
    1ff6:	1b c2       	rjmp	.+1078   	; 0x242e <__fp_zero>
    1ff8:	0e f4       	brtc	.+2      	; 0x1ffc <__addsf3x+0x1c>
    1ffa:	e0 95       	com	r30
    1ffc:	0b 2e       	mov	r0, r27
    1ffe:	ba 2f       	mov	r27, r26
    2000:	a0 2d       	mov	r26, r0
    2002:	0b 01       	movw	r0, r22
    2004:	b9 01       	movw	r22, r18
    2006:	90 01       	movw	r18, r0
    2008:	0c 01       	movw	r0, r24
    200a:	ca 01       	movw	r24, r20
    200c:	a0 01       	movw	r20, r0
    200e:	11 24       	eor	r1, r1
    2010:	ff 27       	eor	r31, r31
    2012:	59 1b       	sub	r21, r25
    2014:	99 f0       	breq	.+38     	; 0x203c <__addsf3x+0x5c>
    2016:	59 3f       	cpi	r21, 0xF9	; 249
    2018:	50 f4       	brcc	.+20     	; 0x202e <__addsf3x+0x4e>
    201a:	50 3e       	cpi	r21, 0xE0	; 224
    201c:	68 f1       	brcs	.+90     	; 0x2078 <__addsf3x+0x98>
    201e:	1a 16       	cp	r1, r26
    2020:	f0 40       	sbci	r31, 0x00	; 0
    2022:	a2 2f       	mov	r26, r18
    2024:	23 2f       	mov	r18, r19
    2026:	34 2f       	mov	r19, r20
    2028:	44 27       	eor	r20, r20
    202a:	58 5f       	subi	r21, 0xF8	; 248
    202c:	f3 cf       	rjmp	.-26     	; 0x2014 <__addsf3x+0x34>
    202e:	46 95       	lsr	r20
    2030:	37 95       	ror	r19
    2032:	27 95       	ror	r18
    2034:	a7 95       	ror	r26
    2036:	f0 40       	sbci	r31, 0x00	; 0
    2038:	53 95       	inc	r21
    203a:	c9 f7       	brne	.-14     	; 0x202e <__addsf3x+0x4e>
    203c:	7e f4       	brtc	.+30     	; 0x205c <__addsf3x+0x7c>
    203e:	1f 16       	cp	r1, r31
    2040:	ba 0b       	sbc	r27, r26
    2042:	62 0b       	sbc	r22, r18
    2044:	73 0b       	sbc	r23, r19
    2046:	84 0b       	sbc	r24, r20
    2048:	ba f0       	brmi	.+46     	; 0x2078 <__addsf3x+0x98>
    204a:	91 50       	subi	r25, 0x01	; 1
    204c:	a1 f0       	breq	.+40     	; 0x2076 <__addsf3x+0x96>
    204e:	ff 0f       	add	r31, r31
    2050:	bb 1f       	adc	r27, r27
    2052:	66 1f       	adc	r22, r22
    2054:	77 1f       	adc	r23, r23
    2056:	88 1f       	adc	r24, r24
    2058:	c2 f7       	brpl	.-16     	; 0x204a <__addsf3x+0x6a>
    205a:	0e c0       	rjmp	.+28     	; 0x2078 <__addsf3x+0x98>
    205c:	ba 0f       	add	r27, r26
    205e:	62 1f       	adc	r22, r18
    2060:	73 1f       	adc	r23, r19
    2062:	84 1f       	adc	r24, r20
    2064:	48 f4       	brcc	.+18     	; 0x2078 <__addsf3x+0x98>
    2066:	87 95       	ror	r24
    2068:	77 95       	ror	r23
    206a:	67 95       	ror	r22
    206c:	b7 95       	ror	r27
    206e:	f7 95       	ror	r31
    2070:	9e 3f       	cpi	r25, 0xFE	; 254
    2072:	08 f0       	brcs	.+2      	; 0x2076 <__addsf3x+0x96>
    2074:	b3 cf       	rjmp	.-154    	; 0x1fdc <__addsf3+0x1e>
    2076:	93 95       	inc	r25
    2078:	88 0f       	add	r24, r24
    207a:	08 f0       	brcs	.+2      	; 0x207e <__addsf3x+0x9e>
    207c:	99 27       	eor	r25, r25
    207e:	ee 0f       	add	r30, r30
    2080:	97 95       	ror	r25
    2082:	87 95       	ror	r24
    2084:	08 95       	ret

00002086 <__cmpsf2>:
    2086:	55 d1       	rcall	.+682    	; 0x2332 <__fp_cmp>
    2088:	08 f4       	brcc	.+2      	; 0x208c <__cmpsf2+0x6>
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	08 95       	ret

0000208e <__divsf3>:
    208e:	0c d0       	rcall	.+24     	; 0x20a8 <__divsf3x>
    2090:	9b c1       	rjmp	.+822    	; 0x23c8 <__fp_round>
    2092:	93 d1       	rcall	.+806    	; 0x23ba <__fp_pscB>
    2094:	40 f0       	brcs	.+16     	; 0x20a6 <__divsf3+0x18>
    2096:	8a d1       	rcall	.+788    	; 0x23ac <__fp_pscA>
    2098:	30 f0       	brcs	.+12     	; 0x20a6 <__divsf3+0x18>
    209a:	21 f4       	brne	.+8      	; 0x20a4 <__divsf3+0x16>
    209c:	5f 3f       	cpi	r21, 0xFF	; 255
    209e:	19 f0       	breq	.+6      	; 0x20a6 <__divsf3+0x18>
    20a0:	6c c1       	rjmp	.+728    	; 0x237a <__fp_inf>
    20a2:	51 11       	cpse	r21, r1
    20a4:	c5 c1       	rjmp	.+906    	; 0x2430 <__fp_szero>
    20a6:	6f c1       	rjmp	.+734    	; 0x2386 <__fp_nan>

000020a8 <__divsf3x>:
    20a8:	a0 d1       	rcall	.+832    	; 0x23ea <__fp_split3>
    20aa:	98 f3       	brcs	.-26     	; 0x2092 <__divsf3+0x4>

000020ac <__divsf3_pse>:
    20ac:	99 23       	and	r25, r25
    20ae:	c9 f3       	breq	.-14     	; 0x20a2 <__divsf3+0x14>
    20b0:	55 23       	and	r21, r21
    20b2:	b1 f3       	breq	.-20     	; 0x20a0 <__divsf3+0x12>
    20b4:	95 1b       	sub	r25, r21
    20b6:	55 0b       	sbc	r21, r21
    20b8:	bb 27       	eor	r27, r27
    20ba:	aa 27       	eor	r26, r26
    20bc:	62 17       	cp	r22, r18
    20be:	73 07       	cpc	r23, r19
    20c0:	84 07       	cpc	r24, r20
    20c2:	38 f0       	brcs	.+14     	; 0x20d2 <__divsf3_pse+0x26>
    20c4:	9f 5f       	subi	r25, 0xFF	; 255
    20c6:	5f 4f       	sbci	r21, 0xFF	; 255
    20c8:	22 0f       	add	r18, r18
    20ca:	33 1f       	adc	r19, r19
    20cc:	44 1f       	adc	r20, r20
    20ce:	aa 1f       	adc	r26, r26
    20d0:	a9 f3       	breq	.-22     	; 0x20bc <__divsf3_pse+0x10>
    20d2:	33 d0       	rcall	.+102    	; 0x213a <__divsf3_pse+0x8e>
    20d4:	0e 2e       	mov	r0, r30
    20d6:	3a f0       	brmi	.+14     	; 0x20e6 <__divsf3_pse+0x3a>
    20d8:	e0 e8       	ldi	r30, 0x80	; 128
    20da:	30 d0       	rcall	.+96     	; 0x213c <__divsf3_pse+0x90>
    20dc:	91 50       	subi	r25, 0x01	; 1
    20de:	50 40       	sbci	r21, 0x00	; 0
    20e0:	e6 95       	lsr	r30
    20e2:	00 1c       	adc	r0, r0
    20e4:	ca f7       	brpl	.-14     	; 0x20d8 <__divsf3_pse+0x2c>
    20e6:	29 d0       	rcall	.+82     	; 0x213a <__divsf3_pse+0x8e>
    20e8:	fe 2f       	mov	r31, r30
    20ea:	27 d0       	rcall	.+78     	; 0x213a <__divsf3_pse+0x8e>
    20ec:	66 0f       	add	r22, r22
    20ee:	77 1f       	adc	r23, r23
    20f0:	88 1f       	adc	r24, r24
    20f2:	bb 1f       	adc	r27, r27
    20f4:	26 17       	cp	r18, r22
    20f6:	37 07       	cpc	r19, r23
    20f8:	48 07       	cpc	r20, r24
    20fa:	ab 07       	cpc	r26, r27
    20fc:	b0 e8       	ldi	r27, 0x80	; 128
    20fe:	09 f0       	breq	.+2      	; 0x2102 <__divsf3_pse+0x56>
    2100:	bb 0b       	sbc	r27, r27
    2102:	80 2d       	mov	r24, r0
    2104:	bf 01       	movw	r22, r30
    2106:	ff 27       	eor	r31, r31
    2108:	93 58       	subi	r25, 0x83	; 131
    210a:	5f 4f       	sbci	r21, 0xFF	; 255
    210c:	2a f0       	brmi	.+10     	; 0x2118 <__divsf3_pse+0x6c>
    210e:	9e 3f       	cpi	r25, 0xFE	; 254
    2110:	51 05       	cpc	r21, r1
    2112:	68 f0       	brcs	.+26     	; 0x212e <__divsf3_pse+0x82>
    2114:	32 c1       	rjmp	.+612    	; 0x237a <__fp_inf>
    2116:	8c c1       	rjmp	.+792    	; 0x2430 <__fp_szero>
    2118:	5f 3f       	cpi	r21, 0xFF	; 255
    211a:	ec f3       	brlt	.-6      	; 0x2116 <__divsf3_pse+0x6a>
    211c:	98 3e       	cpi	r25, 0xE8	; 232
    211e:	dc f3       	brlt	.-10     	; 0x2116 <__divsf3_pse+0x6a>
    2120:	86 95       	lsr	r24
    2122:	77 95       	ror	r23
    2124:	67 95       	ror	r22
    2126:	b7 95       	ror	r27
    2128:	f7 95       	ror	r31
    212a:	9f 5f       	subi	r25, 0xFF	; 255
    212c:	c9 f7       	brne	.-14     	; 0x2120 <__divsf3_pse+0x74>
    212e:	88 0f       	add	r24, r24
    2130:	91 1d       	adc	r25, r1
    2132:	96 95       	lsr	r25
    2134:	87 95       	ror	r24
    2136:	97 f9       	bld	r25, 7
    2138:	08 95       	ret
    213a:	e1 e0       	ldi	r30, 0x01	; 1
    213c:	66 0f       	add	r22, r22
    213e:	77 1f       	adc	r23, r23
    2140:	88 1f       	adc	r24, r24
    2142:	bb 1f       	adc	r27, r27
    2144:	62 17       	cp	r22, r18
    2146:	73 07       	cpc	r23, r19
    2148:	84 07       	cpc	r24, r20
    214a:	ba 07       	cpc	r27, r26
    214c:	20 f0       	brcs	.+8      	; 0x2156 <__divsf3_pse+0xaa>
    214e:	62 1b       	sub	r22, r18
    2150:	73 0b       	sbc	r23, r19
    2152:	84 0b       	sbc	r24, r20
    2154:	ba 0b       	sbc	r27, r26
    2156:	ee 1f       	adc	r30, r30
    2158:	88 f7       	brcc	.-30     	; 0x213c <__divsf3_pse+0x90>
    215a:	e0 95       	com	r30
    215c:	08 95       	ret

0000215e <__fixsfdi>:
    215e:	be e3       	ldi	r27, 0x3E	; 62
    2160:	04 d0       	rcall	.+8      	; 0x216a <__fixunssfdi+0x2>
    2162:	08 f4       	brcc	.+2      	; 0x2166 <__fixsfdi+0x8>
    2164:	90 e8       	ldi	r25, 0x80	; 128
    2166:	08 95       	ret

00002168 <__fixunssfdi>:
    2168:	bf e3       	ldi	r27, 0x3F	; 63
    216a:	22 27       	eor	r18, r18
    216c:	33 27       	eor	r19, r19
    216e:	a9 01       	movw	r20, r18
    2170:	44 d1       	rcall	.+648    	; 0x23fa <__fp_splitA>
    2172:	58 f1       	brcs	.+86     	; 0x21ca <__fixunssfdi+0x62>
    2174:	9f 57       	subi	r25, 0x7F	; 127
    2176:	40 f1       	brcs	.+80     	; 0x21c8 <__fixunssfdi+0x60>
    2178:	b9 17       	cp	r27, r25
    217a:	38 f1       	brcs	.+78     	; 0x21ca <__fixunssfdi+0x62>
    217c:	bf e3       	ldi	r27, 0x3F	; 63
    217e:	b9 1b       	sub	r27, r25
    2180:	99 27       	eor	r25, r25
    2182:	b8 50       	subi	r27, 0x08	; 8
    2184:	3a f4       	brpl	.+14     	; 0x2194 <__fixunssfdi+0x2c>
    2186:	66 0f       	add	r22, r22
    2188:	77 1f       	adc	r23, r23
    218a:	88 1f       	adc	r24, r24
    218c:	99 1f       	adc	r25, r25
    218e:	b3 95       	inc	r27
    2190:	d2 f3       	brmi	.-12     	; 0x2186 <__fixunssfdi+0x1e>
    2192:	16 c0       	rjmp	.+44     	; 0x21c0 <__fixunssfdi+0x58>
    2194:	b8 50       	subi	r27, 0x08	; 8
    2196:	4a f0       	brmi	.+18     	; 0x21aa <__fixunssfdi+0x42>
    2198:	23 2f       	mov	r18, r19
    219a:	34 2f       	mov	r19, r20
    219c:	45 2f       	mov	r20, r21
    219e:	56 2f       	mov	r21, r22
    21a0:	67 2f       	mov	r22, r23
    21a2:	78 2f       	mov	r23, r24
    21a4:	88 27       	eor	r24, r24
    21a6:	b8 50       	subi	r27, 0x08	; 8
    21a8:	ba f7       	brpl	.-18     	; 0x2198 <__fixunssfdi+0x30>
    21aa:	b8 5f       	subi	r27, 0xF8	; 248
    21ac:	49 f0       	breq	.+18     	; 0x21c0 <__fixunssfdi+0x58>
    21ae:	86 95       	lsr	r24
    21b0:	77 95       	ror	r23
    21b2:	67 95       	ror	r22
    21b4:	57 95       	ror	r21
    21b6:	47 95       	ror	r20
    21b8:	37 95       	ror	r19
    21ba:	27 95       	ror	r18
    21bc:	ba 95       	dec	r27
    21be:	b9 f7       	brne	.-18     	; 0x21ae <__fixunssfdi+0x46>
    21c0:	0e f4       	brtc	.+2      	; 0x21c4 <__fixunssfdi+0x5c>
    21c2:	e4 d0       	rcall	.+456    	; 0x238c <__fp_negdi>
    21c4:	88 94       	clc
    21c6:	08 95       	ret
    21c8:	88 94       	clc
    21ca:	60 e0       	ldi	r22, 0x00	; 0
    21cc:	70 e0       	ldi	r23, 0x00	; 0
    21ce:	cb 01       	movw	r24, r22
    21d0:	08 95       	ret

000021d2 <__fixsfsi>:
    21d2:	04 d0       	rcall	.+8      	; 0x21dc <__fixunssfsi>
    21d4:	68 94       	set
    21d6:	b1 11       	cpse	r27, r1
    21d8:	2b c1       	rjmp	.+598    	; 0x2430 <__fp_szero>
    21da:	08 95       	ret

000021dc <__fixunssfsi>:
    21dc:	0e d1       	rcall	.+540    	; 0x23fa <__fp_splitA>
    21de:	88 f0       	brcs	.+34     	; 0x2202 <__stack+0x3>
    21e0:	9f 57       	subi	r25, 0x7F	; 127
    21e2:	90 f0       	brcs	.+36     	; 0x2208 <__stack+0x9>
    21e4:	b9 2f       	mov	r27, r25
    21e6:	99 27       	eor	r25, r25
    21e8:	b7 51       	subi	r27, 0x17	; 23
    21ea:	a0 f0       	brcs	.+40     	; 0x2214 <__stack+0x15>
    21ec:	d1 f0       	breq	.+52     	; 0x2222 <__stack+0x23>
    21ee:	66 0f       	add	r22, r22
    21f0:	77 1f       	adc	r23, r23
    21f2:	88 1f       	adc	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	1a f0       	brmi	.+6      	; 0x21fe <__fixunssfsi+0x22>
    21f8:	ba 95       	dec	r27
    21fa:	c9 f7       	brne	.-14     	; 0x21ee <__fixunssfsi+0x12>
    21fc:	12 c0       	rjmp	.+36     	; 0x2222 <__stack+0x23>
    21fe:	b1 30       	cpi	r27, 0x01	; 1
    2200:	81 f0       	breq	.+32     	; 0x2222 <__stack+0x23>
    2202:	15 d1       	rcall	.+554    	; 0x242e <__fp_zero>
    2204:	b1 e0       	ldi	r27, 0x01	; 1
    2206:	08 95       	ret
    2208:	12 c1       	rjmp	.+548    	; 0x242e <__fp_zero>
    220a:	67 2f       	mov	r22, r23
    220c:	78 2f       	mov	r23, r24
    220e:	88 27       	eor	r24, r24
    2210:	b8 5f       	subi	r27, 0xF8	; 248
    2212:	39 f0       	breq	.+14     	; 0x2222 <__stack+0x23>
    2214:	b9 3f       	cpi	r27, 0xF9	; 249
    2216:	cc f3       	brlt	.-14     	; 0x220a <__stack+0xb>
    2218:	86 95       	lsr	r24
    221a:	77 95       	ror	r23
    221c:	67 95       	ror	r22
    221e:	b3 95       	inc	r27
    2220:	d9 f7       	brne	.-10     	; 0x2218 <__stack+0x19>
    2222:	3e f4       	brtc	.+14     	; 0x2232 <__stack+0x33>
    2224:	90 95       	com	r25
    2226:	80 95       	com	r24
    2228:	70 95       	com	r23
    222a:	61 95       	neg	r22
    222c:	7f 4f       	sbci	r23, 0xFF	; 255
    222e:	8f 4f       	sbci	r24, 0xFF	; 255
    2230:	9f 4f       	sbci	r25, 0xFF	; 255
    2232:	08 95       	ret

00002234 <__floatdisf>:
    2234:	97 fb       	bst	r25, 7
    2236:	0e f4       	brtc	.+2      	; 0x223a <__floatdisf+0x6>
    2238:	a9 d0       	rcall	.+338    	; 0x238c <__fp_negdi>
    223a:	3e c0       	rjmp	.+124    	; 0x22b8 <__fp_di2sf>

0000223c <__floatunsisf>:
    223c:	e8 94       	clt
    223e:	09 c0       	rjmp	.+18     	; 0x2252 <__floatsisf+0x12>

00002240 <__floatsisf>:
    2240:	97 fb       	bst	r25, 7
    2242:	3e f4       	brtc	.+14     	; 0x2252 <__floatsisf+0x12>
    2244:	90 95       	com	r25
    2246:	80 95       	com	r24
    2248:	70 95       	com	r23
    224a:	61 95       	neg	r22
    224c:	7f 4f       	sbci	r23, 0xFF	; 255
    224e:	8f 4f       	sbci	r24, 0xFF	; 255
    2250:	9f 4f       	sbci	r25, 0xFF	; 255
    2252:	99 23       	and	r25, r25
    2254:	a9 f0       	breq	.+42     	; 0x2280 <__floatsisf+0x40>
    2256:	f9 2f       	mov	r31, r25
    2258:	96 e9       	ldi	r25, 0x96	; 150
    225a:	bb 27       	eor	r27, r27
    225c:	93 95       	inc	r25
    225e:	f6 95       	lsr	r31
    2260:	87 95       	ror	r24
    2262:	77 95       	ror	r23
    2264:	67 95       	ror	r22
    2266:	b7 95       	ror	r27
    2268:	f1 11       	cpse	r31, r1
    226a:	f8 cf       	rjmp	.-16     	; 0x225c <__floatsisf+0x1c>
    226c:	fa f4       	brpl	.+62     	; 0x22ac <__floatsisf+0x6c>
    226e:	bb 0f       	add	r27, r27
    2270:	11 f4       	brne	.+4      	; 0x2276 <__floatsisf+0x36>
    2272:	60 ff       	sbrs	r22, 0
    2274:	1b c0       	rjmp	.+54     	; 0x22ac <__floatsisf+0x6c>
    2276:	6f 5f       	subi	r22, 0xFF	; 255
    2278:	7f 4f       	sbci	r23, 0xFF	; 255
    227a:	8f 4f       	sbci	r24, 0xFF	; 255
    227c:	9f 4f       	sbci	r25, 0xFF	; 255
    227e:	16 c0       	rjmp	.+44     	; 0x22ac <__floatsisf+0x6c>
    2280:	88 23       	and	r24, r24
    2282:	11 f0       	breq	.+4      	; 0x2288 <__floatsisf+0x48>
    2284:	96 e9       	ldi	r25, 0x96	; 150
    2286:	11 c0       	rjmp	.+34     	; 0x22aa <__floatsisf+0x6a>
    2288:	77 23       	and	r23, r23
    228a:	21 f0       	breq	.+8      	; 0x2294 <__floatsisf+0x54>
    228c:	9e e8       	ldi	r25, 0x8E	; 142
    228e:	87 2f       	mov	r24, r23
    2290:	76 2f       	mov	r23, r22
    2292:	05 c0       	rjmp	.+10     	; 0x229e <__floatsisf+0x5e>
    2294:	66 23       	and	r22, r22
    2296:	71 f0       	breq	.+28     	; 0x22b4 <__floatsisf+0x74>
    2298:	96 e8       	ldi	r25, 0x86	; 134
    229a:	86 2f       	mov	r24, r22
    229c:	70 e0       	ldi	r23, 0x00	; 0
    229e:	60 e0       	ldi	r22, 0x00	; 0
    22a0:	2a f0       	brmi	.+10     	; 0x22ac <__floatsisf+0x6c>
    22a2:	9a 95       	dec	r25
    22a4:	66 0f       	add	r22, r22
    22a6:	77 1f       	adc	r23, r23
    22a8:	88 1f       	adc	r24, r24
    22aa:	da f7       	brpl	.-10     	; 0x22a2 <__floatsisf+0x62>
    22ac:	88 0f       	add	r24, r24
    22ae:	96 95       	lsr	r25
    22b0:	87 95       	ror	r24
    22b2:	97 f9       	bld	r25, 7
    22b4:	08 95       	ret

000022b6 <__floatundisf>:
    22b6:	e8 94       	clt

000022b8 <__fp_di2sf>:
    22b8:	f9 2f       	mov	r31, r25
    22ba:	96 eb       	ldi	r25, 0xB6	; 182
    22bc:	ff 23       	and	r31, r31
    22be:	81 f0       	breq	.+32     	; 0x22e0 <__fp_di2sf+0x28>
    22c0:	12 16       	cp	r1, r18
    22c2:	13 06       	cpc	r1, r19
    22c4:	14 06       	cpc	r1, r20
    22c6:	44 0b       	sbc	r20, r20
    22c8:	93 95       	inc	r25
    22ca:	f6 95       	lsr	r31
    22cc:	87 95       	ror	r24
    22ce:	77 95       	ror	r23
    22d0:	67 95       	ror	r22
    22d2:	57 95       	ror	r21
    22d4:	40 40       	sbci	r20, 0x00	; 0
    22d6:	ff 23       	and	r31, r31
    22d8:	b9 f7       	brne	.-18     	; 0x22c8 <__fp_di2sf+0x10>
    22da:	1b c0       	rjmp	.+54     	; 0x2312 <__fp_di2sf+0x5a>
    22dc:	99 27       	eor	r25, r25
    22de:	08 95       	ret
    22e0:	88 23       	and	r24, r24
    22e2:	51 f4       	brne	.+20     	; 0x22f8 <__fp_di2sf+0x40>
    22e4:	98 50       	subi	r25, 0x08	; 8
    22e6:	d2 f7       	brpl	.-12     	; 0x22dc <__fp_di2sf+0x24>
    22e8:	87 2b       	or	r24, r23
    22ea:	76 2f       	mov	r23, r22
    22ec:	65 2f       	mov	r22, r21
    22ee:	54 2f       	mov	r21, r20
    22f0:	43 2f       	mov	r20, r19
    22f2:	32 2f       	mov	r19, r18
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	b1 f3       	breq	.-20     	; 0x22e4 <__fp_di2sf+0x2c>
    22f8:	12 16       	cp	r1, r18
    22fa:	13 06       	cpc	r1, r19
    22fc:	14 06       	cpc	r1, r20
    22fe:	44 0b       	sbc	r20, r20
    2300:	88 23       	and	r24, r24
    2302:	3a f0       	brmi	.+14     	; 0x2312 <__fp_di2sf+0x5a>
    2304:	9a 95       	dec	r25
    2306:	44 0f       	add	r20, r20
    2308:	55 1f       	adc	r21, r21
    230a:	66 1f       	adc	r22, r22
    230c:	77 1f       	adc	r23, r23
    230e:	88 1f       	adc	r24, r24
    2310:	ca f7       	brpl	.-14     	; 0x2304 <__fp_di2sf+0x4c>
    2312:	55 23       	and	r21, r21
    2314:	4a f4       	brpl	.+18     	; 0x2328 <__fp_di2sf+0x70>
    2316:	44 0f       	add	r20, r20
    2318:	55 1f       	adc	r21, r21
    231a:	11 f4       	brne	.+4      	; 0x2320 <__fp_di2sf+0x68>
    231c:	60 ff       	sbrs	r22, 0
    231e:	04 c0       	rjmp	.+8      	; 0x2328 <__fp_di2sf+0x70>
    2320:	6f 5f       	subi	r22, 0xFF	; 255
    2322:	7f 4f       	sbci	r23, 0xFF	; 255
    2324:	8f 4f       	sbci	r24, 0xFF	; 255
    2326:	9f 4f       	sbci	r25, 0xFF	; 255
    2328:	88 0f       	add	r24, r24
    232a:	96 95       	lsr	r25
    232c:	87 95       	ror	r24
    232e:	97 f9       	bld	r25, 7
    2330:	08 95       	ret

00002332 <__fp_cmp>:
    2332:	99 0f       	add	r25, r25
    2334:	00 08       	sbc	r0, r0
    2336:	55 0f       	add	r21, r21
    2338:	aa 0b       	sbc	r26, r26
    233a:	e0 e8       	ldi	r30, 0x80	; 128
    233c:	fe ef       	ldi	r31, 0xFE	; 254
    233e:	16 16       	cp	r1, r22
    2340:	17 06       	cpc	r1, r23
    2342:	e8 07       	cpc	r30, r24
    2344:	f9 07       	cpc	r31, r25
    2346:	c0 f0       	brcs	.+48     	; 0x2378 <__fp_cmp+0x46>
    2348:	12 16       	cp	r1, r18
    234a:	13 06       	cpc	r1, r19
    234c:	e4 07       	cpc	r30, r20
    234e:	f5 07       	cpc	r31, r21
    2350:	98 f0       	brcs	.+38     	; 0x2378 <__fp_cmp+0x46>
    2352:	62 1b       	sub	r22, r18
    2354:	73 0b       	sbc	r23, r19
    2356:	84 0b       	sbc	r24, r20
    2358:	95 0b       	sbc	r25, r21
    235a:	39 f4       	brne	.+14     	; 0x236a <__fp_cmp+0x38>
    235c:	0a 26       	eor	r0, r26
    235e:	61 f0       	breq	.+24     	; 0x2378 <__fp_cmp+0x46>
    2360:	23 2b       	or	r18, r19
    2362:	24 2b       	or	r18, r20
    2364:	25 2b       	or	r18, r21
    2366:	21 f4       	brne	.+8      	; 0x2370 <__fp_cmp+0x3e>
    2368:	08 95       	ret
    236a:	0a 26       	eor	r0, r26
    236c:	09 f4       	brne	.+2      	; 0x2370 <__fp_cmp+0x3e>
    236e:	a1 40       	sbci	r26, 0x01	; 1
    2370:	a6 95       	lsr	r26
    2372:	8f ef       	ldi	r24, 0xFF	; 255
    2374:	81 1d       	adc	r24, r1
    2376:	81 1d       	adc	r24, r1
    2378:	08 95       	ret

0000237a <__fp_inf>:
    237a:	97 f9       	bld	r25, 7
    237c:	9f 67       	ori	r25, 0x7F	; 127
    237e:	80 e8       	ldi	r24, 0x80	; 128
    2380:	70 e0       	ldi	r23, 0x00	; 0
    2382:	60 e0       	ldi	r22, 0x00	; 0
    2384:	08 95       	ret

00002386 <__fp_nan>:
    2386:	9f ef       	ldi	r25, 0xFF	; 255
    2388:	80 ec       	ldi	r24, 0xC0	; 192
    238a:	08 95       	ret

0000238c <__fp_negdi>:
    238c:	90 95       	com	r25
    238e:	80 95       	com	r24
    2390:	70 95       	com	r23
    2392:	60 95       	com	r22
    2394:	50 95       	com	r21
    2396:	40 95       	com	r20
    2398:	30 95       	com	r19
    239a:	21 95       	neg	r18
    239c:	3f 4f       	sbci	r19, 0xFF	; 255
    239e:	4f 4f       	sbci	r20, 0xFF	; 255
    23a0:	5f 4f       	sbci	r21, 0xFF	; 255
    23a2:	6f 4f       	sbci	r22, 0xFF	; 255
    23a4:	7f 4f       	sbci	r23, 0xFF	; 255
    23a6:	8f 4f       	sbci	r24, 0xFF	; 255
    23a8:	9f 4f       	sbci	r25, 0xFF	; 255
    23aa:	08 95       	ret

000023ac <__fp_pscA>:
    23ac:	00 24       	eor	r0, r0
    23ae:	0a 94       	dec	r0
    23b0:	16 16       	cp	r1, r22
    23b2:	17 06       	cpc	r1, r23
    23b4:	18 06       	cpc	r1, r24
    23b6:	09 06       	cpc	r0, r25
    23b8:	08 95       	ret

000023ba <__fp_pscB>:
    23ba:	00 24       	eor	r0, r0
    23bc:	0a 94       	dec	r0
    23be:	12 16       	cp	r1, r18
    23c0:	13 06       	cpc	r1, r19
    23c2:	14 06       	cpc	r1, r20
    23c4:	05 06       	cpc	r0, r21
    23c6:	08 95       	ret

000023c8 <__fp_round>:
    23c8:	09 2e       	mov	r0, r25
    23ca:	03 94       	inc	r0
    23cc:	00 0c       	add	r0, r0
    23ce:	11 f4       	brne	.+4      	; 0x23d4 <__fp_round+0xc>
    23d0:	88 23       	and	r24, r24
    23d2:	52 f0       	brmi	.+20     	; 0x23e8 <__fp_round+0x20>
    23d4:	bb 0f       	add	r27, r27
    23d6:	40 f4       	brcc	.+16     	; 0x23e8 <__fp_round+0x20>
    23d8:	bf 2b       	or	r27, r31
    23da:	11 f4       	brne	.+4      	; 0x23e0 <__fp_round+0x18>
    23dc:	60 ff       	sbrs	r22, 0
    23de:	04 c0       	rjmp	.+8      	; 0x23e8 <__fp_round+0x20>
    23e0:	6f 5f       	subi	r22, 0xFF	; 255
    23e2:	7f 4f       	sbci	r23, 0xFF	; 255
    23e4:	8f 4f       	sbci	r24, 0xFF	; 255
    23e6:	9f 4f       	sbci	r25, 0xFF	; 255
    23e8:	08 95       	ret

000023ea <__fp_split3>:
    23ea:	57 fd       	sbrc	r21, 7
    23ec:	90 58       	subi	r25, 0x80	; 128
    23ee:	44 0f       	add	r20, r20
    23f0:	55 1f       	adc	r21, r21
    23f2:	59 f0       	breq	.+22     	; 0x240a <__fp_splitA+0x10>
    23f4:	5f 3f       	cpi	r21, 0xFF	; 255
    23f6:	71 f0       	breq	.+28     	; 0x2414 <__fp_splitA+0x1a>
    23f8:	47 95       	ror	r20

000023fa <__fp_splitA>:
    23fa:	88 0f       	add	r24, r24
    23fc:	97 fb       	bst	r25, 7
    23fe:	99 1f       	adc	r25, r25
    2400:	61 f0       	breq	.+24     	; 0x241a <__fp_splitA+0x20>
    2402:	9f 3f       	cpi	r25, 0xFF	; 255
    2404:	79 f0       	breq	.+30     	; 0x2424 <__fp_splitA+0x2a>
    2406:	87 95       	ror	r24
    2408:	08 95       	ret
    240a:	12 16       	cp	r1, r18
    240c:	13 06       	cpc	r1, r19
    240e:	14 06       	cpc	r1, r20
    2410:	55 1f       	adc	r21, r21
    2412:	f2 cf       	rjmp	.-28     	; 0x23f8 <__fp_split3+0xe>
    2414:	46 95       	lsr	r20
    2416:	f1 df       	rcall	.-30     	; 0x23fa <__fp_splitA>
    2418:	08 c0       	rjmp	.+16     	; 0x242a <__fp_splitA+0x30>
    241a:	16 16       	cp	r1, r22
    241c:	17 06       	cpc	r1, r23
    241e:	18 06       	cpc	r1, r24
    2420:	99 1f       	adc	r25, r25
    2422:	f1 cf       	rjmp	.-30     	; 0x2406 <__fp_splitA+0xc>
    2424:	86 95       	lsr	r24
    2426:	71 05       	cpc	r23, r1
    2428:	61 05       	cpc	r22, r1
    242a:	08 94       	sec
    242c:	08 95       	ret

0000242e <__fp_zero>:
    242e:	e8 94       	clt

00002430 <__fp_szero>:
    2430:	bb 27       	eor	r27, r27
    2432:	66 27       	eor	r22, r22
    2434:	77 27       	eor	r23, r23
    2436:	cb 01       	movw	r24, r22
    2438:	97 f9       	bld	r25, 7
    243a:	08 95       	ret

0000243c <__gesf2>:
    243c:	7a df       	rcall	.-268    	; 0x2332 <__fp_cmp>
    243e:	08 f4       	brcc	.+2      	; 0x2442 <__gesf2+0x6>
    2440:	8f ef       	ldi	r24, 0xFF	; 255
    2442:	08 95       	ret
    2444:	0e f0       	brts	.+2      	; 0x2448 <__gesf2+0xc>
    2446:	e1 c0       	rjmp	.+450    	; 0x260a <__fp_mpack>
    2448:	9e cf       	rjmp	.-196    	; 0x2386 <__fp_nan>
    244a:	68 94       	set
    244c:	96 cf       	rjmp	.-212    	; 0x237a <__fp_inf>

0000244e <log>:
    244e:	d5 df       	rcall	.-86     	; 0x23fa <__fp_splitA>
    2450:	c8 f3       	brcs	.-14     	; 0x2444 <__gesf2+0x8>
    2452:	99 23       	and	r25, r25
    2454:	d1 f3       	breq	.-12     	; 0x244a <__gesf2+0xe>
    2456:	c6 f3       	brts	.-16     	; 0x2448 <__gesf2+0xc>
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	1f 93       	push	r17
    245e:	0f 93       	push	r16
    2460:	ff 92       	push	r15
    2462:	c9 2f       	mov	r28, r25
    2464:	dd 27       	eor	r29, r29
    2466:	88 23       	and	r24, r24
    2468:	2a f0       	brmi	.+10     	; 0x2474 <log+0x26>
    246a:	21 97       	sbiw	r28, 0x01	; 1
    246c:	66 0f       	add	r22, r22
    246e:	77 1f       	adc	r23, r23
    2470:	88 1f       	adc	r24, r24
    2472:	da f7       	brpl	.-10     	; 0x246a <log+0x1c>
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	40 e8       	ldi	r20, 0x80	; 128
    247a:	5f eb       	ldi	r21, 0xBF	; 191
    247c:	9f e3       	ldi	r25, 0x3F	; 63
    247e:	88 39       	cpi	r24, 0x98	; 152
    2480:	20 f0       	brcs	.+8      	; 0x248a <log+0x3c>
    2482:	80 3e       	cpi	r24, 0xE0	; 224
    2484:	30 f0       	brcs	.+12     	; 0x2492 <log+0x44>
    2486:	21 96       	adiw	r28, 0x01	; 1
    2488:	8f 77       	andi	r24, 0x7F	; 127
    248a:	99 dd       	rcall	.-1230   	; 0x1fbe <__addsf3>
    248c:	ec ec       	ldi	r30, 0xCC	; 204
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	03 c0       	rjmp	.+6      	; 0x2498 <log+0x4a>
    2492:	95 dd       	rcall	.-1238   	; 0x1fbe <__addsf3>
    2494:	e9 ef       	ldi	r30, 0xF9	; 249
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	c6 d0       	rcall	.+396    	; 0x2626 <__fp_powser>
    249a:	8b 01       	movw	r16, r22
    249c:	be 01       	movw	r22, r28
    249e:	ec 01       	movw	r28, r24
    24a0:	fb 2e       	mov	r15, r27
    24a2:	6f 57       	subi	r22, 0x7F	; 127
    24a4:	71 09       	sbc	r23, r1
    24a6:	75 95       	asr	r23
    24a8:	77 1f       	adc	r23, r23
    24aa:	88 0b       	sbc	r24, r24
    24ac:	99 0b       	sbc	r25, r25
    24ae:	c8 de       	rcall	.-624    	; 0x2240 <__floatsisf>
    24b0:	28 e1       	ldi	r18, 0x18	; 24
    24b2:	32 e7       	ldi	r19, 0x72	; 114
    24b4:	41 e3       	ldi	r20, 0x31	; 49
    24b6:	5f e3       	ldi	r21, 0x3F	; 63
    24b8:	16 d0       	rcall	.+44     	; 0x24e6 <__mulsf3x>
    24ba:	af 2d       	mov	r26, r15
    24bc:	98 01       	movw	r18, r16
    24be:	ae 01       	movw	r20, r28
    24c0:	ff 90       	pop	r15
    24c2:	0f 91       	pop	r16
    24c4:	1f 91       	pop	r17
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	8a dd       	rcall	.-1260   	; 0x1fe0 <__addsf3x>
    24cc:	7d cf       	rjmp	.-262    	; 0x23c8 <__fp_round>

000024ce <__mulsf3>:
    24ce:	0b d0       	rcall	.+22     	; 0x24e6 <__mulsf3x>
    24d0:	7b cf       	rjmp	.-266    	; 0x23c8 <__fp_round>
    24d2:	6c df       	rcall	.-296    	; 0x23ac <__fp_pscA>
    24d4:	28 f0       	brcs	.+10     	; 0x24e0 <__mulsf3+0x12>
    24d6:	71 df       	rcall	.-286    	; 0x23ba <__fp_pscB>
    24d8:	18 f0       	brcs	.+6      	; 0x24e0 <__mulsf3+0x12>
    24da:	95 23       	and	r25, r21
    24dc:	09 f0       	breq	.+2      	; 0x24e0 <__mulsf3+0x12>
    24de:	4d cf       	rjmp	.-358    	; 0x237a <__fp_inf>
    24e0:	52 cf       	rjmp	.-348    	; 0x2386 <__fp_nan>
    24e2:	11 24       	eor	r1, r1
    24e4:	a5 cf       	rjmp	.-182    	; 0x2430 <__fp_szero>

000024e6 <__mulsf3x>:
    24e6:	81 df       	rcall	.-254    	; 0x23ea <__fp_split3>
    24e8:	a0 f3       	brcs	.-24     	; 0x24d2 <__mulsf3+0x4>

000024ea <__mulsf3_pse>:
    24ea:	95 9f       	mul	r25, r21
    24ec:	d1 f3       	breq	.-12     	; 0x24e2 <__mulsf3+0x14>
    24ee:	95 0f       	add	r25, r21
    24f0:	50 e0       	ldi	r21, 0x00	; 0
    24f2:	55 1f       	adc	r21, r21
    24f4:	62 9f       	mul	r22, r18
    24f6:	f0 01       	movw	r30, r0
    24f8:	72 9f       	mul	r23, r18
    24fa:	bb 27       	eor	r27, r27
    24fc:	f0 0d       	add	r31, r0
    24fe:	b1 1d       	adc	r27, r1
    2500:	63 9f       	mul	r22, r19
    2502:	aa 27       	eor	r26, r26
    2504:	f0 0d       	add	r31, r0
    2506:	b1 1d       	adc	r27, r1
    2508:	aa 1f       	adc	r26, r26
    250a:	64 9f       	mul	r22, r20
    250c:	66 27       	eor	r22, r22
    250e:	b0 0d       	add	r27, r0
    2510:	a1 1d       	adc	r26, r1
    2512:	66 1f       	adc	r22, r22
    2514:	82 9f       	mul	r24, r18
    2516:	22 27       	eor	r18, r18
    2518:	b0 0d       	add	r27, r0
    251a:	a1 1d       	adc	r26, r1
    251c:	62 1f       	adc	r22, r18
    251e:	73 9f       	mul	r23, r19
    2520:	b0 0d       	add	r27, r0
    2522:	a1 1d       	adc	r26, r1
    2524:	62 1f       	adc	r22, r18
    2526:	83 9f       	mul	r24, r19
    2528:	a0 0d       	add	r26, r0
    252a:	61 1d       	adc	r22, r1
    252c:	22 1f       	adc	r18, r18
    252e:	74 9f       	mul	r23, r20
    2530:	33 27       	eor	r19, r19
    2532:	a0 0d       	add	r26, r0
    2534:	61 1d       	adc	r22, r1
    2536:	23 1f       	adc	r18, r19
    2538:	84 9f       	mul	r24, r20
    253a:	60 0d       	add	r22, r0
    253c:	21 1d       	adc	r18, r1
    253e:	82 2f       	mov	r24, r18
    2540:	76 2f       	mov	r23, r22
    2542:	6a 2f       	mov	r22, r26
    2544:	11 24       	eor	r1, r1
    2546:	9f 57       	subi	r25, 0x7F	; 127
    2548:	50 40       	sbci	r21, 0x00	; 0
    254a:	8a f0       	brmi	.+34     	; 0x256e <__mulsf3_pse+0x84>
    254c:	e1 f0       	breq	.+56     	; 0x2586 <__mulsf3_pse+0x9c>
    254e:	88 23       	and	r24, r24
    2550:	4a f0       	brmi	.+18     	; 0x2564 <__mulsf3_pse+0x7a>
    2552:	ee 0f       	add	r30, r30
    2554:	ff 1f       	adc	r31, r31
    2556:	bb 1f       	adc	r27, r27
    2558:	66 1f       	adc	r22, r22
    255a:	77 1f       	adc	r23, r23
    255c:	88 1f       	adc	r24, r24
    255e:	91 50       	subi	r25, 0x01	; 1
    2560:	50 40       	sbci	r21, 0x00	; 0
    2562:	a9 f7       	brne	.-22     	; 0x254e <__mulsf3_pse+0x64>
    2564:	9e 3f       	cpi	r25, 0xFE	; 254
    2566:	51 05       	cpc	r21, r1
    2568:	70 f0       	brcs	.+28     	; 0x2586 <__mulsf3_pse+0x9c>
    256a:	07 cf       	rjmp	.-498    	; 0x237a <__fp_inf>
    256c:	61 cf       	rjmp	.-318    	; 0x2430 <__fp_szero>
    256e:	5f 3f       	cpi	r21, 0xFF	; 255
    2570:	ec f3       	brlt	.-6      	; 0x256c <__mulsf3_pse+0x82>
    2572:	98 3e       	cpi	r25, 0xE8	; 232
    2574:	dc f3       	brlt	.-10     	; 0x256c <__mulsf3_pse+0x82>
    2576:	86 95       	lsr	r24
    2578:	77 95       	ror	r23
    257a:	67 95       	ror	r22
    257c:	b7 95       	ror	r27
    257e:	f7 95       	ror	r31
    2580:	e7 95       	ror	r30
    2582:	9f 5f       	subi	r25, 0xFF	; 255
    2584:	c1 f7       	brne	.-16     	; 0x2576 <__mulsf3_pse+0x8c>
    2586:	fe 2b       	or	r31, r30
    2588:	88 0f       	add	r24, r24
    258a:	91 1d       	adc	r25, r1
    258c:	96 95       	lsr	r25
    258e:	87 95       	ror	r24
    2590:	97 f9       	bld	r25, 7
    2592:	08 95       	ret

00002594 <round>:
    2594:	32 df       	rcall	.-412    	; 0x23fa <__fp_splitA>
    2596:	e0 f0       	brcs	.+56     	; 0x25d0 <round+0x3c>
    2598:	9e 37       	cpi	r25, 0x7E	; 126
    259a:	d8 f0       	brcs	.+54     	; 0x25d2 <round+0x3e>
    259c:	96 39       	cpi	r25, 0x96	; 150
    259e:	b8 f4       	brcc	.+46     	; 0x25ce <round+0x3a>
    25a0:	9e 38       	cpi	r25, 0x8E	; 142
    25a2:	48 f4       	brcc	.+18     	; 0x25b6 <round+0x22>
    25a4:	67 2f       	mov	r22, r23
    25a6:	78 2f       	mov	r23, r24
    25a8:	88 27       	eor	r24, r24
    25aa:	98 5f       	subi	r25, 0xF8	; 248
    25ac:	f9 cf       	rjmp	.-14     	; 0x25a0 <round+0xc>
    25ae:	86 95       	lsr	r24
    25b0:	77 95       	ror	r23
    25b2:	67 95       	ror	r22
    25b4:	93 95       	inc	r25
    25b6:	95 39       	cpi	r25, 0x95	; 149
    25b8:	d0 f3       	brcs	.-12     	; 0x25ae <round+0x1a>
    25ba:	b6 2f       	mov	r27, r22
    25bc:	b1 70       	andi	r27, 0x01	; 1
    25be:	6b 0f       	add	r22, r27
    25c0:	71 1d       	adc	r23, r1
    25c2:	81 1d       	adc	r24, r1
    25c4:	20 f4       	brcc	.+8      	; 0x25ce <round+0x3a>
    25c6:	87 95       	ror	r24
    25c8:	77 95       	ror	r23
    25ca:	67 95       	ror	r22
    25cc:	93 95       	inc	r25
    25ce:	02 c0       	rjmp	.+4      	; 0x25d4 <__fp_mintl>
    25d0:	1c c0       	rjmp	.+56     	; 0x260a <__fp_mpack>
    25d2:	2e cf       	rjmp	.-420    	; 0x2430 <__fp_szero>

000025d4 <__fp_mintl>:
    25d4:	88 23       	and	r24, r24
    25d6:	71 f4       	brne	.+28     	; 0x25f4 <__fp_mintl+0x20>
    25d8:	77 23       	and	r23, r23
    25da:	21 f0       	breq	.+8      	; 0x25e4 <__fp_mintl+0x10>
    25dc:	98 50       	subi	r25, 0x08	; 8
    25de:	87 2b       	or	r24, r23
    25e0:	76 2f       	mov	r23, r22
    25e2:	07 c0       	rjmp	.+14     	; 0x25f2 <__fp_mintl+0x1e>
    25e4:	66 23       	and	r22, r22
    25e6:	11 f4       	brne	.+4      	; 0x25ec <__fp_mintl+0x18>
    25e8:	99 27       	eor	r25, r25
    25ea:	0d c0       	rjmp	.+26     	; 0x2606 <__fp_mintl+0x32>
    25ec:	90 51       	subi	r25, 0x10	; 16
    25ee:	86 2b       	or	r24, r22
    25f0:	70 e0       	ldi	r23, 0x00	; 0
    25f2:	60 e0       	ldi	r22, 0x00	; 0
    25f4:	2a f0       	brmi	.+10     	; 0x2600 <__fp_mintl+0x2c>
    25f6:	9a 95       	dec	r25
    25f8:	66 0f       	add	r22, r22
    25fa:	77 1f       	adc	r23, r23
    25fc:	88 1f       	adc	r24, r24
    25fe:	da f7       	brpl	.-10     	; 0x25f6 <__fp_mintl+0x22>
    2600:	88 0f       	add	r24, r24
    2602:	96 95       	lsr	r25
    2604:	87 95       	ror	r24
    2606:	97 f9       	bld	r25, 7
    2608:	08 95       	ret

0000260a <__fp_mpack>:
    260a:	9f 3f       	cpi	r25, 0xFF	; 255
    260c:	31 f0       	breq	.+12     	; 0x261a <__fp_mpack_finite+0xc>

0000260e <__fp_mpack_finite>:
    260e:	91 50       	subi	r25, 0x01	; 1
    2610:	20 f4       	brcc	.+8      	; 0x261a <__fp_mpack_finite+0xc>
    2612:	87 95       	ror	r24
    2614:	77 95       	ror	r23
    2616:	67 95       	ror	r22
    2618:	b7 95       	ror	r27
    261a:	88 0f       	add	r24, r24
    261c:	91 1d       	adc	r25, r1
    261e:	96 95       	lsr	r25
    2620:	87 95       	ror	r24
    2622:	97 f9       	bld	r25, 7
    2624:	08 95       	ret

00002626 <__fp_powser>:
    2626:	df 93       	push	r29
    2628:	cf 93       	push	r28
    262a:	1f 93       	push	r17
    262c:	0f 93       	push	r16
    262e:	ff 92       	push	r15
    2630:	ef 92       	push	r14
    2632:	df 92       	push	r13
    2634:	7b 01       	movw	r14, r22
    2636:	8c 01       	movw	r16, r24
    2638:	68 94       	set
    263a:	05 c0       	rjmp	.+10     	; 0x2646 <__fp_powser+0x20>
    263c:	da 2e       	mov	r13, r26
    263e:	ef 01       	movw	r28, r30
    2640:	52 df       	rcall	.-348    	; 0x24e6 <__mulsf3x>
    2642:	fe 01       	movw	r30, r28
    2644:	e8 94       	clt
    2646:	a5 91       	lpm	r26, Z+
    2648:	25 91       	lpm	r18, Z+
    264a:	35 91       	lpm	r19, Z+
    264c:	45 91       	lpm	r20, Z+
    264e:	55 91       	lpm	r21, Z+
    2650:	ae f3       	brts	.-22     	; 0x263c <__fp_powser+0x16>
    2652:	ef 01       	movw	r28, r30
    2654:	c5 dc       	rcall	.-1654   	; 0x1fe0 <__addsf3x>
    2656:	fe 01       	movw	r30, r28
    2658:	97 01       	movw	r18, r14
    265a:	a8 01       	movw	r20, r16
    265c:	da 94       	dec	r13
    265e:	79 f7       	brne	.-34     	; 0x263e <__fp_powser+0x18>
    2660:	df 90       	pop	r13
    2662:	ef 90       	pop	r14
    2664:	ff 90       	pop	r15
    2666:	0f 91       	pop	r16
    2668:	1f 91       	pop	r17
    266a:	cf 91       	pop	r28
    266c:	df 91       	pop	r29
    266e:	08 95       	ret

00002670 <__udivmodsi4>:
    2670:	a1 e2       	ldi	r26, 0x21	; 33
    2672:	1a 2e       	mov	r1, r26
    2674:	aa 1b       	sub	r26, r26
    2676:	bb 1b       	sub	r27, r27
    2678:	fd 01       	movw	r30, r26
    267a:	0d c0       	rjmp	.+26     	; 0x2696 <__udivmodsi4_ep>

0000267c <__udivmodsi4_loop>:
    267c:	aa 1f       	adc	r26, r26
    267e:	bb 1f       	adc	r27, r27
    2680:	ee 1f       	adc	r30, r30
    2682:	ff 1f       	adc	r31, r31
    2684:	a2 17       	cp	r26, r18
    2686:	b3 07       	cpc	r27, r19
    2688:	e4 07       	cpc	r30, r20
    268a:	f5 07       	cpc	r31, r21
    268c:	20 f0       	brcs	.+8      	; 0x2696 <__udivmodsi4_ep>
    268e:	a2 1b       	sub	r26, r18
    2690:	b3 0b       	sbc	r27, r19
    2692:	e4 0b       	sbc	r30, r20
    2694:	f5 0b       	sbc	r31, r21

00002696 <__udivmodsi4_ep>:
    2696:	66 1f       	adc	r22, r22
    2698:	77 1f       	adc	r23, r23
    269a:	88 1f       	adc	r24, r24
    269c:	99 1f       	adc	r25, r25
    269e:	1a 94       	dec	r1
    26a0:	69 f7       	brne	.-38     	; 0x267c <__udivmodsi4_loop>
    26a2:	60 95       	com	r22
    26a4:	70 95       	com	r23
    26a6:	80 95       	com	r24
    26a8:	90 95       	com	r25
    26aa:	9b 01       	movw	r18, r22
    26ac:	ac 01       	movw	r20, r24
    26ae:	bd 01       	movw	r22, r26
    26b0:	cf 01       	movw	r24, r30
    26b2:	08 95       	ret

000026b4 <__muluhisi3>:
    26b4:	5a d0       	rcall	.+180    	; 0x276a <__umulhisi3>
    26b6:	a5 9f       	mul	r26, r21
    26b8:	90 0d       	add	r25, r0
    26ba:	b4 9f       	mul	r27, r20
    26bc:	90 0d       	add	r25, r0
    26be:	a4 9f       	mul	r26, r20
    26c0:	80 0d       	add	r24, r0
    26c2:	91 1d       	adc	r25, r1
    26c4:	11 24       	eor	r1, r1
    26c6:	08 95       	ret

000026c8 <__muldi3>:
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	1f 93       	push	r17
    26ce:	0f 93       	push	r16
    26d0:	9a 9d       	mul	r25, r10
    26d2:	f0 2d       	mov	r31, r0
    26d4:	21 9f       	mul	r18, r17
    26d6:	f0 0d       	add	r31, r0
    26d8:	8b 9d       	mul	r24, r11
    26da:	f0 0d       	add	r31, r0
    26dc:	8a 9d       	mul	r24, r10
    26de:	e0 2d       	mov	r30, r0
    26e0:	f1 0d       	add	r31, r1
    26e2:	03 9f       	mul	r16, r19
    26e4:	f0 0d       	add	r31, r0
    26e6:	02 9f       	mul	r16, r18
    26e8:	e0 0d       	add	r30, r0
    26ea:	f1 1d       	adc	r31, r1
    26ec:	4e 9d       	mul	r20, r14
    26ee:	e0 0d       	add	r30, r0
    26f0:	f1 1d       	adc	r31, r1
    26f2:	5e 9d       	mul	r21, r14
    26f4:	f0 0d       	add	r31, r0
    26f6:	4f 9d       	mul	r20, r15
    26f8:	f0 0d       	add	r31, r0
    26fa:	7f 93       	push	r23
    26fc:	6f 93       	push	r22
    26fe:	bf 92       	push	r11
    2700:	af 92       	push	r10
    2702:	5f 93       	push	r21
    2704:	4f 93       	push	r20
    2706:	d5 01       	movw	r26, r10
    2708:	30 d0       	rcall	.+96     	; 0x276a <__umulhisi3>
    270a:	8b 01       	movw	r16, r22
    270c:	ac 01       	movw	r20, r24
    270e:	d7 01       	movw	r26, r14
    2710:	2c d0       	rcall	.+88     	; 0x276a <__umulhisi3>
    2712:	eb 01       	movw	r28, r22
    2714:	e8 0f       	add	r30, r24
    2716:	f9 1f       	adc	r31, r25
    2718:	d6 01       	movw	r26, r12
    271a:	1f d0       	rcall	.+62     	; 0x275a <__muldi3_6>
    271c:	2f 91       	pop	r18
    271e:	3f 91       	pop	r19
    2720:	d6 01       	movw	r26, r12
    2722:	23 d0       	rcall	.+70     	; 0x276a <__umulhisi3>
    2724:	c6 0f       	add	r28, r22
    2726:	d7 1f       	adc	r29, r23
    2728:	e8 1f       	adc	r30, r24
    272a:	f9 1f       	adc	r31, r25
    272c:	af 91       	pop	r26
    272e:	bf 91       	pop	r27
    2730:	14 d0       	rcall	.+40     	; 0x275a <__muldi3_6>
    2732:	2f 91       	pop	r18
    2734:	3f 91       	pop	r19
    2736:	19 d0       	rcall	.+50     	; 0x276a <__umulhisi3>
    2738:	c6 0f       	add	r28, r22
    273a:	d7 1f       	adc	r29, r23
    273c:	e8 1f       	adc	r30, r24
    273e:	f9 1f       	adc	r31, r25
    2740:	d6 01       	movw	r26, r12
    2742:	13 d0       	rcall	.+38     	; 0x276a <__umulhisi3>
    2744:	e6 0f       	add	r30, r22
    2746:	f7 1f       	adc	r31, r23
    2748:	98 01       	movw	r18, r16
    274a:	be 01       	movw	r22, r28
    274c:	cf 01       	movw	r24, r30
    274e:	11 24       	eor	r1, r1
    2750:	0f 91       	pop	r16
    2752:	1f 91       	pop	r17
    2754:	cf 91       	pop	r28
    2756:	df 91       	pop	r29
    2758:	08 95       	ret

0000275a <__muldi3_6>:
    275a:	07 d0       	rcall	.+14     	; 0x276a <__umulhisi3>
    275c:	46 0f       	add	r20, r22
    275e:	57 1f       	adc	r21, r23
    2760:	c8 1f       	adc	r28, r24
    2762:	d9 1f       	adc	r29, r25
    2764:	08 f4       	brcc	.+2      	; 0x2768 <__muldi3_6+0xe>
    2766:	31 96       	adiw	r30, 0x01	; 1
    2768:	08 95       	ret

0000276a <__umulhisi3>:
    276a:	a2 9f       	mul	r26, r18
    276c:	b0 01       	movw	r22, r0
    276e:	b3 9f       	mul	r27, r19
    2770:	c0 01       	movw	r24, r0
    2772:	a3 9f       	mul	r26, r19
    2774:	70 0d       	add	r23, r0
    2776:	81 1d       	adc	r24, r1
    2778:	11 24       	eor	r1, r1
    277a:	91 1d       	adc	r25, r1
    277c:	b2 9f       	mul	r27, r18
    277e:	70 0d       	add	r23, r0
    2780:	81 1d       	adc	r24, r1
    2782:	11 24       	eor	r1, r1
    2784:	91 1d       	adc	r25, r1
    2786:	08 95       	ret

00002788 <atof>:
    2788:	66 27       	eor	r22, r22
    278a:	77 27       	eor	r23, r23
    278c:	4d c2       	rjmp	.+1178   	; 0x2c28 <strtod>

0000278e <memcpy>:
    278e:	fb 01       	movw	r30, r22
    2790:	dc 01       	movw	r26, r24
    2792:	02 c0       	rjmp	.+4      	; 0x2798 <memcpy+0xa>
    2794:	01 90       	ld	r0, Z+
    2796:	0d 92       	st	X+, r0
    2798:	41 50       	subi	r20, 0x01	; 1
    279a:	50 40       	sbci	r21, 0x00	; 0
    279c:	d8 f7       	brcc	.-10     	; 0x2794 <memcpy+0x6>
    279e:	08 95       	ret

000027a0 <strncpy>:
    27a0:	fb 01       	movw	r30, r22
    27a2:	dc 01       	movw	r26, r24
    27a4:	41 50       	subi	r20, 0x01	; 1
    27a6:	50 40       	sbci	r21, 0x00	; 0
    27a8:	48 f0       	brcs	.+18     	; 0x27bc <strncpy+0x1c>
    27aa:	01 90       	ld	r0, Z+
    27ac:	0d 92       	st	X+, r0
    27ae:	00 20       	and	r0, r0
    27b0:	c9 f7       	brne	.-14     	; 0x27a4 <strncpy+0x4>
    27b2:	01 c0       	rjmp	.+2      	; 0x27b6 <strncpy+0x16>
    27b4:	1d 92       	st	X+, r1
    27b6:	41 50       	subi	r20, 0x01	; 1
    27b8:	50 40       	sbci	r21, 0x00	; 0
    27ba:	e0 f7       	brcc	.-8      	; 0x27b4 <strncpy+0x14>
    27bc:	08 95       	ret

000027be <strsep>:
    27be:	fc 01       	movw	r30, r24
    27c0:	a0 81       	ld	r26, Z
    27c2:	b1 81       	ldd	r27, Z+1	; 0x01
    27c4:	ad 01       	movw	r20, r26
    27c6:	10 96       	adiw	r26, 0x00	; 0
    27c8:	81 f0       	breq	.+32     	; 0x27ea <strsep+0x2c>
    27ca:	3d 91       	ld	r19, X+
    27cc:	fb 01       	movw	r30, r22
    27ce:	01 90       	ld	r0, Z+
    27d0:	03 16       	cp	r0, r19
    27d2:	01 10       	cpse	r0, r1
    27d4:	e1 f7       	brne	.-8      	; 0x27ce <strsep+0x10>
    27d6:	c9 f7       	brne	.-14     	; 0x27ca <strsep+0xc>
    27d8:	00 20       	and	r0, r0
    27da:	11 f4       	brne	.+4      	; 0x27e0 <strsep+0x22>
    27dc:	d0 01       	movw	r26, r0
    27de:	02 c0       	rjmp	.+4      	; 0x27e4 <strsep+0x26>
    27e0:	1e 92       	st	-X, r1
    27e2:	11 96       	adiw	r26, 0x01	; 1
    27e4:	fc 01       	movw	r30, r24
    27e6:	a0 83       	st	Z, r26
    27e8:	b1 83       	std	Z+1, r27	; 0x01
    27ea:	ca 01       	movw	r24, r20
    27ec:	08 95       	ret

000027ee <sprintf>:
    27ee:	0f 93       	push	r16
    27f0:	1f 93       	push	r17
    27f2:	cf 93       	push	r28
    27f4:	df 93       	push	r29
    27f6:	cd b7       	in	r28, 0x3d	; 61
    27f8:	de b7       	in	r29, 0x3e	; 62
    27fa:	2e 97       	sbiw	r28, 0x0e	; 14
    27fc:	0f b6       	in	r0, 0x3f	; 63
    27fe:	f8 94       	cli
    2800:	de bf       	out	0x3e, r29	; 62
    2802:	0f be       	out	0x3f, r0	; 63
    2804:	cd bf       	out	0x3d, r28	; 61
    2806:	0e 89       	ldd	r16, Y+22	; 0x16
    2808:	1f 89       	ldd	r17, Y+23	; 0x17
    280a:	86 e0       	ldi	r24, 0x06	; 6
    280c:	8c 83       	std	Y+4, r24	; 0x04
    280e:	1a 83       	std	Y+2, r17	; 0x02
    2810:	09 83       	std	Y+1, r16	; 0x01
    2812:	8f ef       	ldi	r24, 0xFF	; 255
    2814:	9f e7       	ldi	r25, 0x7F	; 127
    2816:	9e 83       	std	Y+6, r25	; 0x06
    2818:	8d 83       	std	Y+5, r24	; 0x05
    281a:	ae 01       	movw	r20, r28
    281c:	46 5e       	subi	r20, 0xE6	; 230
    281e:	5f 4f       	sbci	r21, 0xFF	; 255
    2820:	68 8d       	ldd	r22, Y+24	; 0x18
    2822:	79 8d       	ldd	r23, Y+25	; 0x19
    2824:	ce 01       	movw	r24, r28
    2826:	01 96       	adiw	r24, 0x01	; 1
    2828:	11 d0       	rcall	.+34     	; 0x284c <vfprintf>
    282a:	2f 81       	ldd	r18, Y+7	; 0x07
    282c:	38 85       	ldd	r19, Y+8	; 0x08
    282e:	f8 01       	movw	r30, r16
    2830:	e2 0f       	add	r30, r18
    2832:	f3 1f       	adc	r31, r19
    2834:	10 82       	st	Z, r1
    2836:	2e 96       	adiw	r28, 0x0e	; 14
    2838:	0f b6       	in	r0, 0x3f	; 63
    283a:	f8 94       	cli
    283c:	de bf       	out	0x3e, r29	; 62
    283e:	0f be       	out	0x3f, r0	; 63
    2840:	cd bf       	out	0x3d, r28	; 61
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	1f 91       	pop	r17
    2848:	0f 91       	pop	r16
    284a:	08 95       	ret

0000284c <vfprintf>:
    284c:	2f 92       	push	r2
    284e:	3f 92       	push	r3
    2850:	4f 92       	push	r4
    2852:	5f 92       	push	r5
    2854:	6f 92       	push	r6
    2856:	7f 92       	push	r7
    2858:	8f 92       	push	r8
    285a:	9f 92       	push	r9
    285c:	af 92       	push	r10
    285e:	bf 92       	push	r11
    2860:	cf 92       	push	r12
    2862:	df 92       	push	r13
    2864:	ef 92       	push	r14
    2866:	ff 92       	push	r15
    2868:	0f 93       	push	r16
    286a:	1f 93       	push	r17
    286c:	cf 93       	push	r28
    286e:	df 93       	push	r29
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
    2874:	2c 97       	sbiw	r28, 0x0c	; 12
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	f8 94       	cli
    287a:	de bf       	out	0x3e, r29	; 62
    287c:	0f be       	out	0x3f, r0	; 63
    287e:	cd bf       	out	0x3d, r28	; 61
    2880:	7c 01       	movw	r14, r24
    2882:	6b 01       	movw	r12, r22
    2884:	8a 01       	movw	r16, r20
    2886:	fc 01       	movw	r30, r24
    2888:	17 82       	std	Z+7, r1	; 0x07
    288a:	16 82       	std	Z+6, r1	; 0x06
    288c:	83 81       	ldd	r24, Z+3	; 0x03
    288e:	81 ff       	sbrs	r24, 1
    2890:	b0 c1       	rjmp	.+864    	; 0x2bf2 <vfprintf+0x3a6>
    2892:	ce 01       	movw	r24, r28
    2894:	01 96       	adiw	r24, 0x01	; 1
    2896:	4c 01       	movw	r8, r24
    2898:	f7 01       	movw	r30, r14
    289a:	93 81       	ldd	r25, Z+3	; 0x03
    289c:	f6 01       	movw	r30, r12
    289e:	93 fd       	sbrc	r25, 3
    28a0:	85 91       	lpm	r24, Z+
    28a2:	93 ff       	sbrs	r25, 3
    28a4:	81 91       	ld	r24, Z+
    28a6:	6f 01       	movw	r12, r30
    28a8:	88 23       	and	r24, r24
    28aa:	09 f4       	brne	.+2      	; 0x28ae <vfprintf+0x62>
    28ac:	9e c1       	rjmp	.+828    	; 0x2bea <vfprintf+0x39e>
    28ae:	85 32       	cpi	r24, 0x25	; 37
    28b0:	39 f4       	brne	.+14     	; 0x28c0 <vfprintf+0x74>
    28b2:	93 fd       	sbrc	r25, 3
    28b4:	85 91       	lpm	r24, Z+
    28b6:	93 ff       	sbrs	r25, 3
    28b8:	81 91       	ld	r24, Z+
    28ba:	6f 01       	movw	r12, r30
    28bc:	85 32       	cpi	r24, 0x25	; 37
    28be:	21 f4       	brne	.+8      	; 0x28c8 <vfprintf+0x7c>
    28c0:	b7 01       	movw	r22, r14
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	4d d3       	rcall	.+1690   	; 0x2f60 <fputc>
    28c6:	e8 cf       	rjmp	.-48     	; 0x2898 <vfprintf+0x4c>
    28c8:	51 2c       	mov	r5, r1
    28ca:	31 2c       	mov	r3, r1
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	20 32       	cpi	r18, 0x20	; 32
    28d0:	a0 f4       	brcc	.+40     	; 0x28fa <vfprintf+0xae>
    28d2:	8b 32       	cpi	r24, 0x2B	; 43
    28d4:	69 f0       	breq	.+26     	; 0x28f0 <vfprintf+0xa4>
    28d6:	30 f4       	brcc	.+12     	; 0x28e4 <vfprintf+0x98>
    28d8:	80 32       	cpi	r24, 0x20	; 32
    28da:	59 f0       	breq	.+22     	; 0x28f2 <vfprintf+0xa6>
    28dc:	83 32       	cpi	r24, 0x23	; 35
    28de:	69 f4       	brne	.+26     	; 0x28fa <vfprintf+0xae>
    28e0:	20 61       	ori	r18, 0x10	; 16
    28e2:	2c c0       	rjmp	.+88     	; 0x293c <vfprintf+0xf0>
    28e4:	8d 32       	cpi	r24, 0x2D	; 45
    28e6:	39 f0       	breq	.+14     	; 0x28f6 <vfprintf+0xaa>
    28e8:	80 33       	cpi	r24, 0x30	; 48
    28ea:	39 f4       	brne	.+14     	; 0x28fa <vfprintf+0xae>
    28ec:	21 60       	ori	r18, 0x01	; 1
    28ee:	26 c0       	rjmp	.+76     	; 0x293c <vfprintf+0xf0>
    28f0:	22 60       	ori	r18, 0x02	; 2
    28f2:	24 60       	ori	r18, 0x04	; 4
    28f4:	23 c0       	rjmp	.+70     	; 0x293c <vfprintf+0xf0>
    28f6:	28 60       	ori	r18, 0x08	; 8
    28f8:	21 c0       	rjmp	.+66     	; 0x293c <vfprintf+0xf0>
    28fa:	27 fd       	sbrc	r18, 7
    28fc:	27 c0       	rjmp	.+78     	; 0x294c <vfprintf+0x100>
    28fe:	30 ed       	ldi	r19, 0xD0	; 208
    2900:	38 0f       	add	r19, r24
    2902:	3a 30       	cpi	r19, 0x0A	; 10
    2904:	78 f4       	brcc	.+30     	; 0x2924 <vfprintf+0xd8>
    2906:	26 ff       	sbrs	r18, 6
    2908:	06 c0       	rjmp	.+12     	; 0x2916 <vfprintf+0xca>
    290a:	fa e0       	ldi	r31, 0x0A	; 10
    290c:	5f 9e       	mul	r5, r31
    290e:	30 0d       	add	r19, r0
    2910:	11 24       	eor	r1, r1
    2912:	53 2e       	mov	r5, r19
    2914:	13 c0       	rjmp	.+38     	; 0x293c <vfprintf+0xf0>
    2916:	8a e0       	ldi	r24, 0x0A	; 10
    2918:	38 9e       	mul	r3, r24
    291a:	30 0d       	add	r19, r0
    291c:	11 24       	eor	r1, r1
    291e:	33 2e       	mov	r3, r19
    2920:	20 62       	ori	r18, 0x20	; 32
    2922:	0c c0       	rjmp	.+24     	; 0x293c <vfprintf+0xf0>
    2924:	8e 32       	cpi	r24, 0x2E	; 46
    2926:	21 f4       	brne	.+8      	; 0x2930 <vfprintf+0xe4>
    2928:	26 fd       	sbrc	r18, 6
    292a:	5f c1       	rjmp	.+702    	; 0x2bea <vfprintf+0x39e>
    292c:	20 64       	ori	r18, 0x40	; 64
    292e:	06 c0       	rjmp	.+12     	; 0x293c <vfprintf+0xf0>
    2930:	8c 36       	cpi	r24, 0x6C	; 108
    2932:	11 f4       	brne	.+4      	; 0x2938 <vfprintf+0xec>
    2934:	20 68       	ori	r18, 0x80	; 128
    2936:	02 c0       	rjmp	.+4      	; 0x293c <vfprintf+0xf0>
    2938:	88 36       	cpi	r24, 0x68	; 104
    293a:	41 f4       	brne	.+16     	; 0x294c <vfprintf+0x100>
    293c:	f6 01       	movw	r30, r12
    293e:	93 fd       	sbrc	r25, 3
    2940:	85 91       	lpm	r24, Z+
    2942:	93 ff       	sbrs	r25, 3
    2944:	81 91       	ld	r24, Z+
    2946:	6f 01       	movw	r12, r30
    2948:	81 11       	cpse	r24, r1
    294a:	c1 cf       	rjmp	.-126    	; 0x28ce <vfprintf+0x82>
    294c:	98 2f       	mov	r25, r24
    294e:	9f 7d       	andi	r25, 0xDF	; 223
    2950:	95 54       	subi	r25, 0x45	; 69
    2952:	93 30       	cpi	r25, 0x03	; 3
    2954:	28 f4       	brcc	.+10     	; 0x2960 <vfprintf+0x114>
    2956:	0c 5f       	subi	r16, 0xFC	; 252
    2958:	1f 4f       	sbci	r17, 0xFF	; 255
    295a:	ff e3       	ldi	r31, 0x3F	; 63
    295c:	f9 83       	std	Y+1, r31	; 0x01
    295e:	0d c0       	rjmp	.+26     	; 0x297a <vfprintf+0x12e>
    2960:	83 36       	cpi	r24, 0x63	; 99
    2962:	31 f0       	breq	.+12     	; 0x2970 <vfprintf+0x124>
    2964:	83 37       	cpi	r24, 0x73	; 115
    2966:	71 f0       	breq	.+28     	; 0x2984 <vfprintf+0x138>
    2968:	83 35       	cpi	r24, 0x53	; 83
    296a:	09 f0       	breq	.+2      	; 0x296e <vfprintf+0x122>
    296c:	57 c0       	rjmp	.+174    	; 0x2a1c <vfprintf+0x1d0>
    296e:	21 c0       	rjmp	.+66     	; 0x29b2 <vfprintf+0x166>
    2970:	f8 01       	movw	r30, r16
    2972:	80 81       	ld	r24, Z
    2974:	89 83       	std	Y+1, r24	; 0x01
    2976:	0e 5f       	subi	r16, 0xFE	; 254
    2978:	1f 4f       	sbci	r17, 0xFF	; 255
    297a:	44 24       	eor	r4, r4
    297c:	43 94       	inc	r4
    297e:	51 2c       	mov	r5, r1
    2980:	54 01       	movw	r10, r8
    2982:	14 c0       	rjmp	.+40     	; 0x29ac <vfprintf+0x160>
    2984:	38 01       	movw	r6, r16
    2986:	f2 e0       	ldi	r31, 0x02	; 2
    2988:	6f 0e       	add	r6, r31
    298a:	71 1c       	adc	r7, r1
    298c:	f8 01       	movw	r30, r16
    298e:	a0 80       	ld	r10, Z
    2990:	b1 80       	ldd	r11, Z+1	; 0x01
    2992:	26 ff       	sbrs	r18, 6
    2994:	03 c0       	rjmp	.+6      	; 0x299c <vfprintf+0x150>
    2996:	65 2d       	mov	r22, r5
    2998:	70 e0       	ldi	r23, 0x00	; 0
    299a:	02 c0       	rjmp	.+4      	; 0x29a0 <vfprintf+0x154>
    299c:	6f ef       	ldi	r22, 0xFF	; 255
    299e:	7f ef       	ldi	r23, 0xFF	; 255
    29a0:	c5 01       	movw	r24, r10
    29a2:	2c 87       	std	Y+12, r18	; 0x0c
    29a4:	d2 d2       	rcall	.+1444   	; 0x2f4a <strnlen>
    29a6:	2c 01       	movw	r4, r24
    29a8:	83 01       	movw	r16, r6
    29aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    29ac:	2f 77       	andi	r18, 0x7F	; 127
    29ae:	22 2e       	mov	r2, r18
    29b0:	16 c0       	rjmp	.+44     	; 0x29de <vfprintf+0x192>
    29b2:	38 01       	movw	r6, r16
    29b4:	f2 e0       	ldi	r31, 0x02	; 2
    29b6:	6f 0e       	add	r6, r31
    29b8:	71 1c       	adc	r7, r1
    29ba:	f8 01       	movw	r30, r16
    29bc:	a0 80       	ld	r10, Z
    29be:	b1 80       	ldd	r11, Z+1	; 0x01
    29c0:	26 ff       	sbrs	r18, 6
    29c2:	03 c0       	rjmp	.+6      	; 0x29ca <vfprintf+0x17e>
    29c4:	65 2d       	mov	r22, r5
    29c6:	70 e0       	ldi	r23, 0x00	; 0
    29c8:	02 c0       	rjmp	.+4      	; 0x29ce <vfprintf+0x182>
    29ca:	6f ef       	ldi	r22, 0xFF	; 255
    29cc:	7f ef       	ldi	r23, 0xFF	; 255
    29ce:	c5 01       	movw	r24, r10
    29d0:	2c 87       	std	Y+12, r18	; 0x0c
    29d2:	b0 d2       	rcall	.+1376   	; 0x2f34 <strnlen_P>
    29d4:	2c 01       	movw	r4, r24
    29d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    29d8:	20 68       	ori	r18, 0x80	; 128
    29da:	22 2e       	mov	r2, r18
    29dc:	83 01       	movw	r16, r6
    29de:	23 fc       	sbrc	r2, 3
    29e0:	19 c0       	rjmp	.+50     	; 0x2a14 <vfprintf+0x1c8>
    29e2:	83 2d       	mov	r24, r3
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	48 16       	cp	r4, r24
    29e8:	59 06       	cpc	r5, r25
    29ea:	a0 f4       	brcc	.+40     	; 0x2a14 <vfprintf+0x1c8>
    29ec:	b7 01       	movw	r22, r14
    29ee:	80 e2       	ldi	r24, 0x20	; 32
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	b6 d2       	rcall	.+1388   	; 0x2f60 <fputc>
    29f4:	3a 94       	dec	r3
    29f6:	f5 cf       	rjmp	.-22     	; 0x29e2 <vfprintf+0x196>
    29f8:	f5 01       	movw	r30, r10
    29fa:	27 fc       	sbrc	r2, 7
    29fc:	85 91       	lpm	r24, Z+
    29fe:	27 fe       	sbrs	r2, 7
    2a00:	81 91       	ld	r24, Z+
    2a02:	5f 01       	movw	r10, r30
    2a04:	b7 01       	movw	r22, r14
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	ab d2       	rcall	.+1366   	; 0x2f60 <fputc>
    2a0a:	31 10       	cpse	r3, r1
    2a0c:	3a 94       	dec	r3
    2a0e:	f1 e0       	ldi	r31, 0x01	; 1
    2a10:	4f 1a       	sub	r4, r31
    2a12:	51 08       	sbc	r5, r1
    2a14:	41 14       	cp	r4, r1
    2a16:	51 04       	cpc	r5, r1
    2a18:	79 f7       	brne	.-34     	; 0x29f8 <vfprintf+0x1ac>
    2a1a:	de c0       	rjmp	.+444    	; 0x2bd8 <vfprintf+0x38c>
    2a1c:	84 36       	cpi	r24, 0x64	; 100
    2a1e:	11 f0       	breq	.+4      	; 0x2a24 <vfprintf+0x1d8>
    2a20:	89 36       	cpi	r24, 0x69	; 105
    2a22:	31 f5       	brne	.+76     	; 0x2a70 <vfprintf+0x224>
    2a24:	f8 01       	movw	r30, r16
    2a26:	27 ff       	sbrs	r18, 7
    2a28:	07 c0       	rjmp	.+14     	; 0x2a38 <vfprintf+0x1ec>
    2a2a:	60 81       	ld	r22, Z
    2a2c:	71 81       	ldd	r23, Z+1	; 0x01
    2a2e:	82 81       	ldd	r24, Z+2	; 0x02
    2a30:	93 81       	ldd	r25, Z+3	; 0x03
    2a32:	0c 5f       	subi	r16, 0xFC	; 252
    2a34:	1f 4f       	sbci	r17, 0xFF	; 255
    2a36:	08 c0       	rjmp	.+16     	; 0x2a48 <vfprintf+0x1fc>
    2a38:	60 81       	ld	r22, Z
    2a3a:	71 81       	ldd	r23, Z+1	; 0x01
    2a3c:	07 2e       	mov	r0, r23
    2a3e:	00 0c       	add	r0, r0
    2a40:	88 0b       	sbc	r24, r24
    2a42:	99 0b       	sbc	r25, r25
    2a44:	0e 5f       	subi	r16, 0xFE	; 254
    2a46:	1f 4f       	sbci	r17, 0xFF	; 255
    2a48:	2f 76       	andi	r18, 0x6F	; 111
    2a4a:	72 2e       	mov	r7, r18
    2a4c:	97 ff       	sbrs	r25, 7
    2a4e:	09 c0       	rjmp	.+18     	; 0x2a62 <vfprintf+0x216>
    2a50:	90 95       	com	r25
    2a52:	80 95       	com	r24
    2a54:	70 95       	com	r23
    2a56:	61 95       	neg	r22
    2a58:	7f 4f       	sbci	r23, 0xFF	; 255
    2a5a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a5e:	20 68       	ori	r18, 0x80	; 128
    2a60:	72 2e       	mov	r7, r18
    2a62:	2a e0       	ldi	r18, 0x0A	; 10
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	a4 01       	movw	r20, r8
    2a68:	b3 d2       	rcall	.+1382   	; 0x2fd0 <__ultoa_invert>
    2a6a:	a8 2e       	mov	r10, r24
    2a6c:	a8 18       	sub	r10, r8
    2a6e:	43 c0       	rjmp	.+134    	; 0x2af6 <vfprintf+0x2aa>
    2a70:	85 37       	cpi	r24, 0x75	; 117
    2a72:	29 f4       	brne	.+10     	; 0x2a7e <vfprintf+0x232>
    2a74:	2f 7e       	andi	r18, 0xEF	; 239
    2a76:	b2 2e       	mov	r11, r18
    2a78:	2a e0       	ldi	r18, 0x0A	; 10
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	25 c0       	rjmp	.+74     	; 0x2ac8 <vfprintf+0x27c>
    2a7e:	f2 2f       	mov	r31, r18
    2a80:	f9 7f       	andi	r31, 0xF9	; 249
    2a82:	bf 2e       	mov	r11, r31
    2a84:	8f 36       	cpi	r24, 0x6F	; 111
    2a86:	c1 f0       	breq	.+48     	; 0x2ab8 <vfprintf+0x26c>
    2a88:	18 f4       	brcc	.+6      	; 0x2a90 <vfprintf+0x244>
    2a8a:	88 35       	cpi	r24, 0x58	; 88
    2a8c:	79 f0       	breq	.+30     	; 0x2aac <vfprintf+0x260>
    2a8e:	ad c0       	rjmp	.+346    	; 0x2bea <vfprintf+0x39e>
    2a90:	80 37       	cpi	r24, 0x70	; 112
    2a92:	19 f0       	breq	.+6      	; 0x2a9a <vfprintf+0x24e>
    2a94:	88 37       	cpi	r24, 0x78	; 120
    2a96:	21 f0       	breq	.+8      	; 0x2aa0 <vfprintf+0x254>
    2a98:	a8 c0       	rjmp	.+336    	; 0x2bea <vfprintf+0x39e>
    2a9a:	2f 2f       	mov	r18, r31
    2a9c:	20 61       	ori	r18, 0x10	; 16
    2a9e:	b2 2e       	mov	r11, r18
    2aa0:	b4 fe       	sbrs	r11, 4
    2aa2:	0d c0       	rjmp	.+26     	; 0x2abe <vfprintf+0x272>
    2aa4:	8b 2d       	mov	r24, r11
    2aa6:	84 60       	ori	r24, 0x04	; 4
    2aa8:	b8 2e       	mov	r11, r24
    2aaa:	09 c0       	rjmp	.+18     	; 0x2abe <vfprintf+0x272>
    2aac:	24 ff       	sbrs	r18, 4
    2aae:	0a c0       	rjmp	.+20     	; 0x2ac4 <vfprintf+0x278>
    2ab0:	9f 2f       	mov	r25, r31
    2ab2:	96 60       	ori	r25, 0x06	; 6
    2ab4:	b9 2e       	mov	r11, r25
    2ab6:	06 c0       	rjmp	.+12     	; 0x2ac4 <vfprintf+0x278>
    2ab8:	28 e0       	ldi	r18, 0x08	; 8
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	05 c0       	rjmp	.+10     	; 0x2ac8 <vfprintf+0x27c>
    2abe:	20 e1       	ldi	r18, 0x10	; 16
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	02 c0       	rjmp	.+4      	; 0x2ac8 <vfprintf+0x27c>
    2ac4:	20 e1       	ldi	r18, 0x10	; 16
    2ac6:	32 e0       	ldi	r19, 0x02	; 2
    2ac8:	f8 01       	movw	r30, r16
    2aca:	b7 fe       	sbrs	r11, 7
    2acc:	07 c0       	rjmp	.+14     	; 0x2adc <vfprintf+0x290>
    2ace:	60 81       	ld	r22, Z
    2ad0:	71 81       	ldd	r23, Z+1	; 0x01
    2ad2:	82 81       	ldd	r24, Z+2	; 0x02
    2ad4:	93 81       	ldd	r25, Z+3	; 0x03
    2ad6:	0c 5f       	subi	r16, 0xFC	; 252
    2ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    2ada:	06 c0       	rjmp	.+12     	; 0x2ae8 <vfprintf+0x29c>
    2adc:	60 81       	ld	r22, Z
    2ade:	71 81       	ldd	r23, Z+1	; 0x01
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	0e 5f       	subi	r16, 0xFE	; 254
    2ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae8:	a4 01       	movw	r20, r8
    2aea:	72 d2       	rcall	.+1252   	; 0x2fd0 <__ultoa_invert>
    2aec:	a8 2e       	mov	r10, r24
    2aee:	a8 18       	sub	r10, r8
    2af0:	fb 2d       	mov	r31, r11
    2af2:	ff 77       	andi	r31, 0x7F	; 127
    2af4:	7f 2e       	mov	r7, r31
    2af6:	76 fe       	sbrs	r7, 6
    2af8:	0b c0       	rjmp	.+22     	; 0x2b10 <vfprintf+0x2c4>
    2afa:	37 2d       	mov	r19, r7
    2afc:	3e 7f       	andi	r19, 0xFE	; 254
    2afe:	a5 14       	cp	r10, r5
    2b00:	50 f4       	brcc	.+20     	; 0x2b16 <vfprintf+0x2ca>
    2b02:	74 fe       	sbrs	r7, 4
    2b04:	0a c0       	rjmp	.+20     	; 0x2b1a <vfprintf+0x2ce>
    2b06:	72 fc       	sbrc	r7, 2
    2b08:	08 c0       	rjmp	.+16     	; 0x2b1a <vfprintf+0x2ce>
    2b0a:	37 2d       	mov	r19, r7
    2b0c:	3e 7e       	andi	r19, 0xEE	; 238
    2b0e:	05 c0       	rjmp	.+10     	; 0x2b1a <vfprintf+0x2ce>
    2b10:	ba 2c       	mov	r11, r10
    2b12:	37 2d       	mov	r19, r7
    2b14:	03 c0       	rjmp	.+6      	; 0x2b1c <vfprintf+0x2d0>
    2b16:	ba 2c       	mov	r11, r10
    2b18:	01 c0       	rjmp	.+2      	; 0x2b1c <vfprintf+0x2d0>
    2b1a:	b5 2c       	mov	r11, r5
    2b1c:	34 ff       	sbrs	r19, 4
    2b1e:	0d c0       	rjmp	.+26     	; 0x2b3a <vfprintf+0x2ee>
    2b20:	fe 01       	movw	r30, r28
    2b22:	ea 0d       	add	r30, r10
    2b24:	f1 1d       	adc	r31, r1
    2b26:	80 81       	ld	r24, Z
    2b28:	80 33       	cpi	r24, 0x30	; 48
    2b2a:	11 f4       	brne	.+4      	; 0x2b30 <vfprintf+0x2e4>
    2b2c:	39 7e       	andi	r19, 0xE9	; 233
    2b2e:	09 c0       	rjmp	.+18     	; 0x2b42 <vfprintf+0x2f6>
    2b30:	32 ff       	sbrs	r19, 2
    2b32:	06 c0       	rjmp	.+12     	; 0x2b40 <vfprintf+0x2f4>
    2b34:	b3 94       	inc	r11
    2b36:	b3 94       	inc	r11
    2b38:	04 c0       	rjmp	.+8      	; 0x2b42 <vfprintf+0x2f6>
    2b3a:	83 2f       	mov	r24, r19
    2b3c:	86 78       	andi	r24, 0x86	; 134
    2b3e:	09 f0       	breq	.+2      	; 0x2b42 <vfprintf+0x2f6>
    2b40:	b3 94       	inc	r11
    2b42:	33 fd       	sbrc	r19, 3
    2b44:	12 c0       	rjmp	.+36     	; 0x2b6a <vfprintf+0x31e>
    2b46:	30 ff       	sbrs	r19, 0
    2b48:	06 c0       	rjmp	.+12     	; 0x2b56 <vfprintf+0x30a>
    2b4a:	5a 2c       	mov	r5, r10
    2b4c:	b3 14       	cp	r11, r3
    2b4e:	18 f4       	brcc	.+6      	; 0x2b56 <vfprintf+0x30a>
    2b50:	53 0c       	add	r5, r3
    2b52:	5b 18       	sub	r5, r11
    2b54:	b3 2c       	mov	r11, r3
    2b56:	b3 14       	cp	r11, r3
    2b58:	60 f4       	brcc	.+24     	; 0x2b72 <vfprintf+0x326>
    2b5a:	b7 01       	movw	r22, r14
    2b5c:	80 e2       	ldi	r24, 0x20	; 32
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	3c 87       	std	Y+12, r19	; 0x0c
    2b62:	fe d1       	rcall	.+1020   	; 0x2f60 <fputc>
    2b64:	b3 94       	inc	r11
    2b66:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b68:	f6 cf       	rjmp	.-20     	; 0x2b56 <vfprintf+0x30a>
    2b6a:	b3 14       	cp	r11, r3
    2b6c:	10 f4       	brcc	.+4      	; 0x2b72 <vfprintf+0x326>
    2b6e:	3b 18       	sub	r3, r11
    2b70:	01 c0       	rjmp	.+2      	; 0x2b74 <vfprintf+0x328>
    2b72:	31 2c       	mov	r3, r1
    2b74:	34 ff       	sbrs	r19, 4
    2b76:	11 c0       	rjmp	.+34     	; 0x2b9a <vfprintf+0x34e>
    2b78:	b7 01       	movw	r22, r14
    2b7a:	80 e3       	ldi	r24, 0x30	; 48
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	3c 87       	std	Y+12, r19	; 0x0c
    2b80:	ef d1       	rcall	.+990    	; 0x2f60 <fputc>
    2b82:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b84:	32 ff       	sbrs	r19, 2
    2b86:	16 c0       	rjmp	.+44     	; 0x2bb4 <vfprintf+0x368>
    2b88:	31 fd       	sbrc	r19, 1
    2b8a:	03 c0       	rjmp	.+6      	; 0x2b92 <vfprintf+0x346>
    2b8c:	88 e7       	ldi	r24, 0x78	; 120
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	02 c0       	rjmp	.+4      	; 0x2b96 <vfprintf+0x34a>
    2b92:	88 e5       	ldi	r24, 0x58	; 88
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	b7 01       	movw	r22, r14
    2b98:	0c c0       	rjmp	.+24     	; 0x2bb2 <vfprintf+0x366>
    2b9a:	83 2f       	mov	r24, r19
    2b9c:	86 78       	andi	r24, 0x86	; 134
    2b9e:	51 f0       	breq	.+20     	; 0x2bb4 <vfprintf+0x368>
    2ba0:	31 ff       	sbrs	r19, 1
    2ba2:	02 c0       	rjmp	.+4      	; 0x2ba8 <vfprintf+0x35c>
    2ba4:	8b e2       	ldi	r24, 0x2B	; 43
    2ba6:	01 c0       	rjmp	.+2      	; 0x2baa <vfprintf+0x35e>
    2ba8:	80 e2       	ldi	r24, 0x20	; 32
    2baa:	37 fd       	sbrc	r19, 7
    2bac:	8d e2       	ldi	r24, 0x2D	; 45
    2bae:	b7 01       	movw	r22, r14
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	d6 d1       	rcall	.+940    	; 0x2f60 <fputc>
    2bb4:	a5 14       	cp	r10, r5
    2bb6:	30 f4       	brcc	.+12     	; 0x2bc4 <vfprintf+0x378>
    2bb8:	b7 01       	movw	r22, r14
    2bba:	80 e3       	ldi	r24, 0x30	; 48
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	d0 d1       	rcall	.+928    	; 0x2f60 <fputc>
    2bc0:	5a 94       	dec	r5
    2bc2:	f8 cf       	rjmp	.-16     	; 0x2bb4 <vfprintf+0x368>
    2bc4:	aa 94       	dec	r10
    2bc6:	f4 01       	movw	r30, r8
    2bc8:	ea 0d       	add	r30, r10
    2bca:	f1 1d       	adc	r31, r1
    2bcc:	80 81       	ld	r24, Z
    2bce:	b7 01       	movw	r22, r14
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	c6 d1       	rcall	.+908    	; 0x2f60 <fputc>
    2bd4:	a1 10       	cpse	r10, r1
    2bd6:	f6 cf       	rjmp	.-20     	; 0x2bc4 <vfprintf+0x378>
    2bd8:	33 20       	and	r3, r3
    2bda:	09 f4       	brne	.+2      	; 0x2bde <vfprintf+0x392>
    2bdc:	5d ce       	rjmp	.-838    	; 0x2898 <vfprintf+0x4c>
    2bde:	b7 01       	movw	r22, r14
    2be0:	80 e2       	ldi	r24, 0x20	; 32
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	bd d1       	rcall	.+890    	; 0x2f60 <fputc>
    2be6:	3a 94       	dec	r3
    2be8:	f7 cf       	rjmp	.-18     	; 0x2bd8 <vfprintf+0x38c>
    2bea:	f7 01       	movw	r30, r14
    2bec:	86 81       	ldd	r24, Z+6	; 0x06
    2bee:	97 81       	ldd	r25, Z+7	; 0x07
    2bf0:	02 c0       	rjmp	.+4      	; 0x2bf6 <vfprintf+0x3aa>
    2bf2:	8f ef       	ldi	r24, 0xFF	; 255
    2bf4:	9f ef       	ldi	r25, 0xFF	; 255
    2bf6:	2c 96       	adiw	r28, 0x0c	; 12
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	f8 94       	cli
    2bfc:	de bf       	out	0x3e, r29	; 62
    2bfe:	0f be       	out	0x3f, r0	; 63
    2c00:	cd bf       	out	0x3d, r28	; 61
    2c02:	df 91       	pop	r29
    2c04:	cf 91       	pop	r28
    2c06:	1f 91       	pop	r17
    2c08:	0f 91       	pop	r16
    2c0a:	ff 90       	pop	r15
    2c0c:	ef 90       	pop	r14
    2c0e:	df 90       	pop	r13
    2c10:	cf 90       	pop	r12
    2c12:	bf 90       	pop	r11
    2c14:	af 90       	pop	r10
    2c16:	9f 90       	pop	r9
    2c18:	8f 90       	pop	r8
    2c1a:	7f 90       	pop	r7
    2c1c:	6f 90       	pop	r6
    2c1e:	5f 90       	pop	r5
    2c20:	4f 90       	pop	r4
    2c22:	3f 90       	pop	r3
    2c24:	2f 90       	pop	r2
    2c26:	08 95       	ret

00002c28 <strtod>:
    2c28:	6f 92       	push	r6
    2c2a:	7f 92       	push	r7
    2c2c:	8f 92       	push	r8
    2c2e:	9f 92       	push	r9
    2c30:	af 92       	push	r10
    2c32:	bf 92       	push	r11
    2c34:	cf 92       	push	r12
    2c36:	df 92       	push	r13
    2c38:	ef 92       	push	r14
    2c3a:	ff 92       	push	r15
    2c3c:	0f 93       	push	r16
    2c3e:	1f 93       	push	r17
    2c40:	cf 93       	push	r28
    2c42:	df 93       	push	r29
    2c44:	ec 01       	movw	r28, r24
    2c46:	7b 01       	movw	r14, r22
    2c48:	61 15       	cp	r22, r1
    2c4a:	71 05       	cpc	r23, r1
    2c4c:	19 f0       	breq	.+6      	; 0x2c54 <strtod+0x2c>
    2c4e:	db 01       	movw	r26, r22
    2c50:	8d 93       	st	X+, r24
    2c52:	9c 93       	st	X, r25
    2c54:	8e 01       	movw	r16, r28
    2c56:	0f 5f       	subi	r16, 0xFF	; 255
    2c58:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5a:	78 80       	ld	r7, Y
    2c5c:	87 2d       	mov	r24, r7
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	49 d1       	rcall	.+658    	; 0x2ef4 <isspace>
    2c62:	89 2b       	or	r24, r25
    2c64:	11 f0       	breq	.+4      	; 0x2c6a <strtod+0x42>
    2c66:	e8 01       	movw	r28, r16
    2c68:	f5 cf       	rjmp	.-22     	; 0x2c54 <strtod+0x2c>
    2c6a:	bd e2       	ldi	r27, 0x2D	; 45
    2c6c:	7b 12       	cpse	r7, r27
    2c6e:	05 c0       	rjmp	.+10     	; 0x2c7a <strtod+0x52>
    2c70:	0f 5f       	subi	r16, 0xFF	; 255
    2c72:	1f 4f       	sbci	r17, 0xFF	; 255
    2c74:	79 80       	ldd	r7, Y+1	; 0x01
    2c76:	c1 e0       	ldi	r28, 0x01	; 1
    2c78:	08 c0       	rjmp	.+16     	; 0x2c8a <strtod+0x62>
    2c7a:	eb e2       	ldi	r30, 0x2B	; 43
    2c7c:	7e 12       	cpse	r7, r30
    2c7e:	04 c0       	rjmp	.+8      	; 0x2c88 <strtod+0x60>
    2c80:	8e 01       	movw	r16, r28
    2c82:	0e 5f       	subi	r16, 0xFE	; 254
    2c84:	1f 4f       	sbci	r17, 0xFF	; 255
    2c86:	79 80       	ldd	r7, Y+1	; 0x01
    2c88:	c0 e0       	ldi	r28, 0x00	; 0
    2c8a:	68 01       	movw	r12, r16
    2c8c:	f1 e0       	ldi	r31, 0x01	; 1
    2c8e:	cf 1a       	sub	r12, r31
    2c90:	d1 08       	sbc	r13, r1
    2c92:	43 e0       	ldi	r20, 0x03	; 3
    2c94:	50 e0       	ldi	r21, 0x00	; 0
    2c96:	6e e2       	ldi	r22, 0x2E	; 46
    2c98:	71 e0       	ldi	r23, 0x01	; 1
    2c9a:	c6 01       	movw	r24, r12
    2c9c:	33 d1       	rcall	.+614    	; 0x2f04 <strncasecmp_P>
    2c9e:	89 2b       	or	r24, r25
    2ca0:	e9 f4       	brne	.+58     	; 0x2cdc <strtod+0xb4>
    2ca2:	68 01       	movw	r12, r16
    2ca4:	22 e0       	ldi	r18, 0x02	; 2
    2ca6:	c2 0e       	add	r12, r18
    2ca8:	d1 1c       	adc	r13, r1
    2caa:	45 e0       	ldi	r20, 0x05	; 5
    2cac:	50 e0       	ldi	r21, 0x00	; 0
    2cae:	69 e2       	ldi	r22, 0x29	; 41
    2cb0:	71 e0       	ldi	r23, 0x01	; 1
    2cb2:	c6 01       	movw	r24, r12
    2cb4:	27 d1       	rcall	.+590    	; 0x2f04 <strncasecmp_P>
    2cb6:	89 2b       	or	r24, r25
    2cb8:	21 f4       	brne	.+8      	; 0x2cc2 <strtod+0x9a>
    2cba:	68 01       	movw	r12, r16
    2cbc:	87 e0       	ldi	r24, 0x07	; 7
    2cbe:	c8 0e       	add	r12, r24
    2cc0:	d1 1c       	adc	r13, r1
    2cc2:	e1 14       	cp	r14, r1
    2cc4:	f1 04       	cpc	r15, r1
    2cc6:	19 f0       	breq	.+6      	; 0x2cce <strtod+0xa6>
    2cc8:	d7 01       	movw	r26, r14
    2cca:	cd 92       	st	X+, r12
    2ccc:	dc 92       	st	X, r13
    2cce:	c1 11       	cpse	r28, r1
    2cd0:	f9 c0       	rjmp	.+498    	; 0x2ec4 <strtod+0x29c>
    2cd2:	60 e0       	ldi	r22, 0x00	; 0
    2cd4:	70 e0       	ldi	r23, 0x00	; 0
    2cd6:	80 e8       	ldi	r24, 0x80	; 128
    2cd8:	9f e7       	ldi	r25, 0x7F	; 127
    2cda:	fd c0       	rjmp	.+506    	; 0x2ed6 <strtod+0x2ae>
    2cdc:	43 e0       	ldi	r20, 0x03	; 3
    2cde:	50 e0       	ldi	r21, 0x00	; 0
    2ce0:	66 e2       	ldi	r22, 0x26	; 38
    2ce2:	71 e0       	ldi	r23, 0x01	; 1
    2ce4:	c6 01       	movw	r24, r12
    2ce6:	0e d1       	rcall	.+540    	; 0x2f04 <strncasecmp_P>
    2ce8:	89 2b       	or	r24, r25
    2cea:	51 f4       	brne	.+20     	; 0x2d00 <strtod+0xd8>
    2cec:	e1 14       	cp	r14, r1
    2cee:	f1 04       	cpc	r15, r1
    2cf0:	09 f4       	brne	.+2      	; 0x2cf4 <strtod+0xcc>
    2cf2:	ed c0       	rjmp	.+474    	; 0x2ece <strtod+0x2a6>
    2cf4:	0e 5f       	subi	r16, 0xFE	; 254
    2cf6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cf8:	f7 01       	movw	r30, r14
    2cfa:	11 83       	std	Z+1, r17	; 0x01
    2cfc:	00 83       	st	Z, r16
    2cfe:	e7 c0       	rjmp	.+462    	; 0x2ece <strtod+0x2a6>
    2d00:	68 01       	movw	r12, r16
    2d02:	60 e0       	ldi	r22, 0x00	; 0
    2d04:	70 e0       	ldi	r23, 0x00	; 0
    2d06:	cb 01       	movw	r24, r22
    2d08:	00 e0       	ldi	r16, 0x00	; 0
    2d0a:	10 e0       	ldi	r17, 0x00	; 0
    2d0c:	f6 01       	movw	r30, r12
    2d0e:	d0 ed       	ldi	r29, 0xD0	; 208
    2d10:	d7 0d       	add	r29, r7
    2d12:	da 30       	cpi	r29, 0x0A	; 10
    2d14:	50 f5       	brcc	.+84     	; 0x2d6a <strtod+0x142>
    2d16:	2c 2f       	mov	r18, r28
    2d18:	22 60       	ori	r18, 0x02	; 2
    2d1a:	62 2e       	mov	r6, r18
    2d1c:	2c 2f       	mov	r18, r28
    2d1e:	28 70       	andi	r18, 0x08	; 8
    2d20:	c2 ff       	sbrs	r28, 2
    2d22:	05 c0       	rjmp	.+10     	; 0x2d2e <strtod+0x106>
    2d24:	21 11       	cpse	r18, r1
    2d26:	27 c0       	rjmp	.+78     	; 0x2d76 <strtod+0x14e>
    2d28:	0f 5f       	subi	r16, 0xFF	; 255
    2d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d2c:	24 c0       	rjmp	.+72     	; 0x2d76 <strtod+0x14e>
    2d2e:	22 23       	and	r18, r18
    2d30:	11 f0       	breq	.+4      	; 0x2d36 <strtod+0x10e>
    2d32:	01 50       	subi	r16, 0x01	; 1
    2d34:	11 09       	sbc	r17, r1
    2d36:	a5 e0       	ldi	r26, 0x05	; 5
    2d38:	b0 e0       	ldi	r27, 0x00	; 0
    2d3a:	9b 01       	movw	r18, r22
    2d3c:	ac 01       	movw	r20, r24
    2d3e:	ba dc       	rcall	.-1676   	; 0x26b4 <__muluhisi3>
    2d40:	4b 01       	movw	r8, r22
    2d42:	5c 01       	movw	r10, r24
    2d44:	88 0c       	add	r8, r8
    2d46:	99 1c       	adc	r9, r9
    2d48:	aa 1c       	adc	r10, r10
    2d4a:	bb 1c       	adc	r11, r11
    2d4c:	c5 01       	movw	r24, r10
    2d4e:	b4 01       	movw	r22, r8
    2d50:	6d 0f       	add	r22, r29
    2d52:	71 1d       	adc	r23, r1
    2d54:	81 1d       	adc	r24, r1
    2d56:	91 1d       	adc	r25, r1
    2d58:	68 39       	cpi	r22, 0x98	; 152
    2d5a:	a9 e9       	ldi	r26, 0x99	; 153
    2d5c:	7a 07       	cpc	r23, r26
    2d5e:	8a 07       	cpc	r24, r26
    2d60:	a9 e1       	ldi	r26, 0x19	; 25
    2d62:	9a 07       	cpc	r25, r26
    2d64:	40 f0       	brcs	.+16     	; 0x2d76 <strtod+0x14e>
    2d66:	c6 60       	ori	r28, 0x06	; 6
    2d68:	05 c0       	rjmp	.+10     	; 0x2d74 <strtod+0x14c>
    2d6a:	de 3f       	cpi	r29, 0xFE	; 254
    2d6c:	51 f4       	brne	.+20     	; 0x2d82 <strtod+0x15a>
    2d6e:	c3 fd       	sbrc	r28, 3
    2d70:	44 c0       	rjmp	.+136    	; 0x2dfa <strtod+0x1d2>
    2d72:	c8 60       	ori	r28, 0x08	; 8
    2d74:	6c 2e       	mov	r6, r28
    2d76:	bf ef       	ldi	r27, 0xFF	; 255
    2d78:	cb 1a       	sub	r12, r27
    2d7a:	db 0a       	sbc	r13, r27
    2d7c:	70 80       	ld	r7, Z
    2d7e:	c6 2d       	mov	r28, r6
    2d80:	c5 cf       	rjmp	.-118    	; 0x2d0c <strtod+0xe4>
    2d82:	2d 2f       	mov	r18, r29
    2d84:	2f 7d       	andi	r18, 0xDF	; 223
    2d86:	25 31       	cpi	r18, 0x15	; 21
    2d88:	c1 f5       	brne	.+112    	; 0x2dfa <strtod+0x1d2>
    2d8a:	40 81       	ld	r20, Z
    2d8c:	4d 32       	cpi	r20, 0x2D	; 45
    2d8e:	11 f4       	brne	.+4      	; 0x2d94 <strtod+0x16c>
    2d90:	c0 61       	ori	r28, 0x10	; 16
    2d92:	06 c0       	rjmp	.+12     	; 0x2da0 <strtod+0x178>
    2d94:	4b 32       	cpi	r20, 0x2B	; 43
    2d96:	21 f0       	breq	.+8      	; 0x2da0 <strtod+0x178>
    2d98:	31 96       	adiw	r30, 0x01	; 1
    2d9a:	21 e0       	ldi	r18, 0x01	; 1
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	06 c0       	rjmp	.+12     	; 0x2dac <strtod+0x184>
    2da0:	32 96       	adiw	r30, 0x02	; 2
    2da2:	d6 01       	movw	r26, r12
    2da4:	11 96       	adiw	r26, 0x01	; 1
    2da6:	4c 91       	ld	r20, X
    2da8:	22 e0       	ldi	r18, 0x02	; 2
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	a0 ed       	ldi	r26, 0xD0	; 208
    2dae:	a4 0f       	add	r26, r20
    2db0:	aa 30       	cpi	r26, 0x0A	; 10
    2db2:	18 f0       	brcs	.+6      	; 0x2dba <strtod+0x192>
    2db4:	e2 1b       	sub	r30, r18
    2db6:	f3 0b       	sbc	r31, r19
    2db8:	20 c0       	rjmp	.+64     	; 0x2dfa <strtod+0x1d2>
    2dba:	40 e0       	ldi	r20, 0x00	; 0
    2dbc:	50 e0       	ldi	r21, 0x00	; 0
    2dbe:	40 38       	cpi	r20, 0x80	; 128
    2dc0:	bc e0       	ldi	r27, 0x0C	; 12
    2dc2:	5b 07       	cpc	r21, r27
    2dc4:	5c f4       	brge	.+22     	; 0x2ddc <strtod+0x1b4>
    2dc6:	9a 01       	movw	r18, r20
    2dc8:	22 0f       	add	r18, r18
    2dca:	33 1f       	adc	r19, r19
    2dcc:	22 0f       	add	r18, r18
    2dce:	33 1f       	adc	r19, r19
    2dd0:	42 0f       	add	r20, r18
    2dd2:	53 1f       	adc	r21, r19
    2dd4:	44 0f       	add	r20, r20
    2dd6:	55 1f       	adc	r21, r21
    2dd8:	4a 0f       	add	r20, r26
    2dda:	51 1d       	adc	r21, r1
    2ddc:	31 96       	adiw	r30, 0x01	; 1
    2dde:	df 01       	movw	r26, r30
    2de0:	11 97       	sbiw	r26, 0x01	; 1
    2de2:	2c 91       	ld	r18, X
    2de4:	a0 ed       	ldi	r26, 0xD0	; 208
    2de6:	a2 0f       	add	r26, r18
    2de8:	aa 30       	cpi	r26, 0x0A	; 10
    2dea:	48 f3       	brcs	.-46     	; 0x2dbe <strtod+0x196>
    2dec:	c4 ff       	sbrs	r28, 4
    2dee:	03 c0       	rjmp	.+6      	; 0x2df6 <strtod+0x1ce>
    2df0:	51 95       	neg	r21
    2df2:	41 95       	neg	r20
    2df4:	51 09       	sbc	r21, r1
    2df6:	04 0f       	add	r16, r20
    2df8:	15 1f       	adc	r17, r21
    2dfa:	c1 ff       	sbrs	r28, 1
    2dfc:	07 c0       	rjmp	.+14     	; 0x2e0c <strtod+0x1e4>
    2dfe:	e1 14       	cp	r14, r1
    2e00:	f1 04       	cpc	r15, r1
    2e02:	21 f0       	breq	.+8      	; 0x2e0c <strtod+0x1e4>
    2e04:	31 97       	sbiw	r30, 0x01	; 1
    2e06:	d7 01       	movw	r26, r14
    2e08:	ed 93       	st	X+, r30
    2e0a:	fc 93       	st	X, r31
    2e0c:	17 da       	rcall	.-3026   	; 0x223c <__floatunsisf>
    2e0e:	c3 70       	andi	r28, 0x03	; 3
    2e10:	c3 30       	cpi	r28, 0x03	; 3
    2e12:	19 f0       	breq	.+6      	; 0x2e1a <strtod+0x1f2>
    2e14:	6b 01       	movw	r12, r22
    2e16:	7c 01       	movw	r14, r24
    2e18:	06 c0       	rjmp	.+12     	; 0x2e26 <strtod+0x1fe>
    2e1a:	6b 01       	movw	r12, r22
    2e1c:	7c 01       	movw	r14, r24
    2e1e:	f7 fa       	bst	r15, 7
    2e20:	f0 94       	com	r15
    2e22:	f7 f8       	bld	r15, 7
    2e24:	f0 94       	com	r15
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	a9 01       	movw	r20, r18
    2e2c:	c7 01       	movw	r24, r14
    2e2e:	b6 01       	movw	r22, r12
    2e30:	2a d9       	rcall	.-3500   	; 0x2086 <__cmpsf2>
    2e32:	88 23       	and	r24, r24
    2e34:	09 f4       	brne	.+2      	; 0x2e38 <strtod+0x210>
    2e36:	43 c0       	rjmp	.+134    	; 0x2ebe <strtod+0x296>
    2e38:	17 ff       	sbrs	r17, 7
    2e3a:	06 c0       	rjmp	.+12     	; 0x2e48 <strtod+0x220>
    2e3c:	11 95       	neg	r17
    2e3e:	01 95       	neg	r16
    2e40:	11 09       	sbc	r17, r1
    2e42:	c5 e4       	ldi	r28, 0x45	; 69
    2e44:	d1 e0       	ldi	r29, 0x01	; 1
    2e46:	02 c0       	rjmp	.+4      	; 0x2e4c <strtod+0x224>
    2e48:	cd e5       	ldi	r28, 0x5D	; 93
    2e4a:	d1 e0       	ldi	r29, 0x01	; 1
    2e4c:	5e 01       	movw	r10, r28
    2e4e:	b8 e1       	ldi	r27, 0x18	; 24
    2e50:	ab 1a       	sub	r10, r27
    2e52:	b1 08       	sbc	r11, r1
    2e54:	46 01       	movw	r8, r12
    2e56:	be 2d       	mov	r27, r14
    2e58:	af 2d       	mov	r26, r15
    2e5a:	90 e2       	ldi	r25, 0x20	; 32
    2e5c:	e9 2e       	mov	r14, r25
    2e5e:	f1 2c       	mov	r15, r1
    2e60:	0e 15       	cp	r16, r14
    2e62:	1f 05       	cpc	r17, r15
    2e64:	7c f0       	brlt	.+30     	; 0x2e84 <strtod+0x25c>
    2e66:	fe 01       	movw	r30, r28
    2e68:	25 91       	lpm	r18, Z+
    2e6a:	35 91       	lpm	r19, Z+
    2e6c:	45 91       	lpm	r20, Z+
    2e6e:	54 91       	lpm	r21, Z
    2e70:	b4 01       	movw	r22, r8
    2e72:	8b 2f       	mov	r24, r27
    2e74:	9a 2f       	mov	r25, r26
    2e76:	2b db       	rcall	.-2474   	; 0x24ce <__mulsf3>
    2e78:	4b 01       	movw	r8, r22
    2e7a:	b8 2f       	mov	r27, r24
    2e7c:	a9 2f       	mov	r26, r25
    2e7e:	0e 19       	sub	r16, r14
    2e80:	1f 09       	sbc	r17, r15
    2e82:	ee cf       	rjmp	.-36     	; 0x2e60 <strtod+0x238>
    2e84:	24 97       	sbiw	r28, 0x04	; 4
    2e86:	f5 94       	asr	r15
    2e88:	e7 94       	ror	r14
    2e8a:	ca 15       	cp	r28, r10
    2e8c:	db 05       	cpc	r29, r11
    2e8e:	41 f7       	brne	.-48     	; 0x2e60 <strtod+0x238>
    2e90:	64 01       	movw	r12, r8
    2e92:	eb 2e       	mov	r14, r27
    2e94:	fa 2e       	mov	r15, r26
    2e96:	8e 2d       	mov	r24, r14
    2e98:	88 0f       	add	r24, r24
    2e9a:	8f 2d       	mov	r24, r15
    2e9c:	88 1f       	adc	r24, r24
    2e9e:	8f 3f       	cpi	r24, 0xFF	; 255
    2ea0:	41 f0       	breq	.+16     	; 0x2eb2 <strtod+0x28a>
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	a9 01       	movw	r20, r18
    2ea8:	c7 01       	movw	r24, r14
    2eaa:	b6 01       	movw	r22, r12
    2eac:	ec d8       	rcall	.-3624   	; 0x2086 <__cmpsf2>
    2eae:	81 11       	cpse	r24, r1
    2eb0:	06 c0       	rjmp	.+12     	; 0x2ebe <strtod+0x296>
    2eb2:	82 e2       	ldi	r24, 0x22	; 34
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	90 93 7d 03 	sts	0x037D, r25	; 0x80037d <errno+0x1>
    2eba:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <errno>
    2ebe:	c7 01       	movw	r24, r14
    2ec0:	b6 01       	movw	r22, r12
    2ec2:	09 c0       	rjmp	.+18     	; 0x2ed6 <strtod+0x2ae>
    2ec4:	60 e0       	ldi	r22, 0x00	; 0
    2ec6:	70 e0       	ldi	r23, 0x00	; 0
    2ec8:	80 e8       	ldi	r24, 0x80	; 128
    2eca:	9f ef       	ldi	r25, 0xFF	; 255
    2ecc:	04 c0       	rjmp	.+8      	; 0x2ed6 <strtod+0x2ae>
    2ece:	60 e0       	ldi	r22, 0x00	; 0
    2ed0:	70 e0       	ldi	r23, 0x00	; 0
    2ed2:	80 ec       	ldi	r24, 0xC0	; 192
    2ed4:	9f e7       	ldi	r25, 0x7F	; 127
    2ed6:	df 91       	pop	r29
    2ed8:	cf 91       	pop	r28
    2eda:	1f 91       	pop	r17
    2edc:	0f 91       	pop	r16
    2ede:	ff 90       	pop	r15
    2ee0:	ef 90       	pop	r14
    2ee2:	df 90       	pop	r13
    2ee4:	cf 90       	pop	r12
    2ee6:	bf 90       	pop	r11
    2ee8:	af 90       	pop	r10
    2eea:	9f 90       	pop	r9
    2eec:	8f 90       	pop	r8
    2eee:	7f 90       	pop	r7
    2ef0:	6f 90       	pop	r6
    2ef2:	08 95       	ret

00002ef4 <isspace>:
    2ef4:	91 11       	cpse	r25, r1
    2ef6:	ca c0       	rjmp	.+404    	; 0x308c <__ctype_isfalse>
    2ef8:	80 32       	cpi	r24, 0x20	; 32
    2efa:	19 f0       	breq	.+6      	; 0x2f02 <isspace+0xe>
    2efc:	89 50       	subi	r24, 0x09	; 9
    2efe:	85 50       	subi	r24, 0x05	; 5
    2f00:	d0 f7       	brcc	.-12     	; 0x2ef6 <isspace+0x2>
    2f02:	08 95       	ret

00002f04 <strncasecmp_P>:
    2f04:	fb 01       	movw	r30, r22
    2f06:	dc 01       	movw	r26, r24
    2f08:	41 50       	subi	r20, 0x01	; 1
    2f0a:	50 40       	sbci	r21, 0x00	; 0
    2f0c:	88 f0       	brcs	.+34     	; 0x2f30 <strncasecmp_P+0x2c>
    2f0e:	8d 91       	ld	r24, X+
    2f10:	81 34       	cpi	r24, 0x41	; 65
    2f12:	1c f0       	brlt	.+6      	; 0x2f1a <strncasecmp_P+0x16>
    2f14:	8b 35       	cpi	r24, 0x5B	; 91
    2f16:	0c f4       	brge	.+2      	; 0x2f1a <strncasecmp_P+0x16>
    2f18:	80 5e       	subi	r24, 0xE0	; 224
    2f1a:	65 91       	lpm	r22, Z+
    2f1c:	61 34       	cpi	r22, 0x41	; 65
    2f1e:	1c f0       	brlt	.+6      	; 0x2f26 <strncasecmp_P+0x22>
    2f20:	6b 35       	cpi	r22, 0x5B	; 91
    2f22:	0c f4       	brge	.+2      	; 0x2f26 <strncasecmp_P+0x22>
    2f24:	60 5e       	subi	r22, 0xE0	; 224
    2f26:	86 1b       	sub	r24, r22
    2f28:	61 11       	cpse	r22, r1
    2f2a:	71 f3       	breq	.-36     	; 0x2f08 <strncasecmp_P+0x4>
    2f2c:	99 0b       	sbc	r25, r25
    2f2e:	08 95       	ret
    2f30:	88 1b       	sub	r24, r24
    2f32:	fc cf       	rjmp	.-8      	; 0x2f2c <strncasecmp_P+0x28>

00002f34 <strnlen_P>:
    2f34:	fc 01       	movw	r30, r24
    2f36:	05 90       	lpm	r0, Z+
    2f38:	61 50       	subi	r22, 0x01	; 1
    2f3a:	70 40       	sbci	r23, 0x00	; 0
    2f3c:	01 10       	cpse	r0, r1
    2f3e:	d8 f7       	brcc	.-10     	; 0x2f36 <strnlen_P+0x2>
    2f40:	80 95       	com	r24
    2f42:	90 95       	com	r25
    2f44:	8e 0f       	add	r24, r30
    2f46:	9f 1f       	adc	r25, r31
    2f48:	08 95       	ret

00002f4a <strnlen>:
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	61 50       	subi	r22, 0x01	; 1
    2f4e:	70 40       	sbci	r23, 0x00	; 0
    2f50:	01 90       	ld	r0, Z+
    2f52:	01 10       	cpse	r0, r1
    2f54:	d8 f7       	brcc	.-10     	; 0x2f4c <strnlen+0x2>
    2f56:	80 95       	com	r24
    2f58:	90 95       	com	r25
    2f5a:	8e 0f       	add	r24, r30
    2f5c:	9f 1f       	adc	r25, r31
    2f5e:	08 95       	ret

00002f60 <fputc>:
    2f60:	0f 93       	push	r16
    2f62:	1f 93       	push	r17
    2f64:	cf 93       	push	r28
    2f66:	df 93       	push	r29
    2f68:	fb 01       	movw	r30, r22
    2f6a:	23 81       	ldd	r18, Z+3	; 0x03
    2f6c:	21 fd       	sbrc	r18, 1
    2f6e:	03 c0       	rjmp	.+6      	; 0x2f76 <fputc+0x16>
    2f70:	8f ef       	ldi	r24, 0xFF	; 255
    2f72:	9f ef       	ldi	r25, 0xFF	; 255
    2f74:	28 c0       	rjmp	.+80     	; 0x2fc6 <fputc+0x66>
    2f76:	22 ff       	sbrs	r18, 2
    2f78:	16 c0       	rjmp	.+44     	; 0x2fa6 <fputc+0x46>
    2f7a:	46 81       	ldd	r20, Z+6	; 0x06
    2f7c:	57 81       	ldd	r21, Z+7	; 0x07
    2f7e:	24 81       	ldd	r18, Z+4	; 0x04
    2f80:	35 81       	ldd	r19, Z+5	; 0x05
    2f82:	42 17       	cp	r20, r18
    2f84:	53 07       	cpc	r21, r19
    2f86:	44 f4       	brge	.+16     	; 0x2f98 <fputc+0x38>
    2f88:	a0 81       	ld	r26, Z
    2f8a:	b1 81       	ldd	r27, Z+1	; 0x01
    2f8c:	9d 01       	movw	r18, r26
    2f8e:	2f 5f       	subi	r18, 0xFF	; 255
    2f90:	3f 4f       	sbci	r19, 0xFF	; 255
    2f92:	31 83       	std	Z+1, r19	; 0x01
    2f94:	20 83       	st	Z, r18
    2f96:	8c 93       	st	X, r24
    2f98:	26 81       	ldd	r18, Z+6	; 0x06
    2f9a:	37 81       	ldd	r19, Z+7	; 0x07
    2f9c:	2f 5f       	subi	r18, 0xFF	; 255
    2f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa0:	37 83       	std	Z+7, r19	; 0x07
    2fa2:	26 83       	std	Z+6, r18	; 0x06
    2fa4:	10 c0       	rjmp	.+32     	; 0x2fc6 <fputc+0x66>
    2fa6:	eb 01       	movw	r28, r22
    2fa8:	09 2f       	mov	r16, r25
    2faa:	18 2f       	mov	r17, r24
    2fac:	00 84       	ldd	r0, Z+8	; 0x08
    2fae:	f1 85       	ldd	r31, Z+9	; 0x09
    2fb0:	e0 2d       	mov	r30, r0
    2fb2:	19 95       	eicall
    2fb4:	89 2b       	or	r24, r25
    2fb6:	e1 f6       	brne	.-72     	; 0x2f70 <fputc+0x10>
    2fb8:	8e 81       	ldd	r24, Y+6	; 0x06
    2fba:	9f 81       	ldd	r25, Y+7	; 0x07
    2fbc:	01 96       	adiw	r24, 0x01	; 1
    2fbe:	9f 83       	std	Y+7, r25	; 0x07
    2fc0:	8e 83       	std	Y+6, r24	; 0x06
    2fc2:	81 2f       	mov	r24, r17
    2fc4:	90 2f       	mov	r25, r16
    2fc6:	df 91       	pop	r29
    2fc8:	cf 91       	pop	r28
    2fca:	1f 91       	pop	r17
    2fcc:	0f 91       	pop	r16
    2fce:	08 95       	ret

00002fd0 <__ultoa_invert>:
    2fd0:	fa 01       	movw	r30, r20
    2fd2:	aa 27       	eor	r26, r26
    2fd4:	28 30       	cpi	r18, 0x08	; 8
    2fd6:	51 f1       	breq	.+84     	; 0x302c <__ultoa_invert+0x5c>
    2fd8:	20 31       	cpi	r18, 0x10	; 16
    2fda:	81 f1       	breq	.+96     	; 0x303c <__ultoa_invert+0x6c>
    2fdc:	e8 94       	clt
    2fde:	6f 93       	push	r22
    2fe0:	6e 7f       	andi	r22, 0xFE	; 254
    2fe2:	6e 5f       	subi	r22, 0xFE	; 254
    2fe4:	7f 4f       	sbci	r23, 0xFF	; 255
    2fe6:	8f 4f       	sbci	r24, 0xFF	; 255
    2fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fea:	af 4f       	sbci	r26, 0xFF	; 255
    2fec:	b1 e0       	ldi	r27, 0x01	; 1
    2fee:	3e d0       	rcall	.+124    	; 0x306c <__ultoa_invert+0x9c>
    2ff0:	b4 e0       	ldi	r27, 0x04	; 4
    2ff2:	3c d0       	rcall	.+120    	; 0x306c <__ultoa_invert+0x9c>
    2ff4:	67 0f       	add	r22, r23
    2ff6:	78 1f       	adc	r23, r24
    2ff8:	89 1f       	adc	r24, r25
    2ffa:	9a 1f       	adc	r25, r26
    2ffc:	a1 1d       	adc	r26, r1
    2ffe:	68 0f       	add	r22, r24
    3000:	79 1f       	adc	r23, r25
    3002:	8a 1f       	adc	r24, r26
    3004:	91 1d       	adc	r25, r1
    3006:	a1 1d       	adc	r26, r1
    3008:	6a 0f       	add	r22, r26
    300a:	71 1d       	adc	r23, r1
    300c:	81 1d       	adc	r24, r1
    300e:	91 1d       	adc	r25, r1
    3010:	a1 1d       	adc	r26, r1
    3012:	20 d0       	rcall	.+64     	; 0x3054 <__ultoa_invert+0x84>
    3014:	09 f4       	brne	.+2      	; 0x3018 <__ultoa_invert+0x48>
    3016:	68 94       	set
    3018:	3f 91       	pop	r19
    301a:	2a e0       	ldi	r18, 0x0A	; 10
    301c:	26 9f       	mul	r18, r22
    301e:	11 24       	eor	r1, r1
    3020:	30 19       	sub	r19, r0
    3022:	30 5d       	subi	r19, 0xD0	; 208
    3024:	31 93       	st	Z+, r19
    3026:	de f6       	brtc	.-74     	; 0x2fde <__ultoa_invert+0xe>
    3028:	cf 01       	movw	r24, r30
    302a:	08 95       	ret
    302c:	46 2f       	mov	r20, r22
    302e:	47 70       	andi	r20, 0x07	; 7
    3030:	40 5d       	subi	r20, 0xD0	; 208
    3032:	41 93       	st	Z+, r20
    3034:	b3 e0       	ldi	r27, 0x03	; 3
    3036:	0f d0       	rcall	.+30     	; 0x3056 <__ultoa_invert+0x86>
    3038:	c9 f7       	brne	.-14     	; 0x302c <__ultoa_invert+0x5c>
    303a:	f6 cf       	rjmp	.-20     	; 0x3028 <__ultoa_invert+0x58>
    303c:	46 2f       	mov	r20, r22
    303e:	4f 70       	andi	r20, 0x0F	; 15
    3040:	40 5d       	subi	r20, 0xD0	; 208
    3042:	4a 33       	cpi	r20, 0x3A	; 58
    3044:	18 f0       	brcs	.+6      	; 0x304c <__ultoa_invert+0x7c>
    3046:	49 5d       	subi	r20, 0xD9	; 217
    3048:	31 fd       	sbrc	r19, 1
    304a:	40 52       	subi	r20, 0x20	; 32
    304c:	41 93       	st	Z+, r20
    304e:	02 d0       	rcall	.+4      	; 0x3054 <__ultoa_invert+0x84>
    3050:	a9 f7       	brne	.-22     	; 0x303c <__ultoa_invert+0x6c>
    3052:	ea cf       	rjmp	.-44     	; 0x3028 <__ultoa_invert+0x58>
    3054:	b4 e0       	ldi	r27, 0x04	; 4
    3056:	a6 95       	lsr	r26
    3058:	97 95       	ror	r25
    305a:	87 95       	ror	r24
    305c:	77 95       	ror	r23
    305e:	67 95       	ror	r22
    3060:	ba 95       	dec	r27
    3062:	c9 f7       	brne	.-14     	; 0x3056 <__ultoa_invert+0x86>
    3064:	00 97       	sbiw	r24, 0x00	; 0
    3066:	61 05       	cpc	r22, r1
    3068:	71 05       	cpc	r23, r1
    306a:	08 95       	ret
    306c:	9b 01       	movw	r18, r22
    306e:	ac 01       	movw	r20, r24
    3070:	0a 2e       	mov	r0, r26
    3072:	06 94       	lsr	r0
    3074:	57 95       	ror	r21
    3076:	47 95       	ror	r20
    3078:	37 95       	ror	r19
    307a:	27 95       	ror	r18
    307c:	ba 95       	dec	r27
    307e:	c9 f7       	brne	.-14     	; 0x3072 <__ultoa_invert+0xa2>
    3080:	62 0f       	add	r22, r18
    3082:	73 1f       	adc	r23, r19
    3084:	84 1f       	adc	r24, r20
    3086:	95 1f       	adc	r25, r21
    3088:	a0 1d       	adc	r26, r0
    308a:	08 95       	ret

0000308c <__ctype_isfalse>:
    308c:	99 27       	eor	r25, r25
    308e:	88 27       	eor	r24, r24

00003090 <__ctype_istrue>:
    3090:	08 95       	ret

00003092 <_exit>:
    3092:	f8 94       	cli

00003094 <__stop_program>:
    3094:	ff cf       	rjmp	.-2      	; 0x3094 <__stop_program>
