
HARTCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000264  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000205  00800200  00800200  000002d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002807  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f31  00000000  00000000  00002c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001319  00000000  00000000  00003bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c0  00000000  00000000  00004edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a27  00000000  00000000  0000549c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001538  00000000  00000000  00005ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000073fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	82 c0       	rjmp	.+260    	; 0x10a <__bad_interrupt>
   6:	00 00       	nop
   8:	80 c0       	rjmp	.+256    	; 0x10a <__bad_interrupt>
   a:	00 00       	nop
   c:	7e c0       	rjmp	.+252    	; 0x10a <__bad_interrupt>
   e:	00 00       	nop
  10:	7c c0       	rjmp	.+248    	; 0x10a <__bad_interrupt>
  12:	00 00       	nop
  14:	7a c0       	rjmp	.+244    	; 0x10a <__bad_interrupt>
  16:	00 00       	nop
  18:	78 c0       	rjmp	.+240    	; 0x10a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	76 c0       	rjmp	.+236    	; 0x10a <__bad_interrupt>
  1e:	00 00       	nop
  20:	74 c0       	rjmp	.+232    	; 0x10a <__bad_interrupt>
  22:	00 00       	nop
  24:	72 c0       	rjmp	.+228    	; 0x10a <__bad_interrupt>
  26:	00 00       	nop
  28:	70 c0       	rjmp	.+224    	; 0x10a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6e c0       	rjmp	.+220    	; 0x10a <__bad_interrupt>
  2e:	00 00       	nop
  30:	6c c0       	rjmp	.+216    	; 0x10a <__bad_interrupt>
  32:	00 00       	nop
  34:	6a c0       	rjmp	.+212    	; 0x10a <__bad_interrupt>
  36:	00 00       	nop
  38:	68 c0       	rjmp	.+208    	; 0x10a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	66 c0       	rjmp	.+204    	; 0x10a <__bad_interrupt>
  3e:	00 00       	nop
  40:	64 c0       	rjmp	.+200    	; 0x10a <__bad_interrupt>
  42:	00 00       	nop
  44:	62 c0       	rjmp	.+196    	; 0x10a <__bad_interrupt>
  46:	00 00       	nop
  48:	60 c0       	rjmp	.+192    	; 0x10a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5e c0       	rjmp	.+188    	; 0x10a <__bad_interrupt>
  4e:	00 00       	nop
  50:	5c c0       	rjmp	.+184    	; 0x10a <__bad_interrupt>
  52:	00 00       	nop
  54:	5a c0       	rjmp	.+180    	; 0x10a <__bad_interrupt>
  56:	00 00       	nop
  58:	58 c0       	rjmp	.+176    	; 0x10a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	56 c0       	rjmp	.+172    	; 0x10a <__bad_interrupt>
  5e:	00 00       	nop
  60:	54 c0       	rjmp	.+168    	; 0x10a <__bad_interrupt>
  62:	00 00       	nop
  64:	54 c0       	rjmp	.+168    	; 0x10e <__vector_25>
  66:	00 00       	nop
  68:	50 c0       	rjmp	.+160    	; 0x10a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4e c0       	rjmp	.+156    	; 0x10a <__bad_interrupt>
  6e:	00 00       	nop
  70:	4c c0       	rjmp	.+152    	; 0x10a <__bad_interrupt>
  72:	00 00       	nop
  74:	4a c0       	rjmp	.+148    	; 0x10a <__bad_interrupt>
  76:	00 00       	nop
  78:	48 c0       	rjmp	.+144    	; 0x10a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	46 c0       	rjmp	.+140    	; 0x10a <__bad_interrupt>
  7e:	00 00       	nop
  80:	44 c0       	rjmp	.+136    	; 0x10a <__bad_interrupt>
  82:	00 00       	nop
  84:	42 c0       	rjmp	.+132    	; 0x10a <__bad_interrupt>
  86:	00 00       	nop
  88:	40 c0       	rjmp	.+128    	; 0x10a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3e c0       	rjmp	.+124    	; 0x10a <__bad_interrupt>
  8e:	00 00       	nop
  90:	8d c0       	rjmp	.+282    	; 0x1ac <__vector_36>
  92:	00 00       	nop
  94:	3a c0       	rjmp	.+116    	; 0x10a <__bad_interrupt>
  96:	00 00       	nop
  98:	38 c0       	rjmp	.+112    	; 0x10a <__bad_interrupt>
  9a:	00 00       	nop
  9c:	36 c0       	rjmp	.+108    	; 0x10a <__bad_interrupt>
  9e:	00 00       	nop
  a0:	34 c0       	rjmp	.+104    	; 0x10a <__bad_interrupt>
  a2:	00 00       	nop
  a4:	32 c0       	rjmp	.+100    	; 0x10a <__bad_interrupt>
  a6:	00 00       	nop
  a8:	30 c0       	rjmp	.+96     	; 0x10a <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2e c0       	rjmp	.+92     	; 0x10a <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2c c0       	rjmp	.+88     	; 0x10a <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2a c0       	rjmp	.+84     	; 0x10a <__bad_interrupt>
  b6:	00 00       	nop
  b8:	28 c0       	rjmp	.+80     	; 0x10a <__bad_interrupt>
  ba:	00 00       	nop
  bc:	26 c0       	rjmp	.+76     	; 0x10a <__bad_interrupt>
  be:	00 00       	nop
  c0:	24 c0       	rjmp	.+72     	; 0x10a <__bad_interrupt>
  c2:	00 00       	nop
  c4:	22 c0       	rjmp	.+68     	; 0x10a <__bad_interrupt>
  c6:	00 00       	nop
  c8:	20 c0       	rjmp	.+64     	; 0x10a <__bad_interrupt>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	00 e0       	ldi	r16, 0x00	; 0
  da:	0c bf       	out	0x3c, r16	; 60

000000dc <__do_copy_data>:
  dc:	12 e0       	ldi	r17, 0x02	; 2
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b2 e0       	ldi	r27, 0x02	; 2
  e2:	e4 e6       	ldi	r30, 0x64	; 100
  e4:	f2 e0       	ldi	r31, 0x02	; 2
  e6:	00 e0       	ldi	r16, 0x00	; 0
  e8:	0b bf       	out	0x3b, r16	; 59
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x14>
  ec:	07 90       	elpm	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	a0 30       	cpi	r26, 0x00	; 0
  f2:	b1 07       	cpc	r27, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x10>

000000f6 <__do_clear_bss>:
  f6:	24 e0       	ldi	r18, 0x04	; 4
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a5 30       	cpi	r26, 0x05	; 5
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	02 d0       	rcall	.+4      	; 0x10c <main>
 108:	ab c0       	rjmp	.+342    	; 0x260 <_exit>

0000010a <__bad_interrupt>:
 10a:	7a cf       	rjmp	.-268    	; 0x0 <__vectors>

0000010c <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

int main(void)
{
	while(1){};
 10c:	ff cf       	rjmp	.-2      	; 0x10c <main>

0000010e <__vector_25>:
char gpsBuffer[256];
uint8_t msgIndex;
uint8_t msgBeginFlag;
uint8_t msgEndFlag;

ISR(USART0_RX_vect){
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	0b b6       	in	r0, 0x3b	; 59
 11a:	0f 92       	push	r0
 11c:	8f 93       	push	r24
 11e:	9f 93       	push	r25
 120:	ef 93       	push	r30
 122:	ff 93       	push	r31
	uint8_t rcvb;
	rcvb = UDR0;
 124:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	//Checks to see receive byte is start of packet
	if (rcvb == '$' && !msgEndFlag){
 128:	84 32       	cpi	r24, 0x24	; 36
 12a:	69 f4       	brne	.+26     	; 0x146 <__vector_25+0x38>
 12c:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <msgEndFlag>
 130:	81 11       	cpse	r24, r1
 132:	31 c0       	rjmp	.+98     	; 0x196 <__vector_25+0x88>
		//If it is sets begin flag, puts in buffer
		msgBeginFlag = 1;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <msgBeginFlag>
		msgIndex = 0;
		gpsBuffer[msgIndex] = rcvb;
 13a:	94 e2       	ldi	r25, 0x24	; 36
 13c:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__data_end>
		msgIndex++;
 140:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <msgIndex>
 144:	28 c0       	rjmp	.+80     	; 0x196 <__vector_25+0x88>
	} else if (msgBeginFlag && rcvb != '*' && !msgEndFlag){
 146:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <msgBeginFlag>
 14a:	99 23       	and	r25, r25
 14c:	21 f1       	breq	.+72     	; 0x196 <__vector_25+0x88>
 14e:	8a 32       	cpi	r24, 0x2A	; 42
 150:	79 f0       	breq	.+30     	; 0x170 <__vector_25+0x62>
 152:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <msgEndFlag>
 156:	91 11       	cpse	r25, r1
 158:	1e c0       	rjmp	.+60     	; 0x196 <__vector_25+0x88>
		//If the message has started, put all received stuff in buffer
		gpsBuffer[msgIndex] = rcvb;
 15a:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <msgIndex>
 15e:	e9 2f       	mov	r30, r25
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	e0 50       	subi	r30, 0x00	; 0
 164:	fe 4f       	sbci	r31, 0xFE	; 254
 166:	80 83       	st	Z, r24
		msgIndex++;
 168:	9f 5f       	subi	r25, 0xFF	; 255
 16a:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <msgIndex>
 16e:	13 c0       	rjmp	.+38     	; 0x196 <__vector_25+0x88>
	} else if (msgBeginFlag && rcvb == '*' && !msgEndFlag){
 170:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <msgEndFlag>
 174:	81 11       	cpse	r24, r1
 176:	0f c0       	rjmp	.+30     	; 0x196 <__vector_25+0x88>
		//If end, stop receiving stuff and set end flag so that parsing can occur
		gpsBuffer[msgIndex] = rcvb;
 178:	e0 91 02 03 	lds	r30, 0x0302	; 0x800302 <msgIndex>
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	e0 50       	subi	r30, 0x00	; 0
 180:	fe 4f       	sbci	r31, 0xFE	; 254
 182:	8a e2       	ldi	r24, 0x2A	; 42
 184:	80 83       	st	Z, r24
		msgIndex = 0;
 186:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <msgIndex>
		msgEndFlag = 1;
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <msgEndFlag>
		msgBeginFlag = 0;
 190:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <msgBeginFlag>
		cli();
 194:	f8 94       	cli
		return;
	}
}
 196:	ff 91       	pop	r31
 198:	ef 91       	pop	r30
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	0f 90       	pop	r0
 1a0:	0b be       	out	0x3b, r0	; 59
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <__vector_36>:

uint8_t volatile rxn;
uint8_t volatile rx[256];
uint8_t volatile rxFlag;

ISR(USART1_RX_vect){
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	0b b6       	in	r0, 0x3b	; 59
 1b8:	0f 92       	push	r0
 1ba:	2f 93       	push	r18
 1bc:	3f 93       	push	r19
 1be:	4f 93       	push	r20
 1c0:	5f 93       	push	r21
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
 1c6:	af 93       	push	r26
 1c8:	bf 93       	push	r27
 1ca:	ef 93       	push	r30
 1cc:	ff 93       	push	r31
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	1f 92       	push	r1
 1d4:	1f 92       	push	r1
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
	uint16_t volatile i;
	cli();
 1da:	f8 94       	cli
	rxn = 0;
 1dc:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <rxn>
	for (i = 0; i < 500; i++){
 1e0:	1a 82       	std	Y+2, r1	; 0x02
 1e2:	19 82       	std	Y+1, r1	; 0x01
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
 1e6:	9a 81       	ldd	r25, Y+2	; 0x02
 1e8:	84 3f       	cpi	r24, 0xF4	; 244
 1ea:	91 40       	sbci	r25, 0x01	; 1
 1ec:	08 f5       	brcc	.+66     	; 0x230 <__vector_36+0x84>
		if (UCSR1A & (1<< RXC1)){
 1ee:	a8 ec       	ldi	r26, 0xC8	; 200
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
			rx[rxn++] = UDR1;
 1f2:	2e ec       	ldi	r18, 0xCE	; 206
 1f4:	30 e0       	ldi	r19, 0x00	; 0
ISR(USART1_RX_vect){
	uint16_t volatile i;
	cli();
	rxn = 0;
	for (i = 0; i < 500; i++){
		if (UCSR1A & (1<< RXC1)){
 1f6:	8c 91       	ld	r24, X
 1f8:	88 23       	and	r24, r24
 1fa:	84 f4       	brge	.+32     	; 0x21c <__vector_36+0x70>
			rx[rxn++] = UDR1;
 1fc:	e0 91 03 04 	lds	r30, 0x0403	; 0x800403 <rxn>
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	8e 0f       	add	r24, r30
 204:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <rxn>
 208:	4e 2f       	mov	r20, r30
 20a:	50 e0       	ldi	r21, 0x00	; 0
 20c:	f9 01       	movw	r30, r18
 20e:	80 81       	ld	r24, Z
 210:	fa 01       	movw	r30, r20
 212:	ed 5f       	subi	r30, 0xFD	; 253
 214:	fc 4f       	sbci	r31, 0xFC	; 252
 216:	80 83       	st	Z, r24
			i = 0;
 218:	1a 82       	std	Y+2, r1	; 0x02
 21a:	19 82       	std	Y+1, r1	; 0x01

ISR(USART1_RX_vect){
	uint16_t volatile i;
	cli();
	rxn = 0;
	for (i = 0; i < 500; i++){
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	9a 81       	ldd	r25, Y+2	; 0x02
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	9a 83       	std	Y+2, r25	; 0x02
 224:	89 83       	std	Y+1, r24	; 0x01
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	9a 81       	ldd	r25, Y+2	; 0x02
 22a:	84 3f       	cpi	r24, 0xF4	; 244
 22c:	91 40       	sbci	r25, 0x01	; 1
 22e:	18 f3       	brcs	.-58     	; 0x1f6 <__vector_36+0x4a>
		if (UCSR1A & (1<< RXC1)){
			rx[rxn++] = UDR1;
			i = 0;
		}
	} 
	rxFlag=1; // notify main of receipt of data.
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <rxFlag>
}
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	bf 91       	pop	r27
 244:	af 91       	pop	r26
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	5f 91       	pop	r21
 24c:	4f 91       	pop	r20
 24e:	3f 91       	pop	r19
 250:	2f 91       	pop	r18
 252:	0f 90       	pop	r0
 254:	0b be       	out	0x3b, r0	; 59
 256:	0f 90       	pop	r0
 258:	0f be       	out	0x3f, r0	; 63
 25a:	0f 90       	pop	r0
 25c:	1f 90       	pop	r1
 25e:	18 95       	reti

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
