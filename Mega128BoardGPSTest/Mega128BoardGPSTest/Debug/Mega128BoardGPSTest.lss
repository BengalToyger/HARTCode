
Mega128BoardGPSTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00001c72  00001d06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010f  00800162  00800162  00001d68  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001dc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00001e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ff9  00000000  00000000  00001f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dc7  00000000  00000000  00003f09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da5  00000000  00000000  00004cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000440  00000000  00000000  00005a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000772  00000000  00000000  00005eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001122  00000000  00000000  0000662a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000774c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	63 c0       	rjmp	.+198    	; 0xc8 <__ctors_end>
       2:	00 00       	nop
       4:	7f c0       	rjmp	.+254    	; 0x104 <__bad_interrupt>
       6:	00 00       	nop
       8:	7d c0       	rjmp	.+250    	; 0x104 <__bad_interrupt>
       a:	00 00       	nop
       c:	7b c0       	rjmp	.+246    	; 0x104 <__bad_interrupt>
       e:	00 00       	nop
      10:	79 c0       	rjmp	.+242    	; 0x104 <__bad_interrupt>
      12:	00 00       	nop
      14:	77 c0       	rjmp	.+238    	; 0x104 <__bad_interrupt>
      16:	00 00       	nop
      18:	75 c0       	rjmp	.+234    	; 0x104 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	73 c0       	rjmp	.+230    	; 0x104 <__bad_interrupt>
      1e:	00 00       	nop
      20:	71 c0       	rjmp	.+226    	; 0x104 <__bad_interrupt>
      22:	00 00       	nop
      24:	6f c0       	rjmp	.+222    	; 0x104 <__bad_interrupt>
      26:	00 00       	nop
      28:	6d c0       	rjmp	.+218    	; 0x104 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6b c0       	rjmp	.+214    	; 0x104 <__bad_interrupt>
      2e:	00 00       	nop
      30:	69 c0       	rjmp	.+210    	; 0x104 <__bad_interrupt>
      32:	00 00       	nop
      34:	67 c0       	rjmp	.+206    	; 0x104 <__bad_interrupt>
      36:	00 00       	nop
      38:	65 c0       	rjmp	.+202    	; 0x104 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	63 c0       	rjmp	.+198    	; 0x104 <__bad_interrupt>
      3e:	00 00       	nop
      40:	61 c0       	rjmp	.+194    	; 0x104 <__bad_interrupt>
      42:	00 00       	nop
      44:	5f c0       	rjmp	.+190    	; 0x104 <__bad_interrupt>
      46:	00 00       	nop
      48:	73 c0       	rjmp	.+230    	; 0x130 <__vector_18>
      4a:	00 00       	nop
      4c:	5b c0       	rjmp	.+182    	; 0x104 <__bad_interrupt>
      4e:	00 00       	nop
      50:	59 c0       	rjmp	.+178    	; 0x104 <__bad_interrupt>
      52:	00 00       	nop
      54:	57 c0       	rjmp	.+174    	; 0x104 <__bad_interrupt>
      56:	00 00       	nop
      58:	55 c0       	rjmp	.+170    	; 0x104 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	53 c0       	rjmp	.+166    	; 0x104 <__bad_interrupt>
      5e:	00 00       	nop
      60:	51 c0       	rjmp	.+162    	; 0x104 <__bad_interrupt>
      62:	00 00       	nop
      64:	4f c0       	rjmp	.+158    	; 0x104 <__bad_interrupt>
      66:	00 00       	nop
      68:	4d c0       	rjmp	.+154    	; 0x104 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4b c0       	rjmp	.+150    	; 0x104 <__bad_interrupt>
      6e:	00 00       	nop
      70:	49 c0       	rjmp	.+146    	; 0x104 <__bad_interrupt>
      72:	00 00       	nop
      74:	47 c0       	rjmp	.+142    	; 0x104 <__bad_interrupt>
      76:	00 00       	nop
      78:	45 c0       	rjmp	.+138    	; 0x104 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	43 c0       	rjmp	.+134    	; 0x104 <__bad_interrupt>
      7e:	00 00       	nop
      80:	41 c0       	rjmp	.+130    	; 0x104 <__bad_interrupt>
      82:	00 00       	nop
      84:	3f c0       	rjmp	.+126    	; 0x104 <__bad_interrupt>
      86:	00 00       	nop
      88:	3d c0       	rjmp	.+122    	; 0x104 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	4e 41       	sbci	r20, 0x1E	; 30
      8e:	4e 49       	Address 0x0000008e is out of bounds.
.word	0xffff	; ????

0000008f <pstr_inity>:
      8f:	49 4e 49 54 59                                      INITY

00000094 <pstr_inf>:
      94:	49 4e 46                                            INF

00000097 <pwr_m10>:
      97:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      a7:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000af <pwr_p10>:
      af:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      bf:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d0 e1       	ldi	r29, 0x10	; 16
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e2 e7       	ldi	r30, 0x72	; 114
      dc:	fc e1       	ldi	r31, 0x1C	; 28
      de:	00 e0       	ldi	r16, 0x00	; 0
      e0:	0b bf       	out	0x3b, r16	; 59
      e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x14>
      e4:	07 90       	elpm	r0, Z+
      e6:	0d 92       	st	X+, r0
      e8:	a2 36       	cpi	r26, 0x62	; 98
      ea:	b1 07       	cpc	r27, r17
      ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0x10>

000000ee <__do_clear_bss>:
      ee:	22 e0       	ldi	r18, 0x02	; 2
      f0:	a2 e6       	ldi	r26, 0x62	; 98
      f2:	b1 e0       	ldi	r27, 0x01	; 1
      f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
      f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
      f8:	a1 37       	cpi	r26, 0x71	; 113
      fa:	b2 07       	cpc	r27, r18
      fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
      fe:	16 d0       	rcall	.+44     	; 0x12c <main>
     100:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <_exit>

00000104 <__bad_interrupt>:
     104:	7d cf       	rjmp	.-262    	; 0x0 <__vectors>

00000106 <time>:
     106:	fc 01       	movw	r30, r24
     108:	0f b6       	in	r0, 0x3f	; 63
     10a:	f8 94       	cli
     10c:	60 91 6b 02 	lds	r22, 0x026B	; 0x80026b <__system_time>
     110:	70 91 6c 02 	lds	r23, 0x026C	; 0x80026c <__system_time+0x1>
     114:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <__system_time+0x2>
     118:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <__system_time+0x3>
     11c:	0f be       	out	0x3f, r0	; 63
     11e:	30 97       	sbiw	r30, 0x00	; 0
     120:	21 f0       	breq	.+8      	; 0x12a <time+0x24>
     122:	60 83       	st	Z, r22
     124:	71 83       	std	Z+1, r23	; 0x01
     126:	82 83       	std	Z+2, r24	; 0x02
     128:	93 83       	std	Z+3, r25	; 0x03
     12a:	08 95       	ret

0000012c <main>:


int main(void)
{
	#ifdef DOUNITTEST
	beginUnitTest();
     12c:	8f d4       	rcall	.+2334   	; 0xa4c <beginUnitTest>
	#endif

	while(1){};
     12e:	ff cf       	rjmp	.-2      	; 0x12e <main+0x2>

00000130 <__vector_18>:
	} else if (!checkPUBX(packet)){
		return 0;	
	} else {
		return 1;
	}
}
     130:	1f 92       	push	r1
     132:	0f 92       	push	r0
     134:	0f b6       	in	r0, 0x3f	; 63
     136:	0f 92       	push	r0
     138:	11 24       	eor	r1, r1
     13a:	0b b6       	in	r0, 0x3b	; 59
     13c:	0f 92       	push	r0
     13e:	2f 93       	push	r18
     140:	3f 93       	push	r19
     142:	4f 93       	push	r20
     144:	5f 93       	push	r21
     146:	6f 93       	push	r22
     148:	7f 93       	push	r23
     14a:	8f 93       	push	r24
     14c:	9f 93       	push	r25
     14e:	af 93       	push	r26
     150:	bf 93       	push	r27
     152:	ef 93       	push	r30
     154:	ff 93       	push	r31
     156:	9c b1       	in	r25, 0x0c	; 12
     158:	c3 98       	cbi	0x18, 3	; 24
     15a:	28 b3       	in	r18, 0x18	; 24
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	82 27       	eor	r24, r18
     160:	88 bb       	out	0x18, r24	; 24
     162:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <msgIndex>
     166:	8e 3f       	cpi	r24, 0xFE	; 254
     168:	38 f0       	brcs	.+14     	; 0x178 <__vector_18+0x48>
     16a:	c2 98       	cbi	0x18, 2	; 24
     16c:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <msgIndex>
     170:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <msgBeginFlag>
     174:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <msgEndFlag>
     178:	94 32       	cpi	r25, 0x24	; 36
     17a:	d9 f4       	brne	.+54     	; 0x1b2 <__vector_18+0x82>
     17c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <msgEndFlag>
     180:	81 11       	cpse	r24, r1
     182:	7d c0       	rjmp	.+250    	; 0x27e <__vector_18+0x14e>
     184:	c1 9a       	sbi	0x18, 1	; 24
     186:	c3 98       	cbi	0x18, 3	; 24
     188:	c2 98       	cbi	0x18, 2	; 24
     18a:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <commaCount>
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <msgBeginFlag>
     194:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <msgIndex>
     198:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <msgIndex>
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	e9 59       	subi	r30, 0x99	; 153
     1a0:	fe 4f       	sbci	r31, 0xFE	; 254
     1a2:	84 e2       	ldi	r24, 0x24	; 36
     1a4:	80 83       	st	Z, r24
     1a6:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <msgIndex>
     1aa:	8f 5f       	subi	r24, 0xFF	; 255
     1ac:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <msgIndex>
     1b0:	7e c0       	rjmp	.+252    	; 0x2ae <__vector_18+0x17e>
     1b2:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <msgBeginFlag>
     1b6:	88 23       	and	r24, r24
     1b8:	c9 f0       	breq	.+50     	; 0x1ec <__vector_18+0xbc>
     1ba:	9a 32       	cpi	r25, 0x2A	; 42
     1bc:	09 f0       	breq	.+2      	; 0x1c0 <__vector_18+0x90>
     1be:	6f c0       	rjmp	.+222    	; 0x29e <__vector_18+0x16e>
     1c0:	63 c0       	rjmp	.+198    	; 0x288 <__vector_18+0x158>
     1c2:	c2 9a       	sbi	0x18, 2	; 24
     1c4:	c1 98       	cbi	0x18, 1	; 24
     1c6:	9c 32       	cpi	r25, 0x2C	; 44
     1c8:	29 f4       	brne	.+10     	; 0x1d4 <__vector_18+0xa4>
     1ca:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <commaCount>
     1ce:	8f 5f       	subi	r24, 0xFF	; 255
     1d0:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <commaCount>
     1d4:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <msgIndex>
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	e9 59       	subi	r30, 0x99	; 153
     1dc:	fe 4f       	sbci	r31, 0xFE	; 254
     1de:	90 83       	st	Z, r25
     1e0:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <msgIndex>
     1e4:	8f 5f       	subi	r24, 0xFF	; 255
     1e6:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <msgIndex>
     1ea:	61 c0       	rjmp	.+194    	; 0x2ae <__vector_18+0x17e>
     1ec:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <msgBeginFlag>
     1f0:	88 23       	and	r24, r24
     1f2:	09 f4       	brne	.+2      	; 0x1f6 <__vector_18+0xc6>
     1f4:	5c c0       	rjmp	.+184    	; 0x2ae <__vector_18+0x17e>
     1f6:	9a 32       	cpi	r25, 0x2A	; 42
     1f8:	09 f0       	breq	.+2      	; 0x1fc <__vector_18+0xcc>
     1fa:	59 c0       	rjmp	.+178    	; 0x2ae <__vector_18+0x17e>
     1fc:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <msgEndFlag>
     200:	81 11       	cpse	r24, r1
     202:	55 c0       	rjmp	.+170    	; 0x2ae <__vector_18+0x17e>
     204:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <msgIndex>
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	e9 59       	subi	r30, 0x99	; 153
     20c:	fe 4f       	sbci	r31, 0xFE	; 254
     20e:	8a e2       	ldi	r24, 0x2A	; 42
     210:	80 83       	st	Z, r24
     212:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <msgIndex>
     216:	8f 5f       	subi	r24, 0xFF	; 255
     218:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <msgIndex>
     21c:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <msgIndex>
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	e9 59       	subi	r30, 0x99	; 153
     224:	fe 4f       	sbci	r31, 0xFE	; 254
     226:	10 82       	st	Z, r1
     228:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <msgIndex>
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <msgEndFlag>
     232:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <msgBeginFlag>
     236:	c3 9a       	sbi	0x18, 3	; 24
     238:	c1 98       	cbi	0x18, 1	; 24
     23a:	c2 98       	cbi	0x18, 2	; 24
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	8a e0       	ldi	r24, 0x0A	; 10
     240:	77 d4       	rcall	.+2286   	; 0xb30 <USARTTX>
     242:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
     246:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
     24a:	8e 3f       	cpi	r24, 0xFE	; 254
     24c:	88 f4       	brcc	.+34     	; 0x270 <__vector_18+0x140>
     24e:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <__data_end>
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	e9 59       	subi	r30, 0x99	; 153
     256:	fe 4f       	sbci	r31, 0xFE	; 254
     258:	80 81       	ld	r24, Z
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	69 d4       	rcall	.+2258   	; 0xb30 <USARTTX>
     25e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
     262:	8f 5f       	subi	r24, 0xFF	; 255
     264:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
     268:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
     26c:	8e 3f       	cpi	r24, 0xFE	; 254
     26e:	78 f3       	brcs	.-34     	; 0x24e <__vector_18+0x11e>
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	8a e0       	ldi	r24, 0x0A	; 10
     274:	5d d4       	rcall	.+2234   	; 0xb30 <USARTTX>
     276:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
     27a:	f8 94       	cli
     27c:	18 c0       	rjmp	.+48     	; 0x2ae <__vector_18+0x17e>
     27e:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <msgBeginFlag>
     282:	81 11       	cpse	r24, r1
     284:	09 c0       	rjmp	.+18     	; 0x298 <__vector_18+0x168>
     286:	11 c0       	rjmp	.+34     	; 0x2aa <__vector_18+0x17a>
     288:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <msgBeginFlag>
     28c:	81 11       	cpse	r24, r1
     28e:	b6 cf       	rjmp	.-148    	; 0x1fc <__vector_18+0xcc>
     290:	0e c0       	rjmp	.+28     	; 0x2ae <__vector_18+0x17e>
     292:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <msgBeginFlag>
     296:	0b c0       	rjmp	.+22     	; 0x2ae <__vector_18+0x17e>
     298:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <msgEndFlag>
     29c:	fa cf       	rjmp	.-12     	; 0x292 <__vector_18+0x162>
     29e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <msgEndFlag>
     2a2:	88 23       	and	r24, r24
     2a4:	09 f4       	brne	.+2      	; 0x2a8 <__vector_18+0x178>
     2a6:	8d cf       	rjmp	.-230    	; 0x1c2 <__vector_18+0x92>
     2a8:	f4 cf       	rjmp	.-24     	; 0x292 <__vector_18+0x162>
     2aa:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <msgBeginFlag>
     2ae:	ff 91       	pop	r31
     2b0:	ef 91       	pop	r30
     2b2:	bf 91       	pop	r27
     2b4:	af 91       	pop	r26
     2b6:	9f 91       	pop	r25
     2b8:	8f 91       	pop	r24
     2ba:	7f 91       	pop	r23
     2bc:	6f 91       	pop	r22
     2be:	5f 91       	pop	r21
     2c0:	4f 91       	pop	r20
     2c2:	3f 91       	pop	r19
     2c4:	2f 91       	pop	r18
     2c6:	0f 90       	pop	r0
     2c8:	0b be       	out	0x3b, r0	; 59
     2ca:	0f 90       	pop	r0
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	0f 90       	pop	r0
     2d0:	1f 90       	pop	r1
     2d2:	18 95       	reti

000002d4 <SendGPS>:
     2d4:	ef 92       	push	r14
     2d6:	ff 92       	push	r15
     2d8:	1f 93       	push	r17
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	1f 92       	push	r1
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	7c 01       	movw	r14, r24
     2e6:	16 2f       	mov	r17, r22
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	84 e2       	ldi	r24, 0x24	; 36
     2ec:	21 d4       	rcall	.+2114   	; 0xb30 <USARTTX>
     2ee:	19 82       	std	Y+1, r1	; 0x01
     2f0:	89 81       	ldd	r24, Y+1	; 0x01
     2f2:	81 17       	cp	r24, r17
     2f4:	68 f4       	brcc	.+26     	; 0x310 <SendGPS+0x3c>
     2f6:	99 81       	ldd	r25, Y+1	; 0x01
     2f8:	f7 01       	movw	r30, r14
     2fa:	e9 0f       	add	r30, r25
     2fc:	f1 1d       	adc	r31, r1
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	80 81       	ld	r24, Z
     302:	16 d4       	rcall	.+2092   	; 0xb30 <USARTTX>
     304:	99 81       	ldd	r25, Y+1	; 0x01
     306:	9f 5f       	subi	r25, 0xFF	; 255
     308:	99 83       	std	Y+1, r25	; 0x01
     30a:	99 81       	ldd	r25, Y+1	; 0x01
     30c:	91 17       	cp	r25, r17
     30e:	98 f3       	brcs	.-26     	; 0x2f6 <SendGPS+0x22>
     310:	60 e0       	ldi	r22, 0x00	; 0
     312:	8d e0       	ldi	r24, 0x0D	; 13
     314:	0d d4       	rcall	.+2074   	; 0xb30 <USARTTX>
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	8a e0       	ldi	r24, 0x0A	; 10
     31a:	0a d4       	rcall	.+2068   	; 0xb30 <USARTTX>
     31c:	0f 90       	pop	r0
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	1f 91       	pop	r17
     324:	ff 90       	pop	r15
     326:	ef 90       	pop	r14
     328:	08 95       	ret

0000032a <CheckSum>:

// Calculates and writes the checksum for an outgoing packet
void CheckSum(char* packet){
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	00 d0       	rcall	.+0      	; 0x334 <CheckSum+0xa>
     334:	00 d0       	rcall	.+0      	; 0x336 <CheckSum+0xc>
     336:	1f 92       	push	r1
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	8c 01       	movw	r16, r24
	uint8_t volatile i = 0;
     33e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t volatile checksum;
	char hexchar[3];
	while(!(packet[i] == '*')){
     340:	89 81       	ldd	r24, Y+1	; 0x01
     342:	f8 01       	movw	r30, r16
     344:	e8 0f       	add	r30, r24
     346:	f1 1d       	adc	r31, r1
     348:	80 81       	ld	r24, Z
     34a:	8a 32       	cpi	r24, 0x2A	; 42
     34c:	91 f0       	breq	.+36     	; 0x372 <CheckSum+0x48>
		checksum ^= packet[i]; //XORs all the packet bytes together to get the checksum
     34e:	99 81       	ldd	r25, Y+1	; 0x01
     350:	8a 81       	ldd	r24, Y+2	; 0x02
     352:	f8 01       	movw	r30, r16
     354:	e9 0f       	add	r30, r25
     356:	f1 1d       	adc	r31, r1
     358:	90 81       	ld	r25, Z
     35a:	98 27       	eor	r25, r24
     35c:	9a 83       	std	Y+2, r25	; 0x02
		i++;
     35e:	99 81       	ldd	r25, Y+1	; 0x01
     360:	9f 5f       	subi	r25, 0xFF	; 255
     362:	99 83       	std	Y+1, r25	; 0x01
// Calculates and writes the checksum for an outgoing packet
void CheckSum(char* packet){
	uint8_t volatile i = 0;
	uint8_t volatile checksum;
	char hexchar[3];
	while(!(packet[i] == '*')){
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	f8 01       	movw	r30, r16
     368:	e8 0f       	add	r30, r24
     36a:	f1 1d       	adc	r31, r1
     36c:	80 81       	ld	r24, Z
     36e:	8a 32       	cpi	r24, 0x2A	; 42
     370:	71 f7       	brne	.-36     	; 0x34e <CheckSum+0x24>
		checksum ^= packet[i]; //XORs all the packet bytes together to get the checksum
		i++;
	}
	sprintf(hexchar, "%02X", checksum);
     372:	8a 81       	ldd	r24, Y+2	; 0x02
     374:	1f 92       	push	r1
     376:	8f 93       	push	r24
     378:	80 e3       	ldi	r24, 0x30	; 48
     37a:	91 e0       	ldi	r25, 0x01	; 1
     37c:	9f 93       	push	r25
     37e:	8f 93       	push	r24
     380:	ce 01       	movw	r24, r28
     382:	03 96       	adiw	r24, 0x03	; 3
     384:	9f 93       	push	r25
     386:	8f 93       	push	r24
     388:	e1 d7       	rcall	.+4034   	; 0x134c <sprintf>
	i++;
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	8f 5f       	subi	r24, 0xFF	; 255
     38e:	89 83       	std	Y+1, r24	; 0x01
	packet[i] = hexchar[0];
     390:	89 81       	ldd	r24, Y+1	; 0x01
     392:	f8 01       	movw	r30, r16
     394:	e8 0f       	add	r30, r24
     396:	f1 1d       	adc	r31, r1
     398:	8b 81       	ldd	r24, Y+3	; 0x03
     39a:	80 83       	st	Z, r24
	i++;
     39c:	89 81       	ldd	r24, Y+1	; 0x01
     39e:	8f 5f       	subi	r24, 0xFF	; 255
     3a0:	89 83       	std	Y+1, r24	; 0x01
	packet[i] = hexchar[1];
     3a2:	89 81       	ldd	r24, Y+1	; 0x01
     3a4:	f8 01       	movw	r30, r16
     3a6:	e8 0f       	add	r30, r24
     3a8:	f1 1d       	adc	r31, r1
     3aa:	8c 81       	ldd	r24, Y+4	; 0x04
     3ac:	80 83       	st	Z, r24
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
	return;
}
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	08 95       	ret

000003ce <PUBXCFGSetup>:
//	packet: The packet to be sent, consisting of the config message base. The message name gets modified.
//	msg: The particular identifier of the message to be turned off
// Returns:
//	Nothing

void PUBXCFGSetup(char* packet, char* msg){
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	00 d0       	rcall	.+0      	; 0x3d4 <PUBXCFGSetup+0x6>
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
     3d8:	ac 01       	movw	r20, r24
	uint8_t volatile i = MSGSTT; //Sets up the configure message to turn off all the messages we don't want.
     3da:	88 e0       	ldi	r24, 0x08	; 8
     3dc:	89 83       	std	Y+1, r24	; 0x01
	uint8_t volatile j = 0; //Takes the message name
     3de:	1a 82       	std	Y+2, r1	; 0x02
	for (i; i < MSGEND; i++){
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	8b 30       	cpi	r24, 0x0B	; 11
     3e6:	98 f4       	brcc	.+38     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		packet[i] = msg[j];
     3e8:	29 81       	ldd	r18, Y+1	; 0x01
     3ea:	9a 81       	ldd	r25, Y+2	; 0x02
     3ec:	fb 01       	movw	r30, r22
     3ee:	e9 0f       	add	r30, r25
     3f0:	f1 1d       	adc	r31, r1
     3f2:	90 81       	ld	r25, Z
     3f4:	fa 01       	movw	r30, r20
     3f6:	e2 0f       	add	r30, r18
     3f8:	f1 1d       	adc	r31, r1
     3fa:	90 83       	st	Z, r25
		j++;
     3fc:	9a 81       	ldd	r25, Y+2	; 0x02
     3fe:	9f 5f       	subi	r25, 0xFF	; 255
     400:	9a 83       	std	Y+2, r25	; 0x02
//	Nothing

void PUBXCFGSetup(char* packet, char* msg){
	uint8_t volatile i = MSGSTT; //Sets up the configure message to turn off all the messages we don't want.
	uint8_t volatile j = 0; //Takes the message name
	for (i; i < MSGEND; i++){
     402:	99 81       	ldd	r25, Y+1	; 0x01
     404:	9f 5f       	subi	r25, 0xFF	; 255
     406:	99 83       	std	Y+1, r25	; 0x01
     408:	99 81       	ldd	r25, Y+1	; 0x01
     40a:	9b 30       	cpi	r25, 0x0B	; 11
     40c:	68 f3       	brcs	.-38     	; 0x3e8 <PUBXCFGSetup+0x1a>
		packet[i] = msg[j];
		j++;
	}
	CheckSum(packet);
     40e:	ca 01       	movw	r24, r20
     410:	8c df       	rcall	.-232    	; 0x32a <CheckSum>
	return;
}
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	08 95       	ret

0000041c <InitGPS>:
		return;
	}
}

//Use RATE (PUBX,40)
uint16_t InitGPS(void){
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	6c 97       	sbiw	r28, 0x1c	; 28
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
	uint16_t volatile SetUBRR; //Turns off all the messages we don't want
	msgIndex = 0;
     430:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <msgIndex>
	msgBeginFlag = 0;
     434:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <msgBeginFlag>
	msgEndFlag = 0;
     438:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <msgEndFlag>
	char CFGMSG[CFGMSGSIZE] = PUBXNOCOMMCFGMSGBASE;
     43c:	8a e1       	ldi	r24, 0x1A	; 26
     43e:	ea e0       	ldi	r30, 0x0A	; 10
     440:	f1 e0       	ldi	r31, 0x01	; 1
     442:	de 01       	movw	r26, r28
     444:	13 96       	adiw	r26, 0x03	; 3
     446:	01 90       	ld	r0, Z+
     448:	0d 92       	st	X+, r0
     44a:	8a 95       	dec	r24
     44c:	e1 f7       	brne	.-8      	; 0x446 <InitGPS+0x2a>
	SetUBRR = InitUSART(GPSBAUD, GPSPORT);
     44e:	40 e0       	ldi	r20, 0x00	; 0
     450:	60 e8       	ldi	r22, 0x80	; 128
     452:	75 e2       	ldi	r23, 0x25	; 37
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	4b d3       	rcall	.+1686   	; 0xaf0 <InitUSART>
     45a:	9a 83       	std	Y+2, r25	; 0x02
     45c:	89 83       	std	Y+1, r24	; 0x01
	if (SetUBRR){
     45e:	89 81       	ldd	r24, Y+1	; 0x01
     460:	9a 81       	ldd	r25, Y+2	; 0x02
     462:	00 97       	sbiw	r24, 0x00	; 0
     464:	09 f4       	brne	.+2      	; 0x468 <InitGPS+0x4c>
     466:	5d c0       	rjmp	.+186    	; 0x522 <InitGPS+0x106>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     468:	2f ef       	ldi	r18, 0xFF	; 255
     46a:	87 ea       	ldi	r24, 0xA7	; 167
     46c:	91 e6       	ldi	r25, 0x61	; 97
     46e:	21 50       	subi	r18, 0x01	; 1
     470:	80 40       	sbci	r24, 0x00	; 0
     472:	90 40       	sbci	r25, 0x00	; 0
     474:	e1 f7       	brne	.-8      	; 0x46e <InitGPS+0x52>
     476:	00 c0       	rjmp	.+0      	; 0x478 <InitGPS+0x5c>
     478:	00 00       	nop
		_delay_ms(2000);
		PUBXCFGSetup(CFGMSG, "GLL");
     47a:	65 e3       	ldi	r22, 0x35	; 53
     47c:	71 e0       	ldi	r23, 0x01	; 1
     47e:	ce 01       	movw	r24, r28
     480:	03 96       	adiw	r24, 0x03	; 3
     482:	a5 df       	rcall	.-182    	; 0x3ce <PUBXCFGSetup>
		SendGPS(CFGMSG, CFGMSGSIZE);
     484:	6a e1       	ldi	r22, 0x1A	; 26
     486:	ce 01       	movw	r24, r28
     488:	03 96       	adiw	r24, 0x03	; 3
     48a:	24 df       	rcall	.-440    	; 0x2d4 <SendGPS>
     48c:	2f ef       	ldi	r18, 0xFF	; 255
     48e:	85 ea       	ldi	r24, 0xA5	; 165
     490:	9e e0       	ldi	r25, 0x0E	; 14
     492:	21 50       	subi	r18, 0x01	; 1
     494:	80 40       	sbci	r24, 0x00	; 0
     496:	90 40       	sbci	r25, 0x00	; 0
     498:	e1 f7       	brne	.-8      	; 0x492 <InitGPS+0x76>
     49a:	00 c0       	rjmp	.+0      	; 0x49c <InitGPS+0x80>
     49c:	00 00       	nop
		_delay_ms(300);
		PUBXCFGSetup(CFGMSG, "GSA");
     49e:	69 e3       	ldi	r22, 0x39	; 57
     4a0:	71 e0       	ldi	r23, 0x01	; 1
     4a2:	ce 01       	movw	r24, r28
     4a4:	03 96       	adiw	r24, 0x03	; 3
     4a6:	93 df       	rcall	.-218    	; 0x3ce <PUBXCFGSetup>
		SendGPS(CFGMSG, CFGMSGSIZE);
     4a8:	6a e1       	ldi	r22, 0x1A	; 26
     4aa:	ce 01       	movw	r24, r28
     4ac:	03 96       	adiw	r24, 0x03	; 3
     4ae:	12 df       	rcall	.-476    	; 0x2d4 <SendGPS>
     4b0:	2f ef       	ldi	r18, 0xFF	; 255
     4b2:	85 ea       	ldi	r24, 0xA5	; 165
     4b4:	9e e0       	ldi	r25, 0x0E	; 14
     4b6:	21 50       	subi	r18, 0x01	; 1
     4b8:	80 40       	sbci	r24, 0x00	; 0
     4ba:	90 40       	sbci	r25, 0x00	; 0
     4bc:	e1 f7       	brne	.-8      	; 0x4b6 <InitGPS+0x9a>
     4be:	00 c0       	rjmp	.+0      	; 0x4c0 <InitGPS+0xa4>
     4c0:	00 00       	nop
		_delay_ms(300);
		PUBXCFGSetup(CFGMSG, "GSV");
     4c2:	6d e3       	ldi	r22, 0x3D	; 61
     4c4:	71 e0       	ldi	r23, 0x01	; 1
     4c6:	ce 01       	movw	r24, r28
     4c8:	03 96       	adiw	r24, 0x03	; 3
     4ca:	81 df       	rcall	.-254    	; 0x3ce <PUBXCFGSetup>
		SendGPS(CFGMSG, CFGMSGSIZE);
     4cc:	6a e1       	ldi	r22, 0x1A	; 26
     4ce:	ce 01       	movw	r24, r28
     4d0:	03 96       	adiw	r24, 0x03	; 3
     4d2:	00 df       	rcall	.-512    	; 0x2d4 <SendGPS>
     4d4:	2f ef       	ldi	r18, 0xFF	; 255
     4d6:	85 ea       	ldi	r24, 0xA5	; 165
     4d8:	9e e0       	ldi	r25, 0x0E	; 14
     4da:	21 50       	subi	r18, 0x01	; 1
     4dc:	80 40       	sbci	r24, 0x00	; 0
     4de:	90 40       	sbci	r25, 0x00	; 0
     4e0:	e1 f7       	brne	.-8      	; 0x4da <InitGPS+0xbe>
     4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <InitGPS+0xc8>
     4e4:	00 00       	nop
		_delay_ms(300);
		PUBXCFGSetup(CFGMSG, "RMC");
     4e6:	61 e4       	ldi	r22, 0x41	; 65
     4e8:	71 e0       	ldi	r23, 0x01	; 1
     4ea:	ce 01       	movw	r24, r28
     4ec:	03 96       	adiw	r24, 0x03	; 3
     4ee:	6f df       	rcall	.-290    	; 0x3ce <PUBXCFGSetup>
		SendGPS(CFGMSG, CFGMSGSIZE);
     4f0:	6a e1       	ldi	r22, 0x1A	; 26
     4f2:	ce 01       	movw	r24, r28
     4f4:	03 96       	adiw	r24, 0x03	; 3
     4f6:	ee de       	rcall	.-548    	; 0x2d4 <SendGPS>
     4f8:	2f ef       	ldi	r18, 0xFF	; 255
     4fa:	85 ea       	ldi	r24, 0xA5	; 165
     4fc:	9e e0       	ldi	r25, 0x0E	; 14
     4fe:	21 50       	subi	r18, 0x01	; 1
     500:	80 40       	sbci	r24, 0x00	; 0
     502:	90 40       	sbci	r25, 0x00	; 0
     504:	e1 f7       	brne	.-8      	; 0x4fe <InitGPS+0xe2>
     506:	00 c0       	rjmp	.+0      	; 0x508 <InitGPS+0xec>
     508:	00 00       	nop
		_delay_ms(300);
		PUBXCFGSetup(CFGMSG, "VTG");
     50a:	65 e4       	ldi	r22, 0x45	; 69
     50c:	71 e0       	ldi	r23, 0x01	; 1
     50e:	ce 01       	movw	r24, r28
     510:	03 96       	adiw	r24, 0x03	; 3
     512:	5d df       	rcall	.-326    	; 0x3ce <PUBXCFGSetup>
		SendGPS(CFGMSG, CFGMSGSIZE);
     514:	6a e1       	ldi	r22, 0x1A	; 26
     516:	ce 01       	movw	r24, r28
     518:	03 96       	adiw	r24, 0x03	; 3
     51a:	dc de       	rcall	.-584    	; 0x2d4 <SendGPS>
		sei();
     51c:	78 94       	sei
		return SetUBRR;
     51e:	89 81       	ldd	r24, Y+1	; 0x01
     520:	9a 81       	ldd	r25, Y+2	; 0x02
	} else {
		return 0;
	}
}
     522:	6c 96       	adiw	r28, 0x1c	; 28
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	f8 94       	cli
     528:	de bf       	out	0x3e, r29	; 62
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	cd bf       	out	0x3d, r28	; 61
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	08 95       	ret

00000534 <parseDegreesMinutes>:
}

// Parses a string in the format: DDMM.MMMMMMM, where DD is degrees, and MM is minutes.
// degLength is the length of the degrees part. For example, degLength of 3 means
// the string will be DDDMM.MMMMMMM.
float parseDegreesMinutes(char *s, int degLength) {
     534:	af 92       	push	r10
     536:	bf 92       	push	r11
     538:	cf 92       	push	r12
     53a:	df 92       	push	r13
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	cd b7       	in	r28, 0x3d	; 61
     54a:	de b7       	in	r29, 0x3e	; 62
     54c:	28 97       	sbiw	r28, 0x08	; 8
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	de bf       	out	0x3e, r29	; 62
     554:	0f be       	out	0x3f, r0	; 63
     556:	cd bf       	out	0x3d, r28	; 61
     558:	6c 01       	movw	r12, r24
     55a:	8b 01       	movw	r16, r22
	degrees = atof(degreesString);
	// Convert the minutes
	minutes = atof(s + degLength);
	// Convert the minutes to decimal degrees
	return degrees + (minutes / 60);
}
     55c:	ad b6       	in	r10, 0x3d	; 61
     55e:	be b6       	in	r11, 0x3e	; 62

// Parses a string in the format: DDMM.MMMMMMM, where DD is degrees, and MM is minutes.
// degLength is the length of the degrees part. For example, degLength of 3 means
// the string will be DDDMM.MMMMMMM.
float parseDegreesMinutes(char *s, int degLength) {
	char degreesString[degLength + 1];
     560:	cb 01       	movw	r24, r22
     562:	01 96       	adiw	r24, 0x01	; 1
     564:	2d b7       	in	r18, 0x3d	; 61
     566:	3e b7       	in	r19, 0x3e	; 62
     568:	28 1b       	sub	r18, r24
     56a:	39 0b       	sbc	r19, r25
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	3e bf       	out	0x3e, r19	; 62
     572:	0f be       	out	0x3f, r0	; 63
     574:	2d bf       	out	0x3d, r18	; 61
     576:	8d b7       	in	r24, 0x3d	; 61
     578:	9e b7       	in	r25, 0x3e	; 62
     57a:	01 96       	adiw	r24, 0x01	; 1
     57c:	7c 01       	movw	r14, r24
	float volatile degrees;
	float volatile minutes;
	// Copy the degrees part into degreesString and convert it to a float
	strncpy(degreesString, s, degLength);
     57e:	ab 01       	movw	r20, r22
     580:	b6 01       	movw	r22, r12
     582:	bd d6       	rcall	.+3450   	; 0x12fe <strncpy>
	degreesString[degLength] = '\0';
     584:	f7 01       	movw	r30, r14
     586:	e0 0f       	add	r30, r16
     588:	f1 1f       	adc	r31, r17
     58a:	10 82       	st	Z, r1
	degrees = atof(degreesString);
     58c:	c7 01       	movw	r24, r14
     58e:	95 d6       	rcall	.+3370   	; 0x12ba <atof>
     590:	69 83       	std	Y+1, r22	; 0x01
     592:	7a 83       	std	Y+2, r23	; 0x02
     594:	8b 83       	std	Y+3, r24	; 0x03
     596:	9c 83       	std	Y+4, r25	; 0x04
	// Convert the minutes
	minutes = atof(s + degLength);
     598:	c6 01       	movw	r24, r12
     59a:	80 0f       	add	r24, r16
     59c:	91 1f       	adc	r25, r17
     59e:	8d d6       	rcall	.+3354   	; 0x12ba <atof>
     5a0:	6d 83       	std	Y+5, r22	; 0x05
     5a2:	7e 83       	std	Y+6, r23	; 0x06
     5a4:	8f 83       	std	Y+7, r24	; 0x07
     5a6:	98 87       	std	Y+8, r25	; 0x08
	// Convert the minutes to decimal degrees
	return degrees + (minutes / 60);
     5a8:	6d 81       	ldd	r22, Y+5	; 0x05
     5aa:	7e 81       	ldd	r23, Y+6	; 0x06
     5ac:	8f 81       	ldd	r24, Y+7	; 0x07
     5ae:	98 85       	ldd	r25, Y+8	; 0x08
     5b0:	c9 80       	ldd	r12, Y+1	; 0x01
     5b2:	da 80       	ldd	r13, Y+2	; 0x02
     5b4:	eb 80       	ldd	r14, Y+3	; 0x03
     5b6:	fc 80       	ldd	r15, Y+4	; 0x04
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	40 e7       	ldi	r20, 0x70	; 112
     5be:	52 e4       	ldi	r21, 0x42	; 66
     5c0:	2a d3       	rcall	.+1620   	; 0xc16 <__divsf3>
     5c2:	a7 01       	movw	r20, r14
     5c4:	96 01       	movw	r18, r12
     5c6:	c3 d2       	rcall	.+1414   	; 0xb4e <__addsf3>
}
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	be be       	out	0x3e, r11	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	ad be       	out	0x3d, r10	; 61
     5d2:	28 96       	adiw	r28, 0x08	; 8
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	ff 90       	pop	r15
     5e8:	ef 90       	pop	r14
     5ea:	df 90       	pop	r13
     5ec:	cf 90       	pop	r12
     5ee:	bf 90       	pop	r11
     5f0:	af 90       	pop	r10
     5f2:	08 95       	ret

000005f4 <parseGGA>:
// Parameters:
//		packet:		the GGA message string
//		GPSdata:	the struct that accepts the final calculated data
// Returns:
//		Nothing
void parseGGA(char *packet, struct GPSStruct *GPSdata) {
     5f4:	cf 92       	push	r12
     5f6:	df 92       	push	r13
     5f8:	ef 92       	push	r14
     5fa:	ff 92       	push	r15
     5fc:	0f 93       	push	r16
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	00 d0       	rcall	.+0      	; 0x606 <parseGGA+0x12>
     606:	1f 92       	push	r1
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	7b 01       	movw	r14, r22
	char *packetCopy = strdup(packet);
     60e:	58 d6       	rcall	.+3248   	; 0x12c0 <strdup>
     610:	8c 01       	movw	r16, r24
     612:	9a 83       	std	Y+2, r25	; 0x02
     614:	89 83       	std	Y+1, r24	; 0x01
	uint8_t volatile i = 0;
     616:	1b 82       	std	Y+3, r1	; 0x03
	// a copy of the original location so we can free() it later.
	char *originalPacketCopy = packetCopy; 
	// The string token that we are currently looking at
	char *msgPart = packetCopy;
	#ifdef UNITTEST
	while (packetCopy[i] != '\0'){
     618:	9c 01       	movw	r18, r24
     61a:	8b 81       	ldd	r24, Y+3	; 0x03
     61c:	f8 01       	movw	r30, r16
     61e:	e8 0f       	add	r30, r24
     620:	f1 1d       	adc	r31, r1
     622:	80 81       	ld	r24, Z
     624:	88 23       	and	r24, r24
     626:	99 f0       	breq	.+38     	; 0x64e <parseGGA+0x5a>
		USARTTX(packetCopy[i], GPSPORT);
     628:	8b 81       	ldd	r24, Y+3	; 0x03
     62a:	f9 01       	movw	r30, r18
     62c:	e8 0f       	add	r30, r24
     62e:	f1 1d       	adc	r31, r1
     630:	60 e0       	ldi	r22, 0x00	; 0
     632:	80 81       	ld	r24, Z
     634:	7d d2       	rcall	.+1274   	; 0xb30 <USARTTX>
		i++;	
     636:	8b 81       	ldd	r24, Y+3	; 0x03
     638:	8f 5f       	subi	r24, 0xFF	; 255
     63a:	8b 83       	std	Y+3, r24	; 0x03
	// a copy of the original location so we can free() it later.
	char *originalPacketCopy = packetCopy; 
	// The string token that we are currently looking at
	char *msgPart = packetCopy;
	#ifdef UNITTEST
	while (packetCopy[i] != '\0'){
     63c:	29 81       	ldd	r18, Y+1	; 0x01
     63e:	3a 81       	ldd	r19, Y+2	; 0x02
     640:	8b 81       	ldd	r24, Y+3	; 0x03
     642:	f9 01       	movw	r30, r18
     644:	e8 0f       	add	r30, r24
     646:	f1 1d       	adc	r31, r1
     648:	80 81       	ld	r24, Z
     64a:	81 11       	cpse	r24, r1
     64c:	ed cf       	rjmp	.-38     	; 0x628 <parseGGA+0x34>
		USARTTX(packetCopy[i], GPSPORT);
		i++;	
	}
	USARTTX(packetCopy[i], GPSPORT);
     64e:	8b 81       	ldd	r24, Y+3	; 0x03
     650:	f9 01       	movw	r30, r18
     652:	e8 0f       	add	r30, r24
     654:	f1 1d       	adc	r31, r1
     656:	60 e0       	ldi	r22, 0x00	; 0
     658:	80 81       	ld	r24, Z
     65a:	6a d2       	rcall	.+1236   	; 0xb30 <USARTTX>
	USARTTX('\n', GPSPORT);
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	8a e0       	ldi	r24, 0x0A	; 10
     660:	67 d2       	rcall	.+1230   	; 0xb30 <USARTTX>
	i = 0;
     662:	1b 82       	std	Y+3, r1	; 0x03
	#endif
	
	// Skip the xxGGA and time fields
	for(i = 0; i < 2; i++) {
     664:	1b 82       	std	Y+3, r1	; 0x03
     666:	8b 81       	ldd	r24, Y+3	; 0x03
     668:	82 30       	cpi	r24, 0x02	; 2
     66a:	58 f4       	brcc	.+22     	; 0x682 <parseGGA+0x8e>
		strsep(&packetCopy, ",");
     66c:	69 e4       	ldi	r22, 0x49	; 73
     66e:	71 e0       	ldi	r23, 0x01	; 1
     670:	ce 01       	movw	r24, r28
     672:	01 96       	adiw	r24, 0x01	; 1
     674:	53 d6       	rcall	.+3238   	; 0x131c <strsep>
	USARTTX('\n', GPSPORT);
	i = 0;
	#endif
	
	// Skip the xxGGA and time fields
	for(i = 0; i < 2; i++) {
     676:	8b 81       	ldd	r24, Y+3	; 0x03
     678:	8f 5f       	subi	r24, 0xFF	; 255
     67a:	8b 83       	std	Y+3, r24	; 0x03
     67c:	8b 81       	ldd	r24, Y+3	; 0x03
     67e:	82 30       	cpi	r24, 0x02	; 2
     680:	a8 f3       	brcs	.-22     	; 0x66c <parseGGA+0x78>
		strsep(&packetCopy, ",");
	}
	i = 0;
     682:	1b 82       	std	Y+3, r1	; 0x03
	
	// get the latitude
	if (msgPart[i]){
     684:	8b 81       	ldd	r24, Y+3	; 0x03
     686:	f8 01       	movw	r30, r16
     688:	e8 0f       	add	r30, r24
     68a:	f1 1d       	adc	r31, r1
     68c:	80 81       	ld	r24, Z
     68e:	88 23       	and	r24, r24
     690:	79 f0       	breq	.+30     	; 0x6b0 <parseGGA+0xbc>
		msgPart = strsep(&packetCopy, ",");
     692:	69 e4       	ldi	r22, 0x49	; 73
     694:	71 e0       	ldi	r23, 0x01	; 1
     696:	ce 01       	movw	r24, r28
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	40 d6       	rcall	.+3200   	; 0x131c <strsep>
     69c:	6c 01       	movw	r12, r24
		GPSdata->latitude = parseDegreesMinutes(msgPart, 2);
     69e:	62 e0       	ldi	r22, 0x02	; 2
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	48 df       	rcall	.-368    	; 0x534 <parseDegreesMinutes>
     6a4:	f7 01       	movw	r30, r14
     6a6:	62 83       	std	Z+2, r22	; 0x02
     6a8:	73 83       	std	Z+3, r23	; 0x03
     6aa:	84 83       	std	Z+4, r24	; 0x04
     6ac:	95 83       	std	Z+5, r25	; 0x05
     6ae:	06 c0       	rjmp	.+12     	; 0x6bc <parseGGA+0xc8>
	} else {
		GPSdata->latitude = 0;
     6b0:	f7 01       	movw	r30, r14
     6b2:	12 82       	std	Z+2, r1	; 0x02
     6b4:	13 82       	std	Z+3, r1	; 0x03
     6b6:	14 82       	std	Z+4, r1	; 0x04
     6b8:	15 82       	std	Z+5, r1	; 0x05
	uint8_t volatile i = 0;
	// We are going to alter the packetCopy pointer with strsep, so keep
	// a copy of the original location so we can free() it later.
	char *originalPacketCopy = packetCopy; 
	// The string token that we are currently looking at
	char *msgPart = packetCopy;
     6ba:	68 01       	movw	r12, r16
	} else {
		GPSdata->latitude = 0;
	}
	
	// get the N/S component of the latitude. If it's 'S', then make the latitude negative
	if (msgPart[i]){
     6bc:	8b 81       	ldd	r24, Y+3	; 0x03
     6be:	f6 01       	movw	r30, r12
     6c0:	e8 0f       	add	r30, r24
     6c2:	f1 1d       	adc	r31, r1
     6c4:	80 81       	ld	r24, Z
     6c6:	88 23       	and	r24, r24
     6c8:	99 f0       	breq	.+38     	; 0x6f0 <parseGGA+0xfc>
		msgPart = strsep(&packetCopy, ",");
     6ca:	69 e4       	ldi	r22, 0x49	; 73
     6cc:	71 e0       	ldi	r23, 0x01	; 1
     6ce:	ce 01       	movw	r24, r28
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	24 d6       	rcall	.+3144   	; 0x131c <strsep>
		if(*msgPart == 'S') {
     6d4:	fc 01       	movw	r30, r24
     6d6:	80 81       	ld	r24, Z
     6d8:	83 35       	cpi	r24, 0x53	; 83
     6da:	51 f4       	brne	.+20     	; 0x6f0 <parseGGA+0xfc>
			GPSdata->latitude = -GPSdata->latitude;
     6dc:	f7 01       	movw	r30, r14
     6de:	82 81       	ldd	r24, Z+2	; 0x02
     6e0:	93 81       	ldd	r25, Z+3	; 0x03
     6e2:	a4 81       	ldd	r26, Z+4	; 0x04
     6e4:	b5 81       	ldd	r27, Z+5	; 0x05
     6e6:	b0 58       	subi	r27, 0x80	; 128
     6e8:	82 83       	std	Z+2, r24	; 0x02
     6ea:	93 83       	std	Z+3, r25	; 0x03
     6ec:	a4 83       	std	Z+4, r26	; 0x04
     6ee:	b5 83       	std	Z+5, r27	; 0x05
		}
	}
	
	// get the longitude
	msgPart = strsep(&packetCopy, ",");
     6f0:	69 e4       	ldi	r22, 0x49	; 73
     6f2:	71 e0       	ldi	r23, 0x01	; 1
     6f4:	ce 01       	movw	r24, r28
     6f6:	01 96       	adiw	r24, 0x01	; 1
     6f8:	11 d6       	rcall	.+3106   	; 0x131c <strsep>
     6fa:	6c 01       	movw	r12, r24
	// Debug to see what it thinks the longitude is
	#ifdef UNITTEST
	i = 0;
     6fc:	1b 82       	std	Y+3, r1	; 0x03
	while (msgPart[i] != '\0'){
     6fe:	8b 81       	ldd	r24, Y+3	; 0x03
     700:	f6 01       	movw	r30, r12
     702:	e8 0f       	add	r30, r24
     704:	f1 1d       	adc	r31, r1
     706:	80 81       	ld	r24, Z
     708:	88 23       	and	r24, r24
     70a:	91 f0       	breq	.+36     	; 0x730 <parseGGA+0x13c>
		USARTTX(packetCopy[i], GPSPORT);
     70c:	8b 81       	ldd	r24, Y+3	; 0x03
     70e:	e9 81       	ldd	r30, Y+1	; 0x01
     710:	fa 81       	ldd	r31, Y+2	; 0x02
     712:	e8 0f       	add	r30, r24
     714:	f1 1d       	adc	r31, r1
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	80 81       	ld	r24, Z
     71a:	0a d2       	rcall	.+1044   	; 0xb30 <USARTTX>
		i++;
     71c:	9b 81       	ldd	r25, Y+3	; 0x03
     71e:	9f 5f       	subi	r25, 0xFF	; 255
     720:	9b 83       	std	Y+3, r25	; 0x03
	// get the longitude
	msgPart = strsep(&packetCopy, ",");
	// Debug to see what it thinks the longitude is
	#ifdef UNITTEST
	i = 0;
	while (msgPart[i] != '\0'){
     722:	8b 81       	ldd	r24, Y+3	; 0x03
     724:	f6 01       	movw	r30, r12
     726:	e8 0f       	add	r30, r24
     728:	f1 1d       	adc	r31, r1
     72a:	80 81       	ld	r24, Z
     72c:	81 11       	cpse	r24, r1
     72e:	ee cf       	rjmp	.-36     	; 0x70c <parseGGA+0x118>
		USARTTX(packetCopy[i], GPSPORT);
		i++;
	}
	USARTTX(msgPart[i], GPSPORT);
     730:	8b 81       	ldd	r24, Y+3	; 0x03
     732:	f6 01       	movw	r30, r12
     734:	e8 0f       	add	r30, r24
     736:	f1 1d       	adc	r31, r1
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	80 81       	ld	r24, Z
     73c:	f9 d1       	rcall	.+1010   	; 0xb30 <USARTTX>
	USARTTX('\n', GPSPORT);
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	8a e0       	ldi	r24, 0x0A	; 10
     742:	f6 d1       	rcall	.+1004   	; 0xb30 <USARTTX>
	i = 0;
     744:	1b 82       	std	Y+3, r1	; 0x03
	#endif
	
	if (msgPart[i]){
     746:	8b 81       	ldd	r24, Y+3	; 0x03
     748:	f6 01       	movw	r30, r12
     74a:	e8 0f       	add	r30, r24
     74c:	f1 1d       	adc	r31, r1
     74e:	80 81       	ld	r24, Z
     750:	88 23       	and	r24, r24
     752:	51 f0       	breq	.+20     	; 0x768 <parseGGA+0x174>
		GPSdata->longitude = parseDegreesMinutes(msgPart, 3);
     754:	63 e0       	ldi	r22, 0x03	; 3
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	c6 01       	movw	r24, r12
     75a:	ec de       	rcall	.-552    	; 0x534 <parseDegreesMinutes>
     75c:	f7 01       	movw	r30, r14
     75e:	66 83       	std	Z+6, r22	; 0x06
     760:	77 83       	std	Z+7, r23	; 0x07
     762:	80 87       	std	Z+8, r24	; 0x08
     764:	91 87       	std	Z+9, r25	; 0x09
     766:	05 c0       	rjmp	.+10     	; 0x772 <parseGGA+0x17e>
	} else {
		GPSdata->longitude = 0;
     768:	f7 01       	movw	r30, r14
     76a:	16 82       	std	Z+6, r1	; 0x06
     76c:	17 82       	std	Z+7, r1	; 0x07
     76e:	10 86       	std	Z+8, r1	; 0x08
     770:	11 86       	std	Z+9, r1	; 0x09
	}
	// get the E/W component of the longitude. If it's 'W', then make the longitude negative
	msgPart = strsep(&packetCopy, ",");
     772:	69 e4       	ldi	r22, 0x49	; 73
     774:	71 e0       	ldi	r23, 0x01	; 1
     776:	ce 01       	movw	r24, r28
     778:	01 96       	adiw	r24, 0x01	; 1
     77a:	d0 d5       	rcall	.+2976   	; 0x131c <strsep>
	if (msgPart[i]){
     77c:	2b 81       	ldd	r18, Y+3	; 0x03
     77e:	fc 01       	movw	r30, r24
     780:	e2 0f       	add	r30, r18
     782:	f1 1d       	adc	r31, r1
     784:	20 81       	ld	r18, Z
     786:	22 23       	and	r18, r18
     788:	71 f0       	breq	.+28     	; 0x7a6 <parseGGA+0x1b2>
		if(*msgPart == 'W') {
     78a:	fc 01       	movw	r30, r24
     78c:	80 81       	ld	r24, Z
     78e:	87 35       	cpi	r24, 0x57	; 87
     790:	51 f4       	brne	.+20     	; 0x7a6 <parseGGA+0x1b2>
			GPSdata->longitude = -GPSdata->longitude;
     792:	f7 01       	movw	r30, r14
     794:	86 81       	ldd	r24, Z+6	; 0x06
     796:	97 81       	ldd	r25, Z+7	; 0x07
     798:	a0 85       	ldd	r26, Z+8	; 0x08
     79a:	b1 85       	ldd	r27, Z+9	; 0x09
     79c:	b0 58       	subi	r27, 0x80	; 128
     79e:	86 83       	std	Z+6, r24	; 0x06
     7a0:	97 83       	std	Z+7, r25	; 0x07
     7a2:	a0 87       	std	Z+8, r26	; 0x08
     7a4:	b1 87       	std	Z+9, r27	; 0x09
		}
	}
	
	// Skip the quality, numSV, and HDOP fields
	for(i = 0; i < 3; i++) {
     7a6:	1b 82       	std	Y+3, r1	; 0x03
     7a8:	8b 81       	ldd	r24, Y+3	; 0x03
     7aa:	83 30       	cpi	r24, 0x03	; 3
     7ac:	58 f4       	brcc	.+22     	; 0x7c4 <parseGGA+0x1d0>
		strsep(&packetCopy, ",");
     7ae:	69 e4       	ldi	r22, 0x49	; 73
     7b0:	71 e0       	ldi	r23, 0x01	; 1
     7b2:	ce 01       	movw	r24, r28
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	b2 d5       	rcall	.+2916   	; 0x131c <strsep>
			GPSdata->longitude = -GPSdata->longitude;
		}
	}
	
	// Skip the quality, numSV, and HDOP fields
	for(i = 0; i < 3; i++) {
     7b8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ba:	8f 5f       	subi	r24, 0xFF	; 255
     7bc:	8b 83       	std	Y+3, r24	; 0x03
     7be:	8b 81       	ldd	r24, Y+3	; 0x03
     7c0:	83 30       	cpi	r24, 0x03	; 3
     7c2:	a8 f3       	brcs	.-22     	; 0x7ae <parseGGA+0x1ba>
		strsep(&packetCopy, ",");
	}
	
	// Get the altitude. If there is no altitude, then set it to zero.
	msgPart = strsep(&packetCopy, ",");
     7c4:	69 e4       	ldi	r22, 0x49	; 73
     7c6:	71 e0       	ldi	r23, 0x01	; 1
     7c8:	ce 01       	movw	r24, r28
     7ca:	01 96       	adiw	r24, 0x01	; 1
     7cc:	a7 d5       	rcall	.+2894   	; 0x131c <strsep>
	if(*msgPart != '\0') {
     7ce:	fc 01       	movw	r30, r24
     7d0:	20 81       	ld	r18, Z
     7d2:	22 23       	and	r18, r18
     7d4:	31 f0       	breq	.+12     	; 0x7e2 <parseGGA+0x1ee>
		GPSdata->GPSAltitude = atof(msgPart);
     7d6:	71 d5       	rcall	.+2786   	; 0x12ba <atof>
     7d8:	8b d2       	rcall	.+1302   	; 0xcf0 <__fixunssfsi>
     7da:	f7 01       	movw	r30, r14
     7dc:	71 83       	std	Z+1, r23	; 0x01
     7de:	60 83       	st	Z, r22
     7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <parseGGA+0x1f4>
	} else {
		GPSdata->GPSAltitude = 0;
     7e2:	f7 01       	movw	r30, r14
     7e4:	11 82       	std	Z+1, r1	; 0x01
     7e6:	10 82       	st	Z, r1
	}
	
	free(originalPacketCopy);
     7e8:	c8 01       	movw	r24, r16
     7ea:	7a d4       	rcall	.+2292   	; 0x10e0 <free>
		
}
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	ff 90       	pop	r15
     7fc:	ef 90       	pop	r14
     7fe:	df 90       	pop	r13
     800:	cf 90       	pop	r12
     802:	08 95       	ret

00000804 <getGPSData>:
// Once message end flag is set, puts data in the GPS struct and resets end flag
// Parameters:
//		GPSdata:	Struct that accepts data
//	Returns:
//		Nothing
void getGPSData(struct GPSStruct *GPSdata){
     804:	4f 92       	push	r4
     806:	5f 92       	push	r5
     808:	6f 92       	push	r6
     80a:	7f 92       	push	r7
     80c:	8f 92       	push	r8
     80e:	9f 92       	push	r9
     810:	af 92       	push	r10
     812:	bf 92       	push	r11
     814:	cf 92       	push	r12
     816:	df 92       	push	r13
     818:	ef 92       	push	r14
     81a:	ff 92       	push	r15
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	c2 51       	subi	r28, 0x12	; 18
     82a:	d1 40       	sbci	r29, 0x01	; 1
     82c:	0f b6       	in	r0, 0x3f	; 63
     82e:	f8 94       	cli
     830:	de bf       	out	0x3e, r29	; 62
     832:	0f be       	out	0x3f, r0	; 63
     834:	cd bf       	out	0x3d, r28	; 61
     836:	8c 01       	movw	r16, r24
	#ifdef DOUNITTEST
	uint8_t volatile echoLength = 0;
     838:	19 82       	std	Y+1, r1	; 0x01
	uint8_t volatile echoIndex = 0;
     83a:	1a 82       	std	Y+2, r1	; 0x02
	int32_t volatile latConvert = 0; 
     83c:	1b 82       	std	Y+3, r1	; 0x03
     83e:	1c 82       	std	Y+4, r1	; 0x04
     840:	1d 82       	std	Y+5, r1	; 0x05
     842:	1e 82       	std	Y+6, r1	; 0x06
	int32_t volatile longConvert = 0;
     844:	1f 82       	std	Y+7, r1	; 0x07
     846:	18 86       	std	Y+8, r1	; 0x08
     848:	19 86       	std	Y+9, r1	; 0x09
     84a:	1a 86       	std	Y+10, r1	; 0x0a
	char echoLatLongAlt[256];
	#endif
	if (msgEndFlag){
     84c:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <msgEndFlag>
     850:	99 23       	and	r25, r25
     852:	09 f4       	brne	.+2      	; 0x856 <getGPSData+0x52>
     854:	bd c0       	rjmp	.+378    	; 0x9d0 <getGPSData+0x1cc>
		parseGGA(gpsBuffer, GPSdata);
     856:	b8 01       	movw	r22, r16
     858:	87 e6       	ldi	r24, 0x67	; 103
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	cb de       	rcall	.-618    	; 0x5f4 <parseGGA>
		msgEndFlag = 0;
     85e:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <msgEndFlag>
		#ifdef DOUNITTEST
		PORTB &= ~(1 << 3);
     862:	c3 98       	cbi	0x18, 3	; 24
		latConvert = (int32_t)GPSdata->latitude;
     864:	d8 01       	movw	r26, r16
     866:	12 96       	adiw	r26, 0x02	; 2
     868:	4d 90       	ld	r4, X+
     86a:	5d 90       	ld	r5, X+
     86c:	6d 90       	ld	r6, X+
     86e:	7c 90       	ld	r7, X
     870:	15 97       	sbiw	r26, 0x05	; 5
     872:	c5 5f       	subi	r28, 0xF5	; 245
     874:	de 4f       	sbci	r29, 0xFE	; 254
     876:	48 82       	st	Y, r4
     878:	59 82       	std	Y+1, r5	; 0x01
     87a:	6a 82       	std	Y+2, r6	; 0x02
     87c:	7b 82       	std	Y+3, r7	; 0x03
     87e:	cb 50       	subi	r28, 0x0B	; 11
     880:	d1 40       	sbci	r29, 0x01	; 1
     882:	c3 01       	movw	r24, r6
     884:	b2 01       	movw	r22, r4
     886:	2f d2       	rcall	.+1118   	; 0xce6 <__fixsfsi>
     888:	6b 83       	std	Y+3, r22	; 0x03
     88a:	7c 83       	std	Y+4, r23	; 0x04
     88c:	8d 83       	std	Y+5, r24	; 0x05
     88e:	9e 83       	std	Y+6, r25	; 0x06
		longConvert = (int32_t)GPSdata->longitude;
     890:	f8 01       	movw	r30, r16
     892:	86 80       	ldd	r8, Z+6	; 0x06
     894:	97 80       	ldd	r9, Z+7	; 0x07
     896:	a0 84       	ldd	r10, Z+8	; 0x08
     898:	b1 84       	ldd	r11, Z+9	; 0x09
     89a:	c5 01       	movw	r24, r10
     89c:	b4 01       	movw	r22, r8
     89e:	23 d2       	rcall	.+1094   	; 0xce6 <__fixsfsi>
     8a0:	6f 83       	std	Y+7, r22	; 0x07
     8a2:	78 87       	std	Y+8, r23	; 0x08
     8a4:	89 87       	std	Y+9, r24	; 0x09
     8a6:	9a 87       	std	Y+10, r25	; 0x0a
		echoLength = sprintf(echoLatLongAlt, " %ld.%ld %ld.%ld %u %u", latConvert, labs((int32_t)((GPSdata->latitude - latConvert)*100000)), longConvert, labs((int32_t)((GPSdata->longitude - longConvert)*100000)), GPSdata->GPSAltitude, commaCount);
     8a8:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <commaCount>
     8ac:	6f 81       	ldd	r22, Y+7	; 0x07
     8ae:	78 85       	ldd	r23, Y+8	; 0x08
     8b0:	89 85       	ldd	r24, Y+9	; 0x09
     8b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     8b4:	cf 80       	ldd	r12, Y+7	; 0x07
     8b6:	d8 84       	ldd	r13, Y+8	; 0x08
     8b8:	e9 84       	ldd	r14, Y+9	; 0x09
     8ba:	fa 84       	ldd	r15, Y+10	; 0x0a
     8bc:	4b 80       	ldd	r4, Y+3	; 0x03
     8be:	5c 80       	ldd	r5, Y+4	; 0x04
     8c0:	6d 80       	ldd	r6, Y+5	; 0x05
     8c2:	7e 80       	ldd	r7, Y+6	; 0x06
     8c4:	c1 5f       	subi	r28, 0xF1	; 241
     8c6:	de 4f       	sbci	r29, 0xFE	; 254
     8c8:	48 82       	st	Y, r4
     8ca:	59 82       	std	Y+1, r5	; 0x01
     8cc:	6a 82       	std	Y+2, r6	; 0x02
     8ce:	7b 82       	std	Y+3, r7	; 0x03
     8d0:	cf 50       	subi	r28, 0x0F	; 15
     8d2:	d1 40       	sbci	r29, 0x01	; 1
     8d4:	4b 80       	ldd	r4, Y+3	; 0x03
     8d6:	5c 80       	ldd	r5, Y+4	; 0x04
     8d8:	6d 80       	ldd	r6, Y+5	; 0x05
     8da:	7e 80       	ldd	r7, Y+6	; 0x06
     8dc:	1f 92       	push	r1
     8de:	2f 93       	push	r18
     8e0:	d8 01       	movw	r26, r16
     8e2:	11 96       	adiw	r26, 0x01	; 1
     8e4:	2c 91       	ld	r18, X
     8e6:	11 97       	sbiw	r26, 0x01	; 1
     8e8:	2f 93       	push	r18
     8ea:	2c 91       	ld	r18, X
     8ec:	2f 93       	push	r18
     8ee:	2e d2       	rcall	.+1116   	; 0xd4c <__floatsisf>
     8f0:	9b 01       	movw	r18, r22
     8f2:	ac 01       	movw	r20, r24
     8f4:	c5 01       	movw	r24, r10
     8f6:	b4 01       	movw	r22, r8
     8f8:	29 d1       	rcall	.+594    	; 0xb4c <__subsf3>
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e5       	ldi	r19, 0x50	; 80
     8fe:	43 ec       	ldi	r20, 0xC3	; 195
     900:	57 e4       	ldi	r21, 0x47	; 71
     902:	b0 d2       	rcall	.+1376   	; 0xe64 <__mulsf3>
     904:	f0 d1       	rcall	.+992    	; 0xce6 <__fixsfsi>
     906:	99 23       	and	r25, r25
     908:	3c f4       	brge	.+14     	; 0x918 <getGPSData+0x114>
     90a:	90 95       	com	r25
     90c:	80 95       	com	r24
     90e:	70 95       	com	r23
     910:	61 95       	neg	r22
     912:	7f 4f       	sbci	r23, 0xFF	; 255
     914:	8f 4f       	sbci	r24, 0xFF	; 255
     916:	9f 4f       	sbci	r25, 0xFF	; 255
     918:	9f 93       	push	r25
     91a:	8f 93       	push	r24
     91c:	7f 93       	push	r23
     91e:	6f 93       	push	r22
     920:	ff 92       	push	r15
     922:	ef 92       	push	r14
     924:	df 92       	push	r13
     926:	cf 92       	push	r12
     928:	c1 5f       	subi	r28, 0xF1	; 241
     92a:	de 4f       	sbci	r29, 0xFE	; 254
     92c:	68 81       	ld	r22, Y
     92e:	79 81       	ldd	r23, Y+1	; 0x01
     930:	8a 81       	ldd	r24, Y+2	; 0x02
     932:	9b 81       	ldd	r25, Y+3	; 0x03
     934:	cf 50       	subi	r28, 0x0F	; 15
     936:	d1 40       	sbci	r29, 0x01	; 1
     938:	09 d2       	rcall	.+1042   	; 0xd4c <__floatsisf>
     93a:	9b 01       	movw	r18, r22
     93c:	ac 01       	movw	r20, r24
     93e:	c5 5f       	subi	r28, 0xF5	; 245
     940:	de 4f       	sbci	r29, 0xFE	; 254
     942:	68 81       	ld	r22, Y
     944:	79 81       	ldd	r23, Y+1	; 0x01
     946:	8a 81       	ldd	r24, Y+2	; 0x02
     948:	9b 81       	ldd	r25, Y+3	; 0x03
     94a:	cb 50       	subi	r28, 0x0B	; 11
     94c:	d1 40       	sbci	r29, 0x01	; 1
     94e:	fe d0       	rcall	.+508    	; 0xb4c <__subsf3>
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e5       	ldi	r19, 0x50	; 80
     954:	43 ec       	ldi	r20, 0xC3	; 195
     956:	57 e4       	ldi	r21, 0x47	; 71
     958:	85 d2       	rcall	.+1290   	; 0xe64 <__mulsf3>
     95a:	c5 d1       	rcall	.+906    	; 0xce6 <__fixsfsi>
     95c:	99 23       	and	r25, r25
     95e:	3c f4       	brge	.+14     	; 0x96e <getGPSData+0x16a>
     960:	90 95       	com	r25
     962:	80 95       	com	r24
     964:	70 95       	com	r23
     966:	61 95       	neg	r22
     968:	7f 4f       	sbci	r23, 0xFF	; 255
     96a:	8f 4f       	sbci	r24, 0xFF	; 255
     96c:	9f 4f       	sbci	r25, 0xFF	; 255
     96e:	9f 93       	push	r25
     970:	8f 93       	push	r24
     972:	7f 93       	push	r23
     974:	6f 93       	push	r22
     976:	7f 92       	push	r7
     978:	6f 92       	push	r6
     97a:	5f 92       	push	r5
     97c:	4f 92       	push	r4
     97e:	8b e4       	ldi	r24, 0x4B	; 75
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	9f 93       	push	r25
     984:	8f 93       	push	r24
     986:	ce 01       	movw	r24, r28
     988:	0b 96       	adiw	r24, 0x0b	; 11
     98a:	9f 93       	push	r25
     98c:	8f 93       	push	r24
     98e:	de d4       	rcall	.+2492   	; 0x134c <sprintf>
     990:	89 83       	std	Y+1, r24	; 0x01
		for (echoIndex; echoIndex < echoLength; echoIndex++){
     992:	8a 81       	ldd	r24, Y+2	; 0x02
     994:	9a 81       	ldd	r25, Y+2	; 0x02
     996:	89 81       	ldd	r24, Y+1	; 0x01
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	f8 94       	cli
     99c:	de bf       	out	0x3e, r29	; 62
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	98 17       	cp	r25, r24
     9a4:	88 f4       	brcc	.+34     	; 0x9c8 <getGPSData+0x1c4>
			USARTTX(echoLatLongAlt[echoIndex], GPSPORT);
     9a6:	8a 81       	ldd	r24, Y+2	; 0x02
     9a8:	eb e0       	ldi	r30, 0x0B	; 11
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	ec 0f       	add	r30, r28
     9ae:	fd 1f       	adc	r31, r29
     9b0:	e8 0f       	add	r30, r24
     9b2:	f1 1d       	adc	r31, r1
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	80 81       	ld	r24, Z
     9b8:	bb d0       	rcall	.+374    	; 0xb30 <USARTTX>
		#ifdef DOUNITTEST
		PORTB &= ~(1 << 3);
		latConvert = (int32_t)GPSdata->latitude;
		longConvert = (int32_t)GPSdata->longitude;
		echoLength = sprintf(echoLatLongAlt, " %ld.%ld %ld.%ld %u %u", latConvert, labs((int32_t)((GPSdata->latitude - latConvert)*100000)), longConvert, labs((int32_t)((GPSdata->longitude - longConvert)*100000)), GPSdata->GPSAltitude, commaCount);
		for (echoIndex; echoIndex < echoLength; echoIndex++){
     9ba:	8a 81       	ldd	r24, Y+2	; 0x02
     9bc:	8f 5f       	subi	r24, 0xFF	; 255
     9be:	8a 83       	std	Y+2, r24	; 0x02
     9c0:	9a 81       	ldd	r25, Y+2	; 0x02
     9c2:	89 81       	ldd	r24, Y+1	; 0x01
     9c4:	98 17       	cp	r25, r24
     9c6:	78 f3       	brcs	.-34     	; 0x9a6 <getGPSData+0x1a2>
			USARTTX(echoLatLongAlt[echoIndex], GPSPORT);
		}
		USARTTX('\n', GPSPORT);
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	8a e0       	ldi	r24, 0x0A	; 10
     9cc:	b1 d0       	rcall	.+354    	; 0xb30 <USARTTX>
		#endif
		sei();
     9ce:	78 94       	sei
	}
	return;
}
     9d0:	ce 5e       	subi	r28, 0xEE	; 238
     9d2:	de 4f       	sbci	r29, 0xFE	; 254
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	de bf       	out	0x3e, r29	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	cd bf       	out	0x3d, r28	; 61
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	df 90       	pop	r13
     9ec:	cf 90       	pop	r12
     9ee:	bf 90       	pop	r11
     9f0:	af 90       	pop	r10
     9f2:	9f 90       	pop	r9
     9f4:	8f 90       	pop	r8
     9f6:	7f 90       	pop	r7
     9f8:	6f 90       	pop	r6
     9fa:	5f 90       	pop	r5
     9fc:	4f 90       	pop	r4
     9fe:	08 95       	ret

00000a00 <testGPSInterrupt>:
}

// This function should test the GPS interrupt and parsing ability.
// GPS packets should be sent from laptop over FTDI to the board
// and an evident signal should be sent back if the test passed.
void testGPSInterrupt(void){
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	cd b7       	in	r28, 0x3d	; 61
     a06:	de b7       	in	r29, 0x3e	; 62
     a08:	2a 97       	sbiw	r28, 0x0a	; 10
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	f8 94       	cli
     a0e:	de bf       	out	0x3e, r29	; 62
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	cd bf       	out	0x3d, r28	; 61
	struct GPSStruct gpsData;
	gpsData.GPSAltitude = 0;
     a14:	1a 82       	std	Y+2, r1	; 0x02
     a16:	19 82       	std	Y+1, r1	; 0x01
	gpsData.latitude = 0;
     a18:	1b 82       	std	Y+3, r1	; 0x03
     a1a:	1c 82       	std	Y+4, r1	; 0x04
     a1c:	1d 82       	std	Y+5, r1	; 0x05
     a1e:	1e 82       	std	Y+6, r1	; 0x06
	gpsData.longitude = 0;
     a20:	1f 82       	std	Y+7, r1	; 0x07
     a22:	18 86       	std	Y+8, r1	; 0x08
     a24:	19 86       	std	Y+9, r1	; 0x09
     a26:	1a 86       	std	Y+10, r1	; 0x0a
	DDRB = 255;
     a28:	8f ef       	ldi	r24, 0xFF	; 255
     a2a:	87 bb       	out	0x17, r24	; 23
	PORTB = 255;
     a2c:	88 bb       	out	0x18, r24	; 24
     a2e:	2f ef       	ldi	r18, 0xFF	; 255
     a30:	89 e6       	ldi	r24, 0x69	; 105
     a32:	98 e1       	ldi	r25, 0x18	; 24
     a34:	21 50       	subi	r18, 0x01	; 1
     a36:	80 40       	sbci	r24, 0x00	; 0
     a38:	90 40       	sbci	r25, 0x00	; 0
     a3a:	e1 f7       	brne	.-8      	; 0xa34 <testGPSInterrupt+0x34>
     a3c:	00 c0       	rjmp	.+0      	; 0xa3e <testGPSInterrupt+0x3e>
     a3e:	00 00       	nop
	_delay_ms(500);
	PORTB = 0;
     a40:	18 ba       	out	0x18, r1	; 24
	InitGPS();
     a42:	ec dc       	rcall	.-1576   	; 0x41c <InitGPS>
	while (1){
		getGPSData(&gpsData);
     a44:	ce 01       	movw	r24, r28
     a46:	01 96       	adiw	r24, 0x01	; 1
     a48:	dd de       	rcall	.-582    	; 0x804 <getGPSData>
	}
     a4a:	fc cf       	rjmp	.-8      	; 0xa44 <testGPSInterrupt+0x44>

00000a4c <beginUnitTest>:
}

void beginUnitTest() {
	srand(time(NULL));
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	5a db       	rcall	.-2380   	; 0x106 <time>
     a52:	cb 01       	movw	r24, r22
     a54:	27 d4       	rcall	.+2126   	; 0x12a4 <srand>
	testGPSInterrupt();
     a56:	d4 df       	rcall	.-88     	; 0xa00 <testGPSInterrupt>

00000a58 <SetBR>:
#include "USARTComm.h"

uint16_t SetBR(uint32_t baud, uint8_t port){
     a58:	1f 93       	push	r17
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	00 d0       	rcall	.+0      	; 0xa60 <SetBR+0x8>
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
     a64:	14 2f       	mov	r17, r20
	uint16_t volatile SetUBRR;
	SetUBRR = (F_CPU/(16*baud) - 1);
     a66:	dc 01       	movw	r26, r24
     a68:	cb 01       	movw	r24, r22
     a6a:	88 0f       	add	r24, r24
     a6c:	99 1f       	adc	r25, r25
     a6e:	aa 1f       	adc	r26, r26
     a70:	bb 1f       	adc	r27, r27
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	aa 1f       	adc	r26, r26
     a78:	bb 1f       	adc	r27, r27
     a7a:	9c 01       	movw	r18, r24
     a7c:	ad 01       	movw	r20, r26
     a7e:	22 0f       	add	r18, r18
     a80:	33 1f       	adc	r19, r19
     a82:	44 1f       	adc	r20, r20
     a84:	55 1f       	adc	r21, r21
     a86:	22 0f       	add	r18, r18
     a88:	33 1f       	adc	r19, r19
     a8a:	44 1f       	adc	r20, r20
     a8c:	55 1f       	adc	r21, r21
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	74 e2       	ldi	r23, 0x24	; 36
     a92:	84 ef       	ldi	r24, 0xF4	; 244
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	6d d2       	rcall	.+1242   	; 0xf72 <__udivmodsi4>
     a98:	21 50       	subi	r18, 0x01	; 1
     a9a:	31 09       	sbc	r19, r1
     a9c:	3a 83       	std	Y+2, r19	; 0x02
     a9e:	29 83       	std	Y+1, r18	; 0x01
	if (SetUBRR > 4095 || !SetUBRR){
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	9a 81       	ldd	r25, Y+2	; 0x02
     aa4:	81 15       	cp	r24, r1
     aa6:	90 41       	sbci	r25, 0x10	; 16
     aa8:	d8 f4       	brcc	.+54     	; 0xae0 <SetBR+0x88>
     aaa:	89 81       	ldd	r24, Y+1	; 0x01
     aac:	9a 81       	ldd	r25, Y+2	; 0x02
     aae:	00 97       	sbiw	r24, 0x00	; 0
     ab0:	c9 f0       	breq	.+50     	; 0xae4 <SetBR+0x8c>
		return 0;
	} else {
		if (port){
     ab2:	11 23       	and	r17, r17
     ab4:	59 f0       	breq	.+22     	; 0xacc <SetBR+0x74>
			UBRR1H = SetUBRR >> 8;
     ab6:	89 81       	ldd	r24, Y+1	; 0x01
     ab8:	9a 81       	ldd	r25, Y+2	; 0x02
     aba:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
			UBRR1L = SetUBRR;
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	9a 81       	ldd	r25, Y+2	; 0x02
     ac2:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
			return SetUBRR;
     ac6:	89 81       	ldd	r24, Y+1	; 0x01
     ac8:	9a 81       	ldd	r25, Y+2	; 0x02
     aca:	0c c0       	rjmp	.+24     	; 0xae4 <SetBR+0x8c>
		} else {
			UBRR0H = SetUBRR >> 8;
     acc:	89 81       	ldd	r24, Y+1	; 0x01
     ace:	9a 81       	ldd	r25, Y+2	; 0x02
     ad0:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
			UBRR0L = SetUBRR;
     ad4:	89 81       	ldd	r24, Y+1	; 0x01
     ad6:	9a 81       	ldd	r25, Y+2	; 0x02
     ad8:	89 b9       	out	0x09, r24	; 9
			return SetUBRR;
     ada:	89 81       	ldd	r24, Y+1	; 0x01
     adc:	9a 81       	ldd	r25, Y+2	; 0x02
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <SetBR+0x8c>

uint16_t SetBR(uint32_t baud, uint8_t port){
	uint16_t volatile SetUBRR;
	SetUBRR = (F_CPU/(16*baud) - 1);
	if (SetUBRR > 4095 || !SetUBRR){
		return 0;
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	90 e0       	ldi	r25, 0x00	; 0
			UBRR0H = SetUBRR >> 8;
			UBRR0L = SetUBRR;
			return SetUBRR;
		}
	}
}
     ae4:	0f 90       	pop	r0
     ae6:	0f 90       	pop	r0
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	1f 91       	pop	r17
     aee:	08 95       	ret

00000af0 <InitUSART>:

uint16_t InitUSART(uint32_t baud, uint8_t port){
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	00 d0       	rcall	.+0      	; 0xaf8 <InitUSART+0x8>
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	14 2f       	mov	r17, r20
	uint16_t volatile SetUBRR;
	SetUBRR = SetBR(baud, port);
     afe:	ac df       	rcall	.-168    	; 0xa58 <SetBR>
     b00:	9a 83       	std	Y+2, r25	; 0x02
     b02:	89 83       	std	Y+1, r24	; 0x01
	if (SetUBRR){
     b04:	89 81       	ldd	r24, Y+1	; 0x01
     b06:	9a 81       	ldd	r25, Y+2	; 0x02
     b08:	00 97       	sbiw	r24, 0x00	; 0
     b0a:	61 f0       	breq	.+24     	; 0xb24 <InitUSART+0x34>
		if (port){
     b0c:	11 23       	and	r17, r17
     b0e:	31 f0       	breq	.+12     	; 0xb1c <InitUSART+0x2c>
			UCSR1B = (1 << RXEN1)|(1 << TXEN1);
     b10:	88 e1       	ldi	r24, 0x18	; 24
     b12:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
			return SetUBRR;
     b16:	89 81       	ldd	r24, Y+1	; 0x01
     b18:	9a 81       	ldd	r25, Y+2	; 0x02
     b1a:	04 c0       	rjmp	.+8      	; 0xb24 <InitUSART+0x34>
		} else {
			UCSR0B = (1 << RXEN0)|(1 << TXEN0)|(1 << RXCIE0);
     b1c:	88 e9       	ldi	r24, 0x98	; 152
     b1e:	8a b9       	out	0x0a, r24	; 10
			return SetUBRR;
     b20:	89 81       	ldd	r24, Y+1	; 0x01
     b22:	9a 81       	ldd	r25, Y+2	; 0x02
		}
	} else {
		return 0;
	}
}
     b24:	0f 90       	pop	r0
     b26:	0f 90       	pop	r0
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	1f 91       	pop	r17
     b2e:	08 95       	ret

00000b30 <USARTTX>:

void USARTTX(uint8_t TXval, uint8_t port){
	if (port){	
     b30:	66 23       	and	r22, r22
     b32:	41 f0       	breq	.+16     	; 0xb44 <USARTTX+0x14>
		while(!(UCSR1A & (1 << UDRE1))){}
     b34:	eb e9       	ldi	r30, 0x9B	; 155
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	90 81       	ld	r25, Z
     b3a:	95 ff       	sbrs	r25, 5
     b3c:	fd cf       	rjmp	.-6      	; 0xb38 <USARTTX+0x8>
		UDR1 = TXval;
     b3e:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     b42:	08 95       	ret
	} else {
		while(!(UCSR0A & (1 << UDRE0))){}
     b44:	5d 9b       	sbis	0x0b, 5	; 11
     b46:	fe cf       	rjmp	.-4      	; 0xb44 <USARTTX+0x14>
		UDR0 = TXval;
     b48:	8c b9       	out	0x0c, r24	; 12
     b4a:	08 95       	ret

00000b4c <__subsf3>:
     b4c:	50 58       	subi	r21, 0x80	; 128

00000b4e <__addsf3>:
     b4e:	bb 27       	eor	r27, r27
     b50:	aa 27       	eor	r26, r26
     b52:	0e d0       	rcall	.+28     	; 0xb70 <__addsf3x>
     b54:	4d c1       	rjmp	.+666    	; 0xdf0 <__fp_round>
     b56:	3e d1       	rcall	.+636    	; 0xdd4 <__fp_pscA>
     b58:	30 f0       	brcs	.+12     	; 0xb66 <__addsf3+0x18>
     b5a:	43 d1       	rcall	.+646    	; 0xde2 <__fp_pscB>
     b5c:	20 f0       	brcs	.+8      	; 0xb66 <__addsf3+0x18>
     b5e:	31 f4       	brne	.+12     	; 0xb6c <__addsf3+0x1e>
     b60:	9f 3f       	cpi	r25, 0xFF	; 255
     b62:	11 f4       	brne	.+4      	; 0xb68 <__addsf3+0x1a>
     b64:	1e f4       	brtc	.+6      	; 0xb6c <__addsf3+0x1e>
     b66:	33 c1       	rjmp	.+614    	; 0xdce <__fp_nan>
     b68:	0e f4       	brtc	.+2      	; 0xb6c <__addsf3+0x1e>
     b6a:	e0 95       	com	r30
     b6c:	e7 fb       	bst	r30, 7
     b6e:	29 c1       	rjmp	.+594    	; 0xdc2 <__fp_inf>

00000b70 <__addsf3x>:
     b70:	e9 2f       	mov	r30, r25
     b72:	4f d1       	rcall	.+670    	; 0xe12 <__fp_split3>
     b74:	80 f3       	brcs	.-32     	; 0xb56 <__addsf3+0x8>
     b76:	ba 17       	cp	r27, r26
     b78:	62 07       	cpc	r22, r18
     b7a:	73 07       	cpc	r23, r19
     b7c:	84 07       	cpc	r24, r20
     b7e:	95 07       	cpc	r25, r21
     b80:	18 f0       	brcs	.+6      	; 0xb88 <__addsf3x+0x18>
     b82:	71 f4       	brne	.+28     	; 0xba0 <__addsf3x+0x30>
     b84:	9e f5       	brtc	.+102    	; 0xbec <__addsf3x+0x7c>
     b86:	67 c1       	rjmp	.+718    	; 0xe56 <__fp_zero>
     b88:	0e f4       	brtc	.+2      	; 0xb8c <__addsf3x+0x1c>
     b8a:	e0 95       	com	r30
     b8c:	0b 2e       	mov	r0, r27
     b8e:	ba 2f       	mov	r27, r26
     b90:	a0 2d       	mov	r26, r0
     b92:	0b 01       	movw	r0, r22
     b94:	b9 01       	movw	r22, r18
     b96:	90 01       	movw	r18, r0
     b98:	0c 01       	movw	r0, r24
     b9a:	ca 01       	movw	r24, r20
     b9c:	a0 01       	movw	r20, r0
     b9e:	11 24       	eor	r1, r1
     ba0:	ff 27       	eor	r31, r31
     ba2:	59 1b       	sub	r21, r25
     ba4:	99 f0       	breq	.+38     	; 0xbcc <__addsf3x+0x5c>
     ba6:	59 3f       	cpi	r21, 0xF9	; 249
     ba8:	50 f4       	brcc	.+20     	; 0xbbe <__addsf3x+0x4e>
     baa:	50 3e       	cpi	r21, 0xE0	; 224
     bac:	68 f1       	brcs	.+90     	; 0xc08 <__addsf3x+0x98>
     bae:	1a 16       	cp	r1, r26
     bb0:	f0 40       	sbci	r31, 0x00	; 0
     bb2:	a2 2f       	mov	r26, r18
     bb4:	23 2f       	mov	r18, r19
     bb6:	34 2f       	mov	r19, r20
     bb8:	44 27       	eor	r20, r20
     bba:	58 5f       	subi	r21, 0xF8	; 248
     bbc:	f3 cf       	rjmp	.-26     	; 0xba4 <__addsf3x+0x34>
     bbe:	46 95       	lsr	r20
     bc0:	37 95       	ror	r19
     bc2:	27 95       	ror	r18
     bc4:	a7 95       	ror	r26
     bc6:	f0 40       	sbci	r31, 0x00	; 0
     bc8:	53 95       	inc	r21
     bca:	c9 f7       	brne	.-14     	; 0xbbe <__addsf3x+0x4e>
     bcc:	7e f4       	brtc	.+30     	; 0xbec <__addsf3x+0x7c>
     bce:	1f 16       	cp	r1, r31
     bd0:	ba 0b       	sbc	r27, r26
     bd2:	62 0b       	sbc	r22, r18
     bd4:	73 0b       	sbc	r23, r19
     bd6:	84 0b       	sbc	r24, r20
     bd8:	ba f0       	brmi	.+46     	; 0xc08 <__addsf3x+0x98>
     bda:	91 50       	subi	r25, 0x01	; 1
     bdc:	a1 f0       	breq	.+40     	; 0xc06 <__addsf3x+0x96>
     bde:	ff 0f       	add	r31, r31
     be0:	bb 1f       	adc	r27, r27
     be2:	66 1f       	adc	r22, r22
     be4:	77 1f       	adc	r23, r23
     be6:	88 1f       	adc	r24, r24
     be8:	c2 f7       	brpl	.-16     	; 0xbda <__addsf3x+0x6a>
     bea:	0e c0       	rjmp	.+28     	; 0xc08 <__addsf3x+0x98>
     bec:	ba 0f       	add	r27, r26
     bee:	62 1f       	adc	r22, r18
     bf0:	73 1f       	adc	r23, r19
     bf2:	84 1f       	adc	r24, r20
     bf4:	48 f4       	brcc	.+18     	; 0xc08 <__addsf3x+0x98>
     bf6:	87 95       	ror	r24
     bf8:	77 95       	ror	r23
     bfa:	67 95       	ror	r22
     bfc:	b7 95       	ror	r27
     bfe:	f7 95       	ror	r31
     c00:	9e 3f       	cpi	r25, 0xFE	; 254
     c02:	08 f0       	brcs	.+2      	; 0xc06 <__addsf3x+0x96>
     c04:	b3 cf       	rjmp	.-154    	; 0xb6c <__addsf3+0x1e>
     c06:	93 95       	inc	r25
     c08:	88 0f       	add	r24, r24
     c0a:	08 f0       	brcs	.+2      	; 0xc0e <__addsf3x+0x9e>
     c0c:	99 27       	eor	r25, r25
     c0e:	ee 0f       	add	r30, r30
     c10:	97 95       	ror	r25
     c12:	87 95       	ror	r24
     c14:	08 95       	ret

00000c16 <__divsf3>:
     c16:	0c d0       	rcall	.+24     	; 0xc30 <__divsf3x>
     c18:	eb c0       	rjmp	.+470    	; 0xdf0 <__fp_round>
     c1a:	e3 d0       	rcall	.+454    	; 0xde2 <__fp_pscB>
     c1c:	40 f0       	brcs	.+16     	; 0xc2e <__divsf3+0x18>
     c1e:	da d0       	rcall	.+436    	; 0xdd4 <__fp_pscA>
     c20:	30 f0       	brcs	.+12     	; 0xc2e <__divsf3+0x18>
     c22:	21 f4       	brne	.+8      	; 0xc2c <__divsf3+0x16>
     c24:	5f 3f       	cpi	r21, 0xFF	; 255
     c26:	19 f0       	breq	.+6      	; 0xc2e <__divsf3+0x18>
     c28:	cc c0       	rjmp	.+408    	; 0xdc2 <__fp_inf>
     c2a:	51 11       	cpse	r21, r1
     c2c:	15 c1       	rjmp	.+554    	; 0xe58 <__fp_szero>
     c2e:	cf c0       	rjmp	.+414    	; 0xdce <__fp_nan>

00000c30 <__divsf3x>:
     c30:	f0 d0       	rcall	.+480    	; 0xe12 <__fp_split3>
     c32:	98 f3       	brcs	.-26     	; 0xc1a <__divsf3+0x4>

00000c34 <__divsf3_pse>:
     c34:	99 23       	and	r25, r25
     c36:	c9 f3       	breq	.-14     	; 0xc2a <__divsf3+0x14>
     c38:	55 23       	and	r21, r21
     c3a:	b1 f3       	breq	.-20     	; 0xc28 <__divsf3+0x12>
     c3c:	95 1b       	sub	r25, r21
     c3e:	55 0b       	sbc	r21, r21
     c40:	bb 27       	eor	r27, r27
     c42:	aa 27       	eor	r26, r26
     c44:	62 17       	cp	r22, r18
     c46:	73 07       	cpc	r23, r19
     c48:	84 07       	cpc	r24, r20
     c4a:	38 f0       	brcs	.+14     	; 0xc5a <__divsf3_pse+0x26>
     c4c:	9f 5f       	subi	r25, 0xFF	; 255
     c4e:	5f 4f       	sbci	r21, 0xFF	; 255
     c50:	22 0f       	add	r18, r18
     c52:	33 1f       	adc	r19, r19
     c54:	44 1f       	adc	r20, r20
     c56:	aa 1f       	adc	r26, r26
     c58:	a9 f3       	breq	.-22     	; 0xc44 <__divsf3_pse+0x10>
     c5a:	33 d0       	rcall	.+102    	; 0xcc2 <__divsf3_pse+0x8e>
     c5c:	0e 2e       	mov	r0, r30
     c5e:	3a f0       	brmi	.+14     	; 0xc6e <__divsf3_pse+0x3a>
     c60:	e0 e8       	ldi	r30, 0x80	; 128
     c62:	30 d0       	rcall	.+96     	; 0xcc4 <__divsf3_pse+0x90>
     c64:	91 50       	subi	r25, 0x01	; 1
     c66:	50 40       	sbci	r21, 0x00	; 0
     c68:	e6 95       	lsr	r30
     c6a:	00 1c       	adc	r0, r0
     c6c:	ca f7       	brpl	.-14     	; 0xc60 <__divsf3_pse+0x2c>
     c6e:	29 d0       	rcall	.+82     	; 0xcc2 <__divsf3_pse+0x8e>
     c70:	fe 2f       	mov	r31, r30
     c72:	27 d0       	rcall	.+78     	; 0xcc2 <__divsf3_pse+0x8e>
     c74:	66 0f       	add	r22, r22
     c76:	77 1f       	adc	r23, r23
     c78:	88 1f       	adc	r24, r24
     c7a:	bb 1f       	adc	r27, r27
     c7c:	26 17       	cp	r18, r22
     c7e:	37 07       	cpc	r19, r23
     c80:	48 07       	cpc	r20, r24
     c82:	ab 07       	cpc	r26, r27
     c84:	b0 e8       	ldi	r27, 0x80	; 128
     c86:	09 f0       	breq	.+2      	; 0xc8a <__divsf3_pse+0x56>
     c88:	bb 0b       	sbc	r27, r27
     c8a:	80 2d       	mov	r24, r0
     c8c:	bf 01       	movw	r22, r30
     c8e:	ff 27       	eor	r31, r31
     c90:	93 58       	subi	r25, 0x83	; 131
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	2a f0       	brmi	.+10     	; 0xca0 <__divsf3_pse+0x6c>
     c96:	9e 3f       	cpi	r25, 0xFE	; 254
     c98:	51 05       	cpc	r21, r1
     c9a:	68 f0       	brcs	.+26     	; 0xcb6 <__divsf3_pse+0x82>
     c9c:	92 c0       	rjmp	.+292    	; 0xdc2 <__fp_inf>
     c9e:	dc c0       	rjmp	.+440    	; 0xe58 <__fp_szero>
     ca0:	5f 3f       	cpi	r21, 0xFF	; 255
     ca2:	ec f3       	brlt	.-6      	; 0xc9e <__divsf3_pse+0x6a>
     ca4:	98 3e       	cpi	r25, 0xE8	; 232
     ca6:	dc f3       	brlt	.-10     	; 0xc9e <__divsf3_pse+0x6a>
     ca8:	86 95       	lsr	r24
     caa:	77 95       	ror	r23
     cac:	67 95       	ror	r22
     cae:	b7 95       	ror	r27
     cb0:	f7 95       	ror	r31
     cb2:	9f 5f       	subi	r25, 0xFF	; 255
     cb4:	c9 f7       	brne	.-14     	; 0xca8 <__divsf3_pse+0x74>
     cb6:	88 0f       	add	r24, r24
     cb8:	91 1d       	adc	r25, r1
     cba:	96 95       	lsr	r25
     cbc:	87 95       	ror	r24
     cbe:	97 f9       	bld	r25, 7
     cc0:	08 95       	ret
     cc2:	e1 e0       	ldi	r30, 0x01	; 1
     cc4:	66 0f       	add	r22, r22
     cc6:	77 1f       	adc	r23, r23
     cc8:	88 1f       	adc	r24, r24
     cca:	bb 1f       	adc	r27, r27
     ccc:	62 17       	cp	r22, r18
     cce:	73 07       	cpc	r23, r19
     cd0:	84 07       	cpc	r24, r20
     cd2:	ba 07       	cpc	r27, r26
     cd4:	20 f0       	brcs	.+8      	; 0xcde <__divsf3_pse+0xaa>
     cd6:	62 1b       	sub	r22, r18
     cd8:	73 0b       	sbc	r23, r19
     cda:	84 0b       	sbc	r24, r20
     cdc:	ba 0b       	sbc	r27, r26
     cde:	ee 1f       	adc	r30, r30
     ce0:	88 f7       	brcc	.-30     	; 0xcc4 <__divsf3_pse+0x90>
     ce2:	e0 95       	com	r30
     ce4:	08 95       	ret

00000ce6 <__fixsfsi>:
     ce6:	04 d0       	rcall	.+8      	; 0xcf0 <__fixunssfsi>
     ce8:	68 94       	set
     cea:	b1 11       	cpse	r27, r1
     cec:	b5 c0       	rjmp	.+362    	; 0xe58 <__fp_szero>
     cee:	08 95       	ret

00000cf0 <__fixunssfsi>:
     cf0:	98 d0       	rcall	.+304    	; 0xe22 <__fp_splitA>
     cf2:	88 f0       	brcs	.+34     	; 0xd16 <__fixunssfsi+0x26>
     cf4:	9f 57       	subi	r25, 0x7F	; 127
     cf6:	90 f0       	brcs	.+36     	; 0xd1c <__fixunssfsi+0x2c>
     cf8:	b9 2f       	mov	r27, r25
     cfa:	99 27       	eor	r25, r25
     cfc:	b7 51       	subi	r27, 0x17	; 23
     cfe:	a0 f0       	brcs	.+40     	; 0xd28 <__fixunssfsi+0x38>
     d00:	d1 f0       	breq	.+52     	; 0xd36 <__fixunssfsi+0x46>
     d02:	66 0f       	add	r22, r22
     d04:	77 1f       	adc	r23, r23
     d06:	88 1f       	adc	r24, r24
     d08:	99 1f       	adc	r25, r25
     d0a:	1a f0       	brmi	.+6      	; 0xd12 <__fixunssfsi+0x22>
     d0c:	ba 95       	dec	r27
     d0e:	c9 f7       	brne	.-14     	; 0xd02 <__fixunssfsi+0x12>
     d10:	12 c0       	rjmp	.+36     	; 0xd36 <__fixunssfsi+0x46>
     d12:	b1 30       	cpi	r27, 0x01	; 1
     d14:	81 f0       	breq	.+32     	; 0xd36 <__fixunssfsi+0x46>
     d16:	9f d0       	rcall	.+318    	; 0xe56 <__fp_zero>
     d18:	b1 e0       	ldi	r27, 0x01	; 1
     d1a:	08 95       	ret
     d1c:	9c c0       	rjmp	.+312    	; 0xe56 <__fp_zero>
     d1e:	67 2f       	mov	r22, r23
     d20:	78 2f       	mov	r23, r24
     d22:	88 27       	eor	r24, r24
     d24:	b8 5f       	subi	r27, 0xF8	; 248
     d26:	39 f0       	breq	.+14     	; 0xd36 <__fixunssfsi+0x46>
     d28:	b9 3f       	cpi	r27, 0xF9	; 249
     d2a:	cc f3       	brlt	.-14     	; 0xd1e <__fixunssfsi+0x2e>
     d2c:	86 95       	lsr	r24
     d2e:	77 95       	ror	r23
     d30:	67 95       	ror	r22
     d32:	b3 95       	inc	r27
     d34:	d9 f7       	brne	.-10     	; 0xd2c <__fixunssfsi+0x3c>
     d36:	3e f4       	brtc	.+14     	; 0xd46 <__fixunssfsi+0x56>
     d38:	90 95       	com	r25
     d3a:	80 95       	com	r24
     d3c:	70 95       	com	r23
     d3e:	61 95       	neg	r22
     d40:	7f 4f       	sbci	r23, 0xFF	; 255
     d42:	8f 4f       	sbci	r24, 0xFF	; 255
     d44:	9f 4f       	sbci	r25, 0xFF	; 255
     d46:	08 95       	ret

00000d48 <__floatunsisf>:
     d48:	e8 94       	clt
     d4a:	09 c0       	rjmp	.+18     	; 0xd5e <__floatsisf+0x12>

00000d4c <__floatsisf>:
     d4c:	97 fb       	bst	r25, 7
     d4e:	3e f4       	brtc	.+14     	; 0xd5e <__floatsisf+0x12>
     d50:	90 95       	com	r25
     d52:	80 95       	com	r24
     d54:	70 95       	com	r23
     d56:	61 95       	neg	r22
     d58:	7f 4f       	sbci	r23, 0xFF	; 255
     d5a:	8f 4f       	sbci	r24, 0xFF	; 255
     d5c:	9f 4f       	sbci	r25, 0xFF	; 255
     d5e:	99 23       	and	r25, r25
     d60:	a9 f0       	breq	.+42     	; 0xd8c <__floatsisf+0x40>
     d62:	f9 2f       	mov	r31, r25
     d64:	96 e9       	ldi	r25, 0x96	; 150
     d66:	bb 27       	eor	r27, r27
     d68:	93 95       	inc	r25
     d6a:	f6 95       	lsr	r31
     d6c:	87 95       	ror	r24
     d6e:	77 95       	ror	r23
     d70:	67 95       	ror	r22
     d72:	b7 95       	ror	r27
     d74:	f1 11       	cpse	r31, r1
     d76:	f8 cf       	rjmp	.-16     	; 0xd68 <__floatsisf+0x1c>
     d78:	fa f4       	brpl	.+62     	; 0xdb8 <__floatsisf+0x6c>
     d7a:	bb 0f       	add	r27, r27
     d7c:	11 f4       	brne	.+4      	; 0xd82 <__floatsisf+0x36>
     d7e:	60 ff       	sbrs	r22, 0
     d80:	1b c0       	rjmp	.+54     	; 0xdb8 <__floatsisf+0x6c>
     d82:	6f 5f       	subi	r22, 0xFF	; 255
     d84:	7f 4f       	sbci	r23, 0xFF	; 255
     d86:	8f 4f       	sbci	r24, 0xFF	; 255
     d88:	9f 4f       	sbci	r25, 0xFF	; 255
     d8a:	16 c0       	rjmp	.+44     	; 0xdb8 <__floatsisf+0x6c>
     d8c:	88 23       	and	r24, r24
     d8e:	11 f0       	breq	.+4      	; 0xd94 <__floatsisf+0x48>
     d90:	96 e9       	ldi	r25, 0x96	; 150
     d92:	11 c0       	rjmp	.+34     	; 0xdb6 <__floatsisf+0x6a>
     d94:	77 23       	and	r23, r23
     d96:	21 f0       	breq	.+8      	; 0xda0 <__floatsisf+0x54>
     d98:	9e e8       	ldi	r25, 0x8E	; 142
     d9a:	87 2f       	mov	r24, r23
     d9c:	76 2f       	mov	r23, r22
     d9e:	05 c0       	rjmp	.+10     	; 0xdaa <__floatsisf+0x5e>
     da0:	66 23       	and	r22, r22
     da2:	71 f0       	breq	.+28     	; 0xdc0 <__floatsisf+0x74>
     da4:	96 e8       	ldi	r25, 0x86	; 134
     da6:	86 2f       	mov	r24, r22
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	2a f0       	brmi	.+10     	; 0xdb8 <__floatsisf+0x6c>
     dae:	9a 95       	dec	r25
     db0:	66 0f       	add	r22, r22
     db2:	77 1f       	adc	r23, r23
     db4:	88 1f       	adc	r24, r24
     db6:	da f7       	brpl	.-10     	; 0xdae <__floatsisf+0x62>
     db8:	88 0f       	add	r24, r24
     dba:	96 95       	lsr	r25
     dbc:	87 95       	ror	r24
     dbe:	97 f9       	bld	r25, 7
     dc0:	08 95       	ret

00000dc2 <__fp_inf>:
     dc2:	97 f9       	bld	r25, 7
     dc4:	9f 67       	ori	r25, 0x7F	; 127
     dc6:	80 e8       	ldi	r24, 0x80	; 128
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	08 95       	ret

00000dce <__fp_nan>:
     dce:	9f ef       	ldi	r25, 0xFF	; 255
     dd0:	80 ec       	ldi	r24, 0xC0	; 192
     dd2:	08 95       	ret

00000dd4 <__fp_pscA>:
     dd4:	00 24       	eor	r0, r0
     dd6:	0a 94       	dec	r0
     dd8:	16 16       	cp	r1, r22
     dda:	17 06       	cpc	r1, r23
     ddc:	18 06       	cpc	r1, r24
     dde:	09 06       	cpc	r0, r25
     de0:	08 95       	ret

00000de2 <__fp_pscB>:
     de2:	00 24       	eor	r0, r0
     de4:	0a 94       	dec	r0
     de6:	12 16       	cp	r1, r18
     de8:	13 06       	cpc	r1, r19
     dea:	14 06       	cpc	r1, r20
     dec:	05 06       	cpc	r0, r21
     dee:	08 95       	ret

00000df0 <__fp_round>:
     df0:	09 2e       	mov	r0, r25
     df2:	03 94       	inc	r0
     df4:	00 0c       	add	r0, r0
     df6:	11 f4       	brne	.+4      	; 0xdfc <__fp_round+0xc>
     df8:	88 23       	and	r24, r24
     dfa:	52 f0       	brmi	.+20     	; 0xe10 <__fp_round+0x20>
     dfc:	bb 0f       	add	r27, r27
     dfe:	40 f4       	brcc	.+16     	; 0xe10 <__fp_round+0x20>
     e00:	bf 2b       	or	r27, r31
     e02:	11 f4       	brne	.+4      	; 0xe08 <__fp_round+0x18>
     e04:	60 ff       	sbrs	r22, 0
     e06:	04 c0       	rjmp	.+8      	; 0xe10 <__fp_round+0x20>
     e08:	6f 5f       	subi	r22, 0xFF	; 255
     e0a:	7f 4f       	sbci	r23, 0xFF	; 255
     e0c:	8f 4f       	sbci	r24, 0xFF	; 255
     e0e:	9f 4f       	sbci	r25, 0xFF	; 255
     e10:	08 95       	ret

00000e12 <__fp_split3>:
     e12:	57 fd       	sbrc	r21, 7
     e14:	90 58       	subi	r25, 0x80	; 128
     e16:	44 0f       	add	r20, r20
     e18:	55 1f       	adc	r21, r21
     e1a:	59 f0       	breq	.+22     	; 0xe32 <__fp_splitA+0x10>
     e1c:	5f 3f       	cpi	r21, 0xFF	; 255
     e1e:	71 f0       	breq	.+28     	; 0xe3c <__fp_splitA+0x1a>
     e20:	47 95       	ror	r20

00000e22 <__fp_splitA>:
     e22:	88 0f       	add	r24, r24
     e24:	97 fb       	bst	r25, 7
     e26:	99 1f       	adc	r25, r25
     e28:	61 f0       	breq	.+24     	; 0xe42 <__fp_splitA+0x20>
     e2a:	9f 3f       	cpi	r25, 0xFF	; 255
     e2c:	79 f0       	breq	.+30     	; 0xe4c <__fp_splitA+0x2a>
     e2e:	87 95       	ror	r24
     e30:	08 95       	ret
     e32:	12 16       	cp	r1, r18
     e34:	13 06       	cpc	r1, r19
     e36:	14 06       	cpc	r1, r20
     e38:	55 1f       	adc	r21, r21
     e3a:	f2 cf       	rjmp	.-28     	; 0xe20 <__fp_split3+0xe>
     e3c:	46 95       	lsr	r20
     e3e:	f1 df       	rcall	.-30     	; 0xe22 <__fp_splitA>
     e40:	08 c0       	rjmp	.+16     	; 0xe52 <__fp_splitA+0x30>
     e42:	16 16       	cp	r1, r22
     e44:	17 06       	cpc	r1, r23
     e46:	18 06       	cpc	r1, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	f1 cf       	rjmp	.-30     	; 0xe2e <__fp_splitA+0xc>
     e4c:	86 95       	lsr	r24
     e4e:	71 05       	cpc	r23, r1
     e50:	61 05       	cpc	r22, r1
     e52:	08 94       	sec
     e54:	08 95       	ret

00000e56 <__fp_zero>:
     e56:	e8 94       	clt

00000e58 <__fp_szero>:
     e58:	bb 27       	eor	r27, r27
     e5a:	66 27       	eor	r22, r22
     e5c:	77 27       	eor	r23, r23
     e5e:	cb 01       	movw	r24, r22
     e60:	97 f9       	bld	r25, 7
     e62:	08 95       	ret

00000e64 <__mulsf3>:
     e64:	0b d0       	rcall	.+22     	; 0xe7c <__mulsf3x>
     e66:	c4 cf       	rjmp	.-120    	; 0xdf0 <__fp_round>
     e68:	b5 df       	rcall	.-150    	; 0xdd4 <__fp_pscA>
     e6a:	28 f0       	brcs	.+10     	; 0xe76 <__mulsf3+0x12>
     e6c:	ba df       	rcall	.-140    	; 0xde2 <__fp_pscB>
     e6e:	18 f0       	brcs	.+6      	; 0xe76 <__mulsf3+0x12>
     e70:	95 23       	and	r25, r21
     e72:	09 f0       	breq	.+2      	; 0xe76 <__mulsf3+0x12>
     e74:	a6 cf       	rjmp	.-180    	; 0xdc2 <__fp_inf>
     e76:	ab cf       	rjmp	.-170    	; 0xdce <__fp_nan>
     e78:	11 24       	eor	r1, r1
     e7a:	ee cf       	rjmp	.-36     	; 0xe58 <__fp_szero>

00000e7c <__mulsf3x>:
     e7c:	ca df       	rcall	.-108    	; 0xe12 <__fp_split3>
     e7e:	a0 f3       	brcs	.-24     	; 0xe68 <__mulsf3+0x4>

00000e80 <__mulsf3_pse>:
     e80:	95 9f       	mul	r25, r21
     e82:	d1 f3       	breq	.-12     	; 0xe78 <__mulsf3+0x14>
     e84:	95 0f       	add	r25, r21
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	55 1f       	adc	r21, r21
     e8a:	62 9f       	mul	r22, r18
     e8c:	f0 01       	movw	r30, r0
     e8e:	72 9f       	mul	r23, r18
     e90:	bb 27       	eor	r27, r27
     e92:	f0 0d       	add	r31, r0
     e94:	b1 1d       	adc	r27, r1
     e96:	63 9f       	mul	r22, r19
     e98:	aa 27       	eor	r26, r26
     e9a:	f0 0d       	add	r31, r0
     e9c:	b1 1d       	adc	r27, r1
     e9e:	aa 1f       	adc	r26, r26
     ea0:	64 9f       	mul	r22, r20
     ea2:	66 27       	eor	r22, r22
     ea4:	b0 0d       	add	r27, r0
     ea6:	a1 1d       	adc	r26, r1
     ea8:	66 1f       	adc	r22, r22
     eaa:	82 9f       	mul	r24, r18
     eac:	22 27       	eor	r18, r18
     eae:	b0 0d       	add	r27, r0
     eb0:	a1 1d       	adc	r26, r1
     eb2:	62 1f       	adc	r22, r18
     eb4:	73 9f       	mul	r23, r19
     eb6:	b0 0d       	add	r27, r0
     eb8:	a1 1d       	adc	r26, r1
     eba:	62 1f       	adc	r22, r18
     ebc:	83 9f       	mul	r24, r19
     ebe:	a0 0d       	add	r26, r0
     ec0:	61 1d       	adc	r22, r1
     ec2:	22 1f       	adc	r18, r18
     ec4:	74 9f       	mul	r23, r20
     ec6:	33 27       	eor	r19, r19
     ec8:	a0 0d       	add	r26, r0
     eca:	61 1d       	adc	r22, r1
     ecc:	23 1f       	adc	r18, r19
     ece:	84 9f       	mul	r24, r20
     ed0:	60 0d       	add	r22, r0
     ed2:	21 1d       	adc	r18, r1
     ed4:	82 2f       	mov	r24, r18
     ed6:	76 2f       	mov	r23, r22
     ed8:	6a 2f       	mov	r22, r26
     eda:	11 24       	eor	r1, r1
     edc:	9f 57       	subi	r25, 0x7F	; 127
     ede:	50 40       	sbci	r21, 0x00	; 0
     ee0:	8a f0       	brmi	.+34     	; 0xf04 <__mulsf3_pse+0x84>
     ee2:	e1 f0       	breq	.+56     	; 0xf1c <__mulsf3_pse+0x9c>
     ee4:	88 23       	and	r24, r24
     ee6:	4a f0       	brmi	.+18     	; 0xefa <__mulsf3_pse+0x7a>
     ee8:	ee 0f       	add	r30, r30
     eea:	ff 1f       	adc	r31, r31
     eec:	bb 1f       	adc	r27, r27
     eee:	66 1f       	adc	r22, r22
     ef0:	77 1f       	adc	r23, r23
     ef2:	88 1f       	adc	r24, r24
     ef4:	91 50       	subi	r25, 0x01	; 1
     ef6:	50 40       	sbci	r21, 0x00	; 0
     ef8:	a9 f7       	brne	.-22     	; 0xee4 <__mulsf3_pse+0x64>
     efa:	9e 3f       	cpi	r25, 0xFE	; 254
     efc:	51 05       	cpc	r21, r1
     efe:	70 f0       	brcs	.+28     	; 0xf1c <__mulsf3_pse+0x9c>
     f00:	60 cf       	rjmp	.-320    	; 0xdc2 <__fp_inf>
     f02:	aa cf       	rjmp	.-172    	; 0xe58 <__fp_szero>
     f04:	5f 3f       	cpi	r21, 0xFF	; 255
     f06:	ec f3       	brlt	.-6      	; 0xf02 <__mulsf3_pse+0x82>
     f08:	98 3e       	cpi	r25, 0xE8	; 232
     f0a:	dc f3       	brlt	.-10     	; 0xf02 <__mulsf3_pse+0x82>
     f0c:	86 95       	lsr	r24
     f0e:	77 95       	ror	r23
     f10:	67 95       	ror	r22
     f12:	b7 95       	ror	r27
     f14:	f7 95       	ror	r31
     f16:	e7 95       	ror	r30
     f18:	9f 5f       	subi	r25, 0xFF	; 255
     f1a:	c1 f7       	brne	.-16     	; 0xf0c <__mulsf3_pse+0x8c>
     f1c:	fe 2b       	or	r31, r30
     f1e:	88 0f       	add	r24, r24
     f20:	91 1d       	adc	r25, r1
     f22:	96 95       	lsr	r25
     f24:	87 95       	ror	r24
     f26:	97 f9       	bld	r25, 7
     f28:	08 95       	ret

00000f2a <__fp_cmp>:
     f2a:	99 0f       	add	r25, r25
     f2c:	00 08       	sbc	r0, r0
     f2e:	55 0f       	add	r21, r21
     f30:	aa 0b       	sbc	r26, r26
     f32:	e0 e8       	ldi	r30, 0x80	; 128
     f34:	fe ef       	ldi	r31, 0xFE	; 254
     f36:	16 16       	cp	r1, r22
     f38:	17 06       	cpc	r1, r23
     f3a:	e8 07       	cpc	r30, r24
     f3c:	f9 07       	cpc	r31, r25
     f3e:	c0 f0       	brcs	.+48     	; 0xf70 <__fp_cmp+0x46>
     f40:	12 16       	cp	r1, r18
     f42:	13 06       	cpc	r1, r19
     f44:	e4 07       	cpc	r30, r20
     f46:	f5 07       	cpc	r31, r21
     f48:	98 f0       	brcs	.+38     	; 0xf70 <__fp_cmp+0x46>
     f4a:	62 1b       	sub	r22, r18
     f4c:	73 0b       	sbc	r23, r19
     f4e:	84 0b       	sbc	r24, r20
     f50:	95 0b       	sbc	r25, r21
     f52:	39 f4       	brne	.+14     	; 0xf62 <__fp_cmp+0x38>
     f54:	0a 26       	eor	r0, r26
     f56:	61 f0       	breq	.+24     	; 0xf70 <__fp_cmp+0x46>
     f58:	23 2b       	or	r18, r19
     f5a:	24 2b       	or	r18, r20
     f5c:	25 2b       	or	r18, r21
     f5e:	21 f4       	brne	.+8      	; 0xf68 <__fp_cmp+0x3e>
     f60:	08 95       	ret
     f62:	0a 26       	eor	r0, r26
     f64:	09 f4       	brne	.+2      	; 0xf68 <__fp_cmp+0x3e>
     f66:	a1 40       	sbci	r26, 0x01	; 1
     f68:	a6 95       	lsr	r26
     f6a:	8f ef       	ldi	r24, 0xFF	; 255
     f6c:	81 1d       	adc	r24, r1
     f6e:	81 1d       	adc	r24, r1
     f70:	08 95       	ret

00000f72 <__udivmodsi4>:
     f72:	a1 e2       	ldi	r26, 0x21	; 33
     f74:	1a 2e       	mov	r1, r26
     f76:	aa 1b       	sub	r26, r26
     f78:	bb 1b       	sub	r27, r27
     f7a:	fd 01       	movw	r30, r26
     f7c:	0d c0       	rjmp	.+26     	; 0xf98 <__udivmodsi4_ep>

00000f7e <__udivmodsi4_loop>:
     f7e:	aa 1f       	adc	r26, r26
     f80:	bb 1f       	adc	r27, r27
     f82:	ee 1f       	adc	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	a2 17       	cp	r26, r18
     f88:	b3 07       	cpc	r27, r19
     f8a:	e4 07       	cpc	r30, r20
     f8c:	f5 07       	cpc	r31, r21
     f8e:	20 f0       	brcs	.+8      	; 0xf98 <__udivmodsi4_ep>
     f90:	a2 1b       	sub	r26, r18
     f92:	b3 0b       	sbc	r27, r19
     f94:	e4 0b       	sbc	r30, r20
     f96:	f5 0b       	sbc	r31, r21

00000f98 <__udivmodsi4_ep>:
     f98:	66 1f       	adc	r22, r22
     f9a:	77 1f       	adc	r23, r23
     f9c:	88 1f       	adc	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	1a 94       	dec	r1
     fa2:	69 f7       	brne	.-38     	; 0xf7e <__udivmodsi4_loop>
     fa4:	60 95       	com	r22
     fa6:	70 95       	com	r23
     fa8:	80 95       	com	r24
     faa:	90 95       	com	r25
     fac:	9b 01       	movw	r18, r22
     fae:	ac 01       	movw	r20, r24
     fb0:	bd 01       	movw	r22, r26
     fb2:	cf 01       	movw	r24, r30
     fb4:	08 95       	ret

00000fb6 <malloc>:
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	82 30       	cpi	r24, 0x02	; 2
     fbc:	91 05       	cpc	r25, r1
     fbe:	10 f4       	brcc	.+4      	; 0xfc4 <malloc+0xe>
     fc0:	82 e0       	ldi	r24, 0x02	; 2
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	e0 91 69 02 	lds	r30, 0x0269	; 0x800269 <__flp>
     fc8:	f0 91 6a 02 	lds	r31, 0x026A	; 0x80026a <__flp+0x1>
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	c0 e0       	ldi	r28, 0x00	; 0
     fd2:	d0 e0       	ldi	r29, 0x00	; 0
     fd4:	30 97       	sbiw	r30, 0x00	; 0
     fd6:	11 f1       	breq	.+68     	; 0x101c <malloc+0x66>
     fd8:	40 81       	ld	r20, Z
     fda:	51 81       	ldd	r21, Z+1	; 0x01
     fdc:	48 17       	cp	r20, r24
     fde:	59 07       	cpc	r21, r25
     fe0:	c0 f0       	brcs	.+48     	; 0x1012 <malloc+0x5c>
     fe2:	48 17       	cp	r20, r24
     fe4:	59 07       	cpc	r21, r25
     fe6:	61 f4       	brne	.+24     	; 0x1000 <malloc+0x4a>
     fe8:	82 81       	ldd	r24, Z+2	; 0x02
     fea:	93 81       	ldd	r25, Z+3	; 0x03
     fec:	20 97       	sbiw	r28, 0x00	; 0
     fee:	19 f0       	breq	.+6      	; 0xff6 <malloc+0x40>
     ff0:	9b 83       	std	Y+3, r25	; 0x03
     ff2:	8a 83       	std	Y+2, r24	; 0x02
     ff4:	2b c0       	rjmp	.+86     	; 0x104c <malloc+0x96>
     ff6:	90 93 6a 02 	sts	0x026A, r25	; 0x80026a <__flp+0x1>
     ffa:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <__flp>
     ffe:	26 c0       	rjmp	.+76     	; 0x104c <malloc+0x96>
    1000:	21 15       	cp	r18, r1
    1002:	31 05       	cpc	r19, r1
    1004:	19 f0       	breq	.+6      	; 0x100c <malloc+0x56>
    1006:	42 17       	cp	r20, r18
    1008:	53 07       	cpc	r21, r19
    100a:	18 f4       	brcc	.+6      	; 0x1012 <malloc+0x5c>
    100c:	9a 01       	movw	r18, r20
    100e:	be 01       	movw	r22, r28
    1010:	df 01       	movw	r26, r30
    1012:	ef 01       	movw	r28, r30
    1014:	02 80       	ldd	r0, Z+2	; 0x02
    1016:	f3 81       	ldd	r31, Z+3	; 0x03
    1018:	e0 2d       	mov	r30, r0
    101a:	dc cf       	rjmp	.-72     	; 0xfd4 <malloc+0x1e>
    101c:	21 15       	cp	r18, r1
    101e:	31 05       	cpc	r19, r1
    1020:	09 f1       	breq	.+66     	; 0x1064 <malloc+0xae>
    1022:	28 1b       	sub	r18, r24
    1024:	39 0b       	sbc	r19, r25
    1026:	24 30       	cpi	r18, 0x04	; 4
    1028:	31 05       	cpc	r19, r1
    102a:	90 f4       	brcc	.+36     	; 0x1050 <malloc+0x9a>
    102c:	12 96       	adiw	r26, 0x02	; 2
    102e:	8d 91       	ld	r24, X+
    1030:	9c 91       	ld	r25, X
    1032:	13 97       	sbiw	r26, 0x03	; 3
    1034:	61 15       	cp	r22, r1
    1036:	71 05       	cpc	r23, r1
    1038:	21 f0       	breq	.+8      	; 0x1042 <malloc+0x8c>
    103a:	fb 01       	movw	r30, r22
    103c:	93 83       	std	Z+3, r25	; 0x03
    103e:	82 83       	std	Z+2, r24	; 0x02
    1040:	04 c0       	rjmp	.+8      	; 0x104a <malloc+0x94>
    1042:	90 93 6a 02 	sts	0x026A, r25	; 0x80026a <__flp+0x1>
    1046:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <__flp>
    104a:	fd 01       	movw	r30, r26
    104c:	32 96       	adiw	r30, 0x02	; 2
    104e:	44 c0       	rjmp	.+136    	; 0x10d8 <malloc+0x122>
    1050:	fd 01       	movw	r30, r26
    1052:	e2 0f       	add	r30, r18
    1054:	f3 1f       	adc	r31, r19
    1056:	81 93       	st	Z+, r24
    1058:	91 93       	st	Z+, r25
    105a:	22 50       	subi	r18, 0x02	; 2
    105c:	31 09       	sbc	r19, r1
    105e:	2d 93       	st	X+, r18
    1060:	3c 93       	st	X, r19
    1062:	3a c0       	rjmp	.+116    	; 0x10d8 <malloc+0x122>
    1064:	20 91 67 02 	lds	r18, 0x0267	; 0x800267 <__brkval>
    1068:	30 91 68 02 	lds	r19, 0x0268	; 0x800268 <__brkval+0x1>
    106c:	23 2b       	or	r18, r19
    106e:	41 f4       	brne	.+16     	; 0x1080 <malloc+0xca>
    1070:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1074:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1078:	30 93 68 02 	sts	0x0268, r19	; 0x800268 <__brkval+0x1>
    107c:	20 93 67 02 	sts	0x0267, r18	; 0x800267 <__brkval>
    1080:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1084:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1088:	21 15       	cp	r18, r1
    108a:	31 05       	cpc	r19, r1
    108c:	41 f4       	brne	.+16     	; 0x109e <malloc+0xe8>
    108e:	2d b7       	in	r18, 0x3d	; 61
    1090:	3e b7       	in	r19, 0x3e	; 62
    1092:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1096:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    109a:	24 1b       	sub	r18, r20
    109c:	35 0b       	sbc	r19, r21
    109e:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <__brkval>
    10a2:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <__brkval+0x1>
    10a6:	e2 17       	cp	r30, r18
    10a8:	f3 07       	cpc	r31, r19
    10aa:	a0 f4       	brcc	.+40     	; 0x10d4 <malloc+0x11e>
    10ac:	2e 1b       	sub	r18, r30
    10ae:	3f 0b       	sbc	r19, r31
    10b0:	28 17       	cp	r18, r24
    10b2:	39 07       	cpc	r19, r25
    10b4:	78 f0       	brcs	.+30     	; 0x10d4 <malloc+0x11e>
    10b6:	ac 01       	movw	r20, r24
    10b8:	4e 5f       	subi	r20, 0xFE	; 254
    10ba:	5f 4f       	sbci	r21, 0xFF	; 255
    10bc:	24 17       	cp	r18, r20
    10be:	35 07       	cpc	r19, r21
    10c0:	48 f0       	brcs	.+18     	; 0x10d4 <malloc+0x11e>
    10c2:	4e 0f       	add	r20, r30
    10c4:	5f 1f       	adc	r21, r31
    10c6:	50 93 68 02 	sts	0x0268, r21	; 0x800268 <__brkval+0x1>
    10ca:	40 93 67 02 	sts	0x0267, r20	; 0x800267 <__brkval>
    10ce:	81 93       	st	Z+, r24
    10d0:	91 93       	st	Z+, r25
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <malloc+0x122>
    10d4:	e0 e0       	ldi	r30, 0x00	; 0
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	cf 01       	movw	r24, r30
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	08 95       	ret

000010e0 <free>:
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	09 f4       	brne	.+2      	; 0x10ee <free+0xe>
    10ec:	8c c0       	rjmp	.+280    	; 0x1206 <__stack+0x107>
    10ee:	fc 01       	movw	r30, r24
    10f0:	32 97       	sbiw	r30, 0x02	; 2
    10f2:	13 82       	std	Z+3, r1	; 0x03
    10f4:	12 82       	std	Z+2, r1	; 0x02
    10f6:	00 91 69 02 	lds	r16, 0x0269	; 0x800269 <__flp>
    10fa:	10 91 6a 02 	lds	r17, 0x026A	; 0x80026a <__flp+0x1>
    10fe:	01 15       	cp	r16, r1
    1100:	11 05       	cpc	r17, r1
    1102:	81 f4       	brne	.+32     	; 0x1124 <__stack+0x25>
    1104:	20 81       	ld	r18, Z
    1106:	31 81       	ldd	r19, Z+1	; 0x01
    1108:	82 0f       	add	r24, r18
    110a:	93 1f       	adc	r25, r19
    110c:	20 91 67 02 	lds	r18, 0x0267	; 0x800267 <__brkval>
    1110:	30 91 68 02 	lds	r19, 0x0268	; 0x800268 <__brkval+0x1>
    1114:	28 17       	cp	r18, r24
    1116:	39 07       	cpc	r19, r25
    1118:	79 f5       	brne	.+94     	; 0x1178 <__stack+0x79>
    111a:	f0 93 68 02 	sts	0x0268, r31	; 0x800268 <__brkval+0x1>
    111e:	e0 93 67 02 	sts	0x0267, r30	; 0x800267 <__brkval>
    1122:	71 c0       	rjmp	.+226    	; 0x1206 <__stack+0x107>
    1124:	d8 01       	movw	r26, r16
    1126:	40 e0       	ldi	r20, 0x00	; 0
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	ae 17       	cp	r26, r30
    112c:	bf 07       	cpc	r27, r31
    112e:	50 f4       	brcc	.+20     	; 0x1144 <__stack+0x45>
    1130:	12 96       	adiw	r26, 0x02	; 2
    1132:	2d 91       	ld	r18, X+
    1134:	3c 91       	ld	r19, X
    1136:	13 97       	sbiw	r26, 0x03	; 3
    1138:	ad 01       	movw	r20, r26
    113a:	21 15       	cp	r18, r1
    113c:	31 05       	cpc	r19, r1
    113e:	09 f1       	breq	.+66     	; 0x1182 <__stack+0x83>
    1140:	d9 01       	movw	r26, r18
    1142:	f3 cf       	rjmp	.-26     	; 0x112a <__stack+0x2b>
    1144:	9d 01       	movw	r18, r26
    1146:	da 01       	movw	r26, r20
    1148:	33 83       	std	Z+3, r19	; 0x03
    114a:	22 83       	std	Z+2, r18	; 0x02
    114c:	60 81       	ld	r22, Z
    114e:	71 81       	ldd	r23, Z+1	; 0x01
    1150:	86 0f       	add	r24, r22
    1152:	97 1f       	adc	r25, r23
    1154:	82 17       	cp	r24, r18
    1156:	93 07       	cpc	r25, r19
    1158:	69 f4       	brne	.+26     	; 0x1174 <__stack+0x75>
    115a:	ec 01       	movw	r28, r24
    115c:	28 81       	ld	r18, Y
    115e:	39 81       	ldd	r19, Y+1	; 0x01
    1160:	26 0f       	add	r18, r22
    1162:	37 1f       	adc	r19, r23
    1164:	2e 5f       	subi	r18, 0xFE	; 254
    1166:	3f 4f       	sbci	r19, 0xFF	; 255
    1168:	31 83       	std	Z+1, r19	; 0x01
    116a:	20 83       	st	Z, r18
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	9b 81       	ldd	r25, Y+3	; 0x03
    1170:	93 83       	std	Z+3, r25	; 0x03
    1172:	82 83       	std	Z+2, r24	; 0x02
    1174:	45 2b       	or	r20, r21
    1176:	29 f4       	brne	.+10     	; 0x1182 <__stack+0x83>
    1178:	f0 93 6a 02 	sts	0x026A, r31	; 0x80026a <__flp+0x1>
    117c:	e0 93 69 02 	sts	0x0269, r30	; 0x800269 <__flp>
    1180:	42 c0       	rjmp	.+132    	; 0x1206 <__stack+0x107>
    1182:	13 96       	adiw	r26, 0x03	; 3
    1184:	fc 93       	st	X, r31
    1186:	ee 93       	st	-X, r30
    1188:	12 97       	sbiw	r26, 0x02	; 2
    118a:	ed 01       	movw	r28, r26
    118c:	49 91       	ld	r20, Y+
    118e:	59 91       	ld	r21, Y+
    1190:	9e 01       	movw	r18, r28
    1192:	24 0f       	add	r18, r20
    1194:	35 1f       	adc	r19, r21
    1196:	e2 17       	cp	r30, r18
    1198:	f3 07       	cpc	r31, r19
    119a:	71 f4       	brne	.+28     	; 0x11b8 <__stack+0xb9>
    119c:	80 81       	ld	r24, Z
    119e:	91 81       	ldd	r25, Z+1	; 0x01
    11a0:	84 0f       	add	r24, r20
    11a2:	95 1f       	adc	r25, r21
    11a4:	02 96       	adiw	r24, 0x02	; 2
    11a6:	11 96       	adiw	r26, 0x01	; 1
    11a8:	9c 93       	st	X, r25
    11aa:	8e 93       	st	-X, r24
    11ac:	82 81       	ldd	r24, Z+2	; 0x02
    11ae:	93 81       	ldd	r25, Z+3	; 0x03
    11b0:	13 96       	adiw	r26, 0x03	; 3
    11b2:	9c 93       	st	X, r25
    11b4:	8e 93       	st	-X, r24
    11b6:	12 97       	sbiw	r26, 0x02	; 2
    11b8:	e0 e0       	ldi	r30, 0x00	; 0
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	d8 01       	movw	r26, r16
    11be:	12 96       	adiw	r26, 0x02	; 2
    11c0:	8d 91       	ld	r24, X+
    11c2:	9c 91       	ld	r25, X
    11c4:	13 97       	sbiw	r26, 0x03	; 3
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	19 f0       	breq	.+6      	; 0x11d0 <__stack+0xd1>
    11ca:	f8 01       	movw	r30, r16
    11cc:	8c 01       	movw	r16, r24
    11ce:	f6 cf       	rjmp	.-20     	; 0x11bc <__stack+0xbd>
    11d0:	8d 91       	ld	r24, X+
    11d2:	9c 91       	ld	r25, X
    11d4:	98 01       	movw	r18, r16
    11d6:	2e 5f       	subi	r18, 0xFE	; 254
    11d8:	3f 4f       	sbci	r19, 0xFF	; 255
    11da:	82 0f       	add	r24, r18
    11dc:	93 1f       	adc	r25, r19
    11de:	20 91 67 02 	lds	r18, 0x0267	; 0x800267 <__brkval>
    11e2:	30 91 68 02 	lds	r19, 0x0268	; 0x800268 <__brkval+0x1>
    11e6:	28 17       	cp	r18, r24
    11e8:	39 07       	cpc	r19, r25
    11ea:	69 f4       	brne	.+26     	; 0x1206 <__stack+0x107>
    11ec:	30 97       	sbiw	r30, 0x00	; 0
    11ee:	29 f4       	brne	.+10     	; 0x11fa <__stack+0xfb>
    11f0:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <__flp+0x1>
    11f4:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <__flp>
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <__stack+0xff>
    11fa:	13 82       	std	Z+3, r1	; 0x03
    11fc:	12 82       	std	Z+2, r1	; 0x02
    11fe:	10 93 68 02 	sts	0x0268, r17	; 0x800268 <__brkval+0x1>
    1202:	00 93 67 02 	sts	0x0267, r16	; 0x800267 <__brkval>
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	08 95       	ret

00001210 <do_rand>:
    1210:	8f 92       	push	r8
    1212:	9f 92       	push	r9
    1214:	af 92       	push	r10
    1216:	bf 92       	push	r11
    1218:	cf 92       	push	r12
    121a:	df 92       	push	r13
    121c:	ef 92       	push	r14
    121e:	ff 92       	push	r15
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	ec 01       	movw	r28, r24
    1226:	68 81       	ld	r22, Y
    1228:	79 81       	ldd	r23, Y+1	; 0x01
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	9b 81       	ldd	r25, Y+3	; 0x03
    122e:	61 15       	cp	r22, r1
    1230:	71 05       	cpc	r23, r1
    1232:	81 05       	cpc	r24, r1
    1234:	91 05       	cpc	r25, r1
    1236:	21 f4       	brne	.+8      	; 0x1240 <do_rand+0x30>
    1238:	64 e2       	ldi	r22, 0x24	; 36
    123a:	79 ed       	ldi	r23, 0xD9	; 217
    123c:	8b e5       	ldi	r24, 0x5B	; 91
    123e:	97 e0       	ldi	r25, 0x07	; 7
    1240:	2d e1       	ldi	r18, 0x1D	; 29
    1242:	33 ef       	ldi	r19, 0xF3	; 243
    1244:	41 e0       	ldi	r20, 0x01	; 1
    1246:	50 e0       	ldi	r21, 0x00	; 0
    1248:	d7 d4       	rcall	.+2478   	; 0x1bf8 <__divmodsi4>
    124a:	49 01       	movw	r8, r18
    124c:	5a 01       	movw	r10, r20
    124e:	9b 01       	movw	r18, r22
    1250:	ac 01       	movw	r20, r24
    1252:	a7 ea       	ldi	r26, 0xA7	; 167
    1254:	b1 e4       	ldi	r27, 0x41	; 65
    1256:	ec d4       	rcall	.+2520   	; 0x1c30 <__muluhisi3>
    1258:	6b 01       	movw	r12, r22
    125a:	7c 01       	movw	r14, r24
    125c:	ac ee       	ldi	r26, 0xEC	; 236
    125e:	b4 ef       	ldi	r27, 0xF4	; 244
    1260:	a5 01       	movw	r20, r10
    1262:	94 01       	movw	r18, r8
    1264:	f1 d4       	rcall	.+2530   	; 0x1c48 <__mulohisi3>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	8c 0d       	add	r24, r12
    126c:	9d 1d       	adc	r25, r13
    126e:	ae 1d       	adc	r26, r14
    1270:	bf 1d       	adc	r27, r15
    1272:	b7 ff       	sbrs	r27, 7
    1274:	03 c0       	rjmp	.+6      	; 0x127c <do_rand+0x6c>
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	a1 09       	sbc	r26, r1
    127a:	b0 48       	sbci	r27, 0x80	; 128
    127c:	88 83       	st	Y, r24
    127e:	99 83       	std	Y+1, r25	; 0x01
    1280:	aa 83       	std	Y+2, r26	; 0x02
    1282:	bb 83       	std	Y+3, r27	; 0x03
    1284:	9f 77       	andi	r25, 0x7F	; 127
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	ff 90       	pop	r15
    128c:	ef 90       	pop	r14
    128e:	df 90       	pop	r13
    1290:	cf 90       	pop	r12
    1292:	bf 90       	pop	r11
    1294:	af 90       	pop	r10
    1296:	9f 90       	pop	r9
    1298:	8f 90       	pop	r8
    129a:	08 95       	ret

0000129c <rand_r>:
    129c:	b9 cf       	rjmp	.-142    	; 0x1210 <do_rand>

0000129e <rand>:
    129e:	86 e0       	ldi	r24, 0x06	; 6
    12a0:	91 e0       	ldi	r25, 0x01	; 1
    12a2:	b6 cf       	rjmp	.-148    	; 0x1210 <do_rand>

000012a4 <srand>:
    12a4:	a0 e0       	ldi	r26, 0x00	; 0
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    12ac:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    12b0:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    12b4:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    12b8:	08 95       	ret

000012ba <atof>:
    12ba:	66 27       	eor	r22, r22
    12bc:	77 27       	eor	r23, r23
    12be:	63 c2       	rjmp	.+1222   	; 0x1786 <strtod>

000012c0 <strdup>:
    12c0:	0f 93       	push	r16
    12c2:	1f 93       	push	r17
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	8c 01       	movw	r16, r24
    12ca:	fc 01       	movw	r30, r24
    12cc:	01 90       	ld	r0, Z+
    12ce:	00 20       	and	r0, r0
    12d0:	e9 f7       	brne	.-6      	; 0x12cc <strdup+0xc>
    12d2:	cf 01       	movw	r24, r30
    12d4:	80 1b       	sub	r24, r16
    12d6:	91 0b       	sbc	r25, r17
    12d8:	6e de       	rcall	.-804    	; 0xfb6 <malloc>
    12da:	ec 01       	movw	r28, r24
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	11 f0       	breq	.+4      	; 0x12e4 <strdup+0x24>
    12e0:	b8 01       	movw	r22, r16
    12e2:	06 d0       	rcall	.+12     	; 0x12f0 <strcpy>
    12e4:	ce 01       	movw	r24, r28
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	08 95       	ret

000012f0 <strcpy>:
    12f0:	fb 01       	movw	r30, r22
    12f2:	dc 01       	movw	r26, r24
    12f4:	01 90       	ld	r0, Z+
    12f6:	0d 92       	st	X+, r0
    12f8:	00 20       	and	r0, r0
    12fa:	e1 f7       	brne	.-8      	; 0x12f4 <strcpy+0x4>
    12fc:	08 95       	ret

000012fe <strncpy>:
    12fe:	fb 01       	movw	r30, r22
    1300:	dc 01       	movw	r26, r24
    1302:	41 50       	subi	r20, 0x01	; 1
    1304:	50 40       	sbci	r21, 0x00	; 0
    1306:	48 f0       	brcs	.+18     	; 0x131a <strncpy+0x1c>
    1308:	01 90       	ld	r0, Z+
    130a:	0d 92       	st	X+, r0
    130c:	00 20       	and	r0, r0
    130e:	c9 f7       	brne	.-14     	; 0x1302 <strncpy+0x4>
    1310:	01 c0       	rjmp	.+2      	; 0x1314 <strncpy+0x16>
    1312:	1d 92       	st	X+, r1
    1314:	41 50       	subi	r20, 0x01	; 1
    1316:	50 40       	sbci	r21, 0x00	; 0
    1318:	e0 f7       	brcc	.-8      	; 0x1312 <strncpy+0x14>
    131a:	08 95       	ret

0000131c <strsep>:
    131c:	fc 01       	movw	r30, r24
    131e:	a0 81       	ld	r26, Z
    1320:	b1 81       	ldd	r27, Z+1	; 0x01
    1322:	ad 01       	movw	r20, r26
    1324:	10 96       	adiw	r26, 0x00	; 0
    1326:	81 f0       	breq	.+32     	; 0x1348 <strsep+0x2c>
    1328:	3d 91       	ld	r19, X+
    132a:	fb 01       	movw	r30, r22
    132c:	01 90       	ld	r0, Z+
    132e:	03 16       	cp	r0, r19
    1330:	01 10       	cpse	r0, r1
    1332:	e1 f7       	brne	.-8      	; 0x132c <strsep+0x10>
    1334:	c9 f7       	brne	.-14     	; 0x1328 <strsep+0xc>
    1336:	00 20       	and	r0, r0
    1338:	11 f4       	brne	.+4      	; 0x133e <strsep+0x22>
    133a:	d0 01       	movw	r26, r0
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <strsep+0x26>
    133e:	1e 92       	st	-X, r1
    1340:	11 96       	adiw	r26, 0x01	; 1
    1342:	fc 01       	movw	r30, r24
    1344:	a0 83       	st	Z, r26
    1346:	b1 83       	std	Z+1, r27	; 0x01
    1348:	ca 01       	movw	r24, r20
    134a:	08 95       	ret

0000134c <sprintf>:
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	2e 97       	sbiw	r28, 0x0e	; 14
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	0d 89       	ldd	r16, Y+21	; 0x15
    1366:	1e 89       	ldd	r17, Y+22	; 0x16
    1368:	86 e0       	ldi	r24, 0x06	; 6
    136a:	8c 83       	std	Y+4, r24	; 0x04
    136c:	1a 83       	std	Y+2, r17	; 0x02
    136e:	09 83       	std	Y+1, r16	; 0x01
    1370:	8f ef       	ldi	r24, 0xFF	; 255
    1372:	9f e7       	ldi	r25, 0x7F	; 127
    1374:	9e 83       	std	Y+6, r25	; 0x06
    1376:	8d 83       	std	Y+5, r24	; 0x05
    1378:	ae 01       	movw	r20, r28
    137a:	47 5e       	subi	r20, 0xE7	; 231
    137c:	5f 4f       	sbci	r21, 0xFF	; 255
    137e:	6f 89       	ldd	r22, Y+23	; 0x17
    1380:	78 8d       	ldd	r23, Y+24	; 0x18
    1382:	ce 01       	movw	r24, r28
    1384:	01 96       	adiw	r24, 0x01	; 1
    1386:	11 d0       	rcall	.+34     	; 0x13aa <vfprintf>
    1388:	2f 81       	ldd	r18, Y+7	; 0x07
    138a:	38 85       	ldd	r19, Y+8	; 0x08
    138c:	f8 01       	movw	r30, r16
    138e:	e2 0f       	add	r30, r18
    1390:	f3 1f       	adc	r31, r19
    1392:	10 82       	st	Z, r1
    1394:	2e 96       	adiw	r28, 0x0e	; 14
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	1f 91       	pop	r17
    13a6:	0f 91       	pop	r16
    13a8:	08 95       	ret

000013aa <vfprintf>:
    13aa:	2f 92       	push	r2
    13ac:	3f 92       	push	r3
    13ae:	4f 92       	push	r4
    13b0:	5f 92       	push	r5
    13b2:	6f 92       	push	r6
    13b4:	7f 92       	push	r7
    13b6:	8f 92       	push	r8
    13b8:	9f 92       	push	r9
    13ba:	af 92       	push	r10
    13bc:	bf 92       	push	r11
    13be:	cf 92       	push	r12
    13c0:	df 92       	push	r13
    13c2:	ef 92       	push	r14
    13c4:	ff 92       	push	r15
    13c6:	0f 93       	push	r16
    13c8:	1f 93       	push	r17
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	2c 97       	sbiw	r28, 0x0c	; 12
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	7c 01       	movw	r14, r24
    13e0:	6b 01       	movw	r12, r22
    13e2:	8a 01       	movw	r16, r20
    13e4:	fc 01       	movw	r30, r24
    13e6:	17 82       	std	Z+7, r1	; 0x07
    13e8:	16 82       	std	Z+6, r1	; 0x06
    13ea:	83 81       	ldd	r24, Z+3	; 0x03
    13ec:	81 ff       	sbrs	r24, 1
    13ee:	b0 c1       	rjmp	.+864    	; 0x1750 <vfprintf+0x3a6>
    13f0:	ce 01       	movw	r24, r28
    13f2:	01 96       	adiw	r24, 0x01	; 1
    13f4:	4c 01       	movw	r8, r24
    13f6:	f7 01       	movw	r30, r14
    13f8:	93 81       	ldd	r25, Z+3	; 0x03
    13fa:	f6 01       	movw	r30, r12
    13fc:	93 fd       	sbrc	r25, 3
    13fe:	85 91       	lpm	r24, Z+
    1400:	93 ff       	sbrs	r25, 3
    1402:	81 91       	ld	r24, Z+
    1404:	6f 01       	movw	r12, r30
    1406:	88 23       	and	r24, r24
    1408:	09 f4       	brne	.+2      	; 0x140c <vfprintf+0x62>
    140a:	9e c1       	rjmp	.+828    	; 0x1748 <vfprintf+0x39e>
    140c:	85 32       	cpi	r24, 0x25	; 37
    140e:	39 f4       	brne	.+14     	; 0x141e <vfprintf+0x74>
    1410:	93 fd       	sbrc	r25, 3
    1412:	85 91       	lpm	r24, Z+
    1414:	93 ff       	sbrs	r25, 3
    1416:	81 91       	ld	r24, Z+
    1418:	6f 01       	movw	r12, r30
    141a:	85 32       	cpi	r24, 0x25	; 37
    141c:	21 f4       	brne	.+8      	; 0x1426 <vfprintf+0x7c>
    141e:	b7 01       	movw	r22, r14
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	4d d3       	rcall	.+1690   	; 0x1abe <fputc>
    1424:	e8 cf       	rjmp	.-48     	; 0x13f6 <vfprintf+0x4c>
    1426:	51 2c       	mov	r5, r1
    1428:	31 2c       	mov	r3, r1
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	20 32       	cpi	r18, 0x20	; 32
    142e:	a0 f4       	brcc	.+40     	; 0x1458 <vfprintf+0xae>
    1430:	8b 32       	cpi	r24, 0x2B	; 43
    1432:	69 f0       	breq	.+26     	; 0x144e <vfprintf+0xa4>
    1434:	30 f4       	brcc	.+12     	; 0x1442 <vfprintf+0x98>
    1436:	80 32       	cpi	r24, 0x20	; 32
    1438:	59 f0       	breq	.+22     	; 0x1450 <vfprintf+0xa6>
    143a:	83 32       	cpi	r24, 0x23	; 35
    143c:	69 f4       	brne	.+26     	; 0x1458 <vfprintf+0xae>
    143e:	20 61       	ori	r18, 0x10	; 16
    1440:	2c c0       	rjmp	.+88     	; 0x149a <vfprintf+0xf0>
    1442:	8d 32       	cpi	r24, 0x2D	; 45
    1444:	39 f0       	breq	.+14     	; 0x1454 <vfprintf+0xaa>
    1446:	80 33       	cpi	r24, 0x30	; 48
    1448:	39 f4       	brne	.+14     	; 0x1458 <vfprintf+0xae>
    144a:	21 60       	ori	r18, 0x01	; 1
    144c:	26 c0       	rjmp	.+76     	; 0x149a <vfprintf+0xf0>
    144e:	22 60       	ori	r18, 0x02	; 2
    1450:	24 60       	ori	r18, 0x04	; 4
    1452:	23 c0       	rjmp	.+70     	; 0x149a <vfprintf+0xf0>
    1454:	28 60       	ori	r18, 0x08	; 8
    1456:	21 c0       	rjmp	.+66     	; 0x149a <vfprintf+0xf0>
    1458:	27 fd       	sbrc	r18, 7
    145a:	27 c0       	rjmp	.+78     	; 0x14aa <vfprintf+0x100>
    145c:	30 ed       	ldi	r19, 0xD0	; 208
    145e:	38 0f       	add	r19, r24
    1460:	3a 30       	cpi	r19, 0x0A	; 10
    1462:	78 f4       	brcc	.+30     	; 0x1482 <vfprintf+0xd8>
    1464:	26 ff       	sbrs	r18, 6
    1466:	06 c0       	rjmp	.+12     	; 0x1474 <vfprintf+0xca>
    1468:	fa e0       	ldi	r31, 0x0A	; 10
    146a:	5f 9e       	mul	r5, r31
    146c:	30 0d       	add	r19, r0
    146e:	11 24       	eor	r1, r1
    1470:	53 2e       	mov	r5, r19
    1472:	13 c0       	rjmp	.+38     	; 0x149a <vfprintf+0xf0>
    1474:	8a e0       	ldi	r24, 0x0A	; 10
    1476:	38 9e       	mul	r3, r24
    1478:	30 0d       	add	r19, r0
    147a:	11 24       	eor	r1, r1
    147c:	33 2e       	mov	r3, r19
    147e:	20 62       	ori	r18, 0x20	; 32
    1480:	0c c0       	rjmp	.+24     	; 0x149a <vfprintf+0xf0>
    1482:	8e 32       	cpi	r24, 0x2E	; 46
    1484:	21 f4       	brne	.+8      	; 0x148e <vfprintf+0xe4>
    1486:	26 fd       	sbrc	r18, 6
    1488:	5f c1       	rjmp	.+702    	; 0x1748 <vfprintf+0x39e>
    148a:	20 64       	ori	r18, 0x40	; 64
    148c:	06 c0       	rjmp	.+12     	; 0x149a <vfprintf+0xf0>
    148e:	8c 36       	cpi	r24, 0x6C	; 108
    1490:	11 f4       	brne	.+4      	; 0x1496 <vfprintf+0xec>
    1492:	20 68       	ori	r18, 0x80	; 128
    1494:	02 c0       	rjmp	.+4      	; 0x149a <vfprintf+0xf0>
    1496:	88 36       	cpi	r24, 0x68	; 104
    1498:	41 f4       	brne	.+16     	; 0x14aa <vfprintf+0x100>
    149a:	f6 01       	movw	r30, r12
    149c:	93 fd       	sbrc	r25, 3
    149e:	85 91       	lpm	r24, Z+
    14a0:	93 ff       	sbrs	r25, 3
    14a2:	81 91       	ld	r24, Z+
    14a4:	6f 01       	movw	r12, r30
    14a6:	81 11       	cpse	r24, r1
    14a8:	c1 cf       	rjmp	.-126    	; 0x142c <vfprintf+0x82>
    14aa:	98 2f       	mov	r25, r24
    14ac:	9f 7d       	andi	r25, 0xDF	; 223
    14ae:	95 54       	subi	r25, 0x45	; 69
    14b0:	93 30       	cpi	r25, 0x03	; 3
    14b2:	28 f4       	brcc	.+10     	; 0x14be <vfprintf+0x114>
    14b4:	0c 5f       	subi	r16, 0xFC	; 252
    14b6:	1f 4f       	sbci	r17, 0xFF	; 255
    14b8:	ff e3       	ldi	r31, 0x3F	; 63
    14ba:	f9 83       	std	Y+1, r31	; 0x01
    14bc:	0d c0       	rjmp	.+26     	; 0x14d8 <vfprintf+0x12e>
    14be:	83 36       	cpi	r24, 0x63	; 99
    14c0:	31 f0       	breq	.+12     	; 0x14ce <vfprintf+0x124>
    14c2:	83 37       	cpi	r24, 0x73	; 115
    14c4:	71 f0       	breq	.+28     	; 0x14e2 <vfprintf+0x138>
    14c6:	83 35       	cpi	r24, 0x53	; 83
    14c8:	09 f0       	breq	.+2      	; 0x14cc <vfprintf+0x122>
    14ca:	57 c0       	rjmp	.+174    	; 0x157a <vfprintf+0x1d0>
    14cc:	21 c0       	rjmp	.+66     	; 0x1510 <vfprintf+0x166>
    14ce:	f8 01       	movw	r30, r16
    14d0:	80 81       	ld	r24, Z
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	0e 5f       	subi	r16, 0xFE	; 254
    14d6:	1f 4f       	sbci	r17, 0xFF	; 255
    14d8:	44 24       	eor	r4, r4
    14da:	43 94       	inc	r4
    14dc:	51 2c       	mov	r5, r1
    14de:	54 01       	movw	r10, r8
    14e0:	14 c0       	rjmp	.+40     	; 0x150a <vfprintf+0x160>
    14e2:	38 01       	movw	r6, r16
    14e4:	f2 e0       	ldi	r31, 0x02	; 2
    14e6:	6f 0e       	add	r6, r31
    14e8:	71 1c       	adc	r7, r1
    14ea:	f8 01       	movw	r30, r16
    14ec:	a0 80       	ld	r10, Z
    14ee:	b1 80       	ldd	r11, Z+1	; 0x01
    14f0:	26 ff       	sbrs	r18, 6
    14f2:	03 c0       	rjmp	.+6      	; 0x14fa <vfprintf+0x150>
    14f4:	65 2d       	mov	r22, r5
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <vfprintf+0x154>
    14fa:	6f ef       	ldi	r22, 0xFF	; 255
    14fc:	7f ef       	ldi	r23, 0xFF	; 255
    14fe:	c5 01       	movw	r24, r10
    1500:	2c 87       	std	Y+12, r18	; 0x0c
    1502:	d2 d2       	rcall	.+1444   	; 0x1aa8 <strnlen>
    1504:	2c 01       	movw	r4, r24
    1506:	83 01       	movw	r16, r6
    1508:	2c 85       	ldd	r18, Y+12	; 0x0c
    150a:	2f 77       	andi	r18, 0x7F	; 127
    150c:	22 2e       	mov	r2, r18
    150e:	16 c0       	rjmp	.+44     	; 0x153c <vfprintf+0x192>
    1510:	38 01       	movw	r6, r16
    1512:	f2 e0       	ldi	r31, 0x02	; 2
    1514:	6f 0e       	add	r6, r31
    1516:	71 1c       	adc	r7, r1
    1518:	f8 01       	movw	r30, r16
    151a:	a0 80       	ld	r10, Z
    151c:	b1 80       	ldd	r11, Z+1	; 0x01
    151e:	26 ff       	sbrs	r18, 6
    1520:	03 c0       	rjmp	.+6      	; 0x1528 <vfprintf+0x17e>
    1522:	65 2d       	mov	r22, r5
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	02 c0       	rjmp	.+4      	; 0x152c <vfprintf+0x182>
    1528:	6f ef       	ldi	r22, 0xFF	; 255
    152a:	7f ef       	ldi	r23, 0xFF	; 255
    152c:	c5 01       	movw	r24, r10
    152e:	2c 87       	std	Y+12, r18	; 0x0c
    1530:	b0 d2       	rcall	.+1376   	; 0x1a92 <strnlen_P>
    1532:	2c 01       	movw	r4, r24
    1534:	2c 85       	ldd	r18, Y+12	; 0x0c
    1536:	20 68       	ori	r18, 0x80	; 128
    1538:	22 2e       	mov	r2, r18
    153a:	83 01       	movw	r16, r6
    153c:	23 fc       	sbrc	r2, 3
    153e:	19 c0       	rjmp	.+50     	; 0x1572 <vfprintf+0x1c8>
    1540:	83 2d       	mov	r24, r3
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	48 16       	cp	r4, r24
    1546:	59 06       	cpc	r5, r25
    1548:	a0 f4       	brcc	.+40     	; 0x1572 <vfprintf+0x1c8>
    154a:	b7 01       	movw	r22, r14
    154c:	80 e2       	ldi	r24, 0x20	; 32
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	b6 d2       	rcall	.+1388   	; 0x1abe <fputc>
    1552:	3a 94       	dec	r3
    1554:	f5 cf       	rjmp	.-22     	; 0x1540 <vfprintf+0x196>
    1556:	f5 01       	movw	r30, r10
    1558:	27 fc       	sbrc	r2, 7
    155a:	85 91       	lpm	r24, Z+
    155c:	27 fe       	sbrs	r2, 7
    155e:	81 91       	ld	r24, Z+
    1560:	5f 01       	movw	r10, r30
    1562:	b7 01       	movw	r22, r14
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	ab d2       	rcall	.+1366   	; 0x1abe <fputc>
    1568:	31 10       	cpse	r3, r1
    156a:	3a 94       	dec	r3
    156c:	f1 e0       	ldi	r31, 0x01	; 1
    156e:	4f 1a       	sub	r4, r31
    1570:	51 08       	sbc	r5, r1
    1572:	41 14       	cp	r4, r1
    1574:	51 04       	cpc	r5, r1
    1576:	79 f7       	brne	.-34     	; 0x1556 <vfprintf+0x1ac>
    1578:	de c0       	rjmp	.+444    	; 0x1736 <vfprintf+0x38c>
    157a:	84 36       	cpi	r24, 0x64	; 100
    157c:	11 f0       	breq	.+4      	; 0x1582 <vfprintf+0x1d8>
    157e:	89 36       	cpi	r24, 0x69	; 105
    1580:	31 f5       	brne	.+76     	; 0x15ce <vfprintf+0x224>
    1582:	f8 01       	movw	r30, r16
    1584:	27 ff       	sbrs	r18, 7
    1586:	07 c0       	rjmp	.+14     	; 0x1596 <vfprintf+0x1ec>
    1588:	60 81       	ld	r22, Z
    158a:	71 81       	ldd	r23, Z+1	; 0x01
    158c:	82 81       	ldd	r24, Z+2	; 0x02
    158e:	93 81       	ldd	r25, Z+3	; 0x03
    1590:	0c 5f       	subi	r16, 0xFC	; 252
    1592:	1f 4f       	sbci	r17, 0xFF	; 255
    1594:	08 c0       	rjmp	.+16     	; 0x15a6 <vfprintf+0x1fc>
    1596:	60 81       	ld	r22, Z
    1598:	71 81       	ldd	r23, Z+1	; 0x01
    159a:	07 2e       	mov	r0, r23
    159c:	00 0c       	add	r0, r0
    159e:	88 0b       	sbc	r24, r24
    15a0:	99 0b       	sbc	r25, r25
    15a2:	0e 5f       	subi	r16, 0xFE	; 254
    15a4:	1f 4f       	sbci	r17, 0xFF	; 255
    15a6:	2f 76       	andi	r18, 0x6F	; 111
    15a8:	72 2e       	mov	r7, r18
    15aa:	97 ff       	sbrs	r25, 7
    15ac:	09 c0       	rjmp	.+18     	; 0x15c0 <vfprintf+0x216>
    15ae:	90 95       	com	r25
    15b0:	80 95       	com	r24
    15b2:	70 95       	com	r23
    15b4:	61 95       	neg	r22
    15b6:	7f 4f       	sbci	r23, 0xFF	; 255
    15b8:	8f 4f       	sbci	r24, 0xFF	; 255
    15ba:	9f 4f       	sbci	r25, 0xFF	; 255
    15bc:	20 68       	ori	r18, 0x80	; 128
    15be:	72 2e       	mov	r7, r18
    15c0:	2a e0       	ldi	r18, 0x0A	; 10
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	a4 01       	movw	r20, r8
    15c6:	b3 d2       	rcall	.+1382   	; 0x1b2e <__ultoa_invert>
    15c8:	a8 2e       	mov	r10, r24
    15ca:	a8 18       	sub	r10, r8
    15cc:	43 c0       	rjmp	.+134    	; 0x1654 <vfprintf+0x2aa>
    15ce:	85 37       	cpi	r24, 0x75	; 117
    15d0:	29 f4       	brne	.+10     	; 0x15dc <vfprintf+0x232>
    15d2:	2f 7e       	andi	r18, 0xEF	; 239
    15d4:	b2 2e       	mov	r11, r18
    15d6:	2a e0       	ldi	r18, 0x0A	; 10
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	25 c0       	rjmp	.+74     	; 0x1626 <vfprintf+0x27c>
    15dc:	f2 2f       	mov	r31, r18
    15de:	f9 7f       	andi	r31, 0xF9	; 249
    15e0:	bf 2e       	mov	r11, r31
    15e2:	8f 36       	cpi	r24, 0x6F	; 111
    15e4:	c1 f0       	breq	.+48     	; 0x1616 <vfprintf+0x26c>
    15e6:	18 f4       	brcc	.+6      	; 0x15ee <vfprintf+0x244>
    15e8:	88 35       	cpi	r24, 0x58	; 88
    15ea:	79 f0       	breq	.+30     	; 0x160a <vfprintf+0x260>
    15ec:	ad c0       	rjmp	.+346    	; 0x1748 <vfprintf+0x39e>
    15ee:	80 37       	cpi	r24, 0x70	; 112
    15f0:	19 f0       	breq	.+6      	; 0x15f8 <vfprintf+0x24e>
    15f2:	88 37       	cpi	r24, 0x78	; 120
    15f4:	21 f0       	breq	.+8      	; 0x15fe <vfprintf+0x254>
    15f6:	a8 c0       	rjmp	.+336    	; 0x1748 <vfprintf+0x39e>
    15f8:	2f 2f       	mov	r18, r31
    15fa:	20 61       	ori	r18, 0x10	; 16
    15fc:	b2 2e       	mov	r11, r18
    15fe:	b4 fe       	sbrs	r11, 4
    1600:	0d c0       	rjmp	.+26     	; 0x161c <vfprintf+0x272>
    1602:	8b 2d       	mov	r24, r11
    1604:	84 60       	ori	r24, 0x04	; 4
    1606:	b8 2e       	mov	r11, r24
    1608:	09 c0       	rjmp	.+18     	; 0x161c <vfprintf+0x272>
    160a:	24 ff       	sbrs	r18, 4
    160c:	0a c0       	rjmp	.+20     	; 0x1622 <vfprintf+0x278>
    160e:	9f 2f       	mov	r25, r31
    1610:	96 60       	ori	r25, 0x06	; 6
    1612:	b9 2e       	mov	r11, r25
    1614:	06 c0       	rjmp	.+12     	; 0x1622 <vfprintf+0x278>
    1616:	28 e0       	ldi	r18, 0x08	; 8
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	05 c0       	rjmp	.+10     	; 0x1626 <vfprintf+0x27c>
    161c:	20 e1       	ldi	r18, 0x10	; 16
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <vfprintf+0x27c>
    1622:	20 e1       	ldi	r18, 0x10	; 16
    1624:	32 e0       	ldi	r19, 0x02	; 2
    1626:	f8 01       	movw	r30, r16
    1628:	b7 fe       	sbrs	r11, 7
    162a:	07 c0       	rjmp	.+14     	; 0x163a <vfprintf+0x290>
    162c:	60 81       	ld	r22, Z
    162e:	71 81       	ldd	r23, Z+1	; 0x01
    1630:	82 81       	ldd	r24, Z+2	; 0x02
    1632:	93 81       	ldd	r25, Z+3	; 0x03
    1634:	0c 5f       	subi	r16, 0xFC	; 252
    1636:	1f 4f       	sbci	r17, 0xFF	; 255
    1638:	06 c0       	rjmp	.+12     	; 0x1646 <vfprintf+0x29c>
    163a:	60 81       	ld	r22, Z
    163c:	71 81       	ldd	r23, Z+1	; 0x01
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	0e 5f       	subi	r16, 0xFE	; 254
    1644:	1f 4f       	sbci	r17, 0xFF	; 255
    1646:	a4 01       	movw	r20, r8
    1648:	72 d2       	rcall	.+1252   	; 0x1b2e <__ultoa_invert>
    164a:	a8 2e       	mov	r10, r24
    164c:	a8 18       	sub	r10, r8
    164e:	fb 2d       	mov	r31, r11
    1650:	ff 77       	andi	r31, 0x7F	; 127
    1652:	7f 2e       	mov	r7, r31
    1654:	76 fe       	sbrs	r7, 6
    1656:	0b c0       	rjmp	.+22     	; 0x166e <vfprintf+0x2c4>
    1658:	37 2d       	mov	r19, r7
    165a:	3e 7f       	andi	r19, 0xFE	; 254
    165c:	a5 14       	cp	r10, r5
    165e:	50 f4       	brcc	.+20     	; 0x1674 <vfprintf+0x2ca>
    1660:	74 fe       	sbrs	r7, 4
    1662:	0a c0       	rjmp	.+20     	; 0x1678 <vfprintf+0x2ce>
    1664:	72 fc       	sbrc	r7, 2
    1666:	08 c0       	rjmp	.+16     	; 0x1678 <vfprintf+0x2ce>
    1668:	37 2d       	mov	r19, r7
    166a:	3e 7e       	andi	r19, 0xEE	; 238
    166c:	05 c0       	rjmp	.+10     	; 0x1678 <vfprintf+0x2ce>
    166e:	ba 2c       	mov	r11, r10
    1670:	37 2d       	mov	r19, r7
    1672:	03 c0       	rjmp	.+6      	; 0x167a <vfprintf+0x2d0>
    1674:	ba 2c       	mov	r11, r10
    1676:	01 c0       	rjmp	.+2      	; 0x167a <vfprintf+0x2d0>
    1678:	b5 2c       	mov	r11, r5
    167a:	34 ff       	sbrs	r19, 4
    167c:	0d c0       	rjmp	.+26     	; 0x1698 <vfprintf+0x2ee>
    167e:	fe 01       	movw	r30, r28
    1680:	ea 0d       	add	r30, r10
    1682:	f1 1d       	adc	r31, r1
    1684:	80 81       	ld	r24, Z
    1686:	80 33       	cpi	r24, 0x30	; 48
    1688:	11 f4       	brne	.+4      	; 0x168e <vfprintf+0x2e4>
    168a:	39 7e       	andi	r19, 0xE9	; 233
    168c:	09 c0       	rjmp	.+18     	; 0x16a0 <vfprintf+0x2f6>
    168e:	32 ff       	sbrs	r19, 2
    1690:	06 c0       	rjmp	.+12     	; 0x169e <vfprintf+0x2f4>
    1692:	b3 94       	inc	r11
    1694:	b3 94       	inc	r11
    1696:	04 c0       	rjmp	.+8      	; 0x16a0 <vfprintf+0x2f6>
    1698:	83 2f       	mov	r24, r19
    169a:	86 78       	andi	r24, 0x86	; 134
    169c:	09 f0       	breq	.+2      	; 0x16a0 <vfprintf+0x2f6>
    169e:	b3 94       	inc	r11
    16a0:	33 fd       	sbrc	r19, 3
    16a2:	12 c0       	rjmp	.+36     	; 0x16c8 <vfprintf+0x31e>
    16a4:	30 ff       	sbrs	r19, 0
    16a6:	06 c0       	rjmp	.+12     	; 0x16b4 <vfprintf+0x30a>
    16a8:	5a 2c       	mov	r5, r10
    16aa:	b3 14       	cp	r11, r3
    16ac:	18 f4       	brcc	.+6      	; 0x16b4 <vfprintf+0x30a>
    16ae:	53 0c       	add	r5, r3
    16b0:	5b 18       	sub	r5, r11
    16b2:	b3 2c       	mov	r11, r3
    16b4:	b3 14       	cp	r11, r3
    16b6:	60 f4       	brcc	.+24     	; 0x16d0 <vfprintf+0x326>
    16b8:	b7 01       	movw	r22, r14
    16ba:	80 e2       	ldi	r24, 0x20	; 32
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	3c 87       	std	Y+12, r19	; 0x0c
    16c0:	fe d1       	rcall	.+1020   	; 0x1abe <fputc>
    16c2:	b3 94       	inc	r11
    16c4:	3c 85       	ldd	r19, Y+12	; 0x0c
    16c6:	f6 cf       	rjmp	.-20     	; 0x16b4 <vfprintf+0x30a>
    16c8:	b3 14       	cp	r11, r3
    16ca:	10 f4       	brcc	.+4      	; 0x16d0 <vfprintf+0x326>
    16cc:	3b 18       	sub	r3, r11
    16ce:	01 c0       	rjmp	.+2      	; 0x16d2 <vfprintf+0x328>
    16d0:	31 2c       	mov	r3, r1
    16d2:	34 ff       	sbrs	r19, 4
    16d4:	11 c0       	rjmp	.+34     	; 0x16f8 <vfprintf+0x34e>
    16d6:	b7 01       	movw	r22, r14
    16d8:	80 e3       	ldi	r24, 0x30	; 48
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	3c 87       	std	Y+12, r19	; 0x0c
    16de:	ef d1       	rcall	.+990    	; 0x1abe <fputc>
    16e0:	3c 85       	ldd	r19, Y+12	; 0x0c
    16e2:	32 ff       	sbrs	r19, 2
    16e4:	16 c0       	rjmp	.+44     	; 0x1712 <vfprintf+0x368>
    16e6:	31 fd       	sbrc	r19, 1
    16e8:	03 c0       	rjmp	.+6      	; 0x16f0 <vfprintf+0x346>
    16ea:	88 e7       	ldi	r24, 0x78	; 120
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <vfprintf+0x34a>
    16f0:	88 e5       	ldi	r24, 0x58	; 88
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	b7 01       	movw	r22, r14
    16f6:	0c c0       	rjmp	.+24     	; 0x1710 <vfprintf+0x366>
    16f8:	83 2f       	mov	r24, r19
    16fa:	86 78       	andi	r24, 0x86	; 134
    16fc:	51 f0       	breq	.+20     	; 0x1712 <vfprintf+0x368>
    16fe:	31 ff       	sbrs	r19, 1
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <vfprintf+0x35c>
    1702:	8b e2       	ldi	r24, 0x2B	; 43
    1704:	01 c0       	rjmp	.+2      	; 0x1708 <vfprintf+0x35e>
    1706:	80 e2       	ldi	r24, 0x20	; 32
    1708:	37 fd       	sbrc	r19, 7
    170a:	8d e2       	ldi	r24, 0x2D	; 45
    170c:	b7 01       	movw	r22, r14
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	d6 d1       	rcall	.+940    	; 0x1abe <fputc>
    1712:	a5 14       	cp	r10, r5
    1714:	30 f4       	brcc	.+12     	; 0x1722 <vfprintf+0x378>
    1716:	b7 01       	movw	r22, r14
    1718:	80 e3       	ldi	r24, 0x30	; 48
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	d0 d1       	rcall	.+928    	; 0x1abe <fputc>
    171e:	5a 94       	dec	r5
    1720:	f8 cf       	rjmp	.-16     	; 0x1712 <vfprintf+0x368>
    1722:	aa 94       	dec	r10
    1724:	f4 01       	movw	r30, r8
    1726:	ea 0d       	add	r30, r10
    1728:	f1 1d       	adc	r31, r1
    172a:	80 81       	ld	r24, Z
    172c:	b7 01       	movw	r22, r14
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	c6 d1       	rcall	.+908    	; 0x1abe <fputc>
    1732:	a1 10       	cpse	r10, r1
    1734:	f6 cf       	rjmp	.-20     	; 0x1722 <vfprintf+0x378>
    1736:	33 20       	and	r3, r3
    1738:	09 f4       	brne	.+2      	; 0x173c <vfprintf+0x392>
    173a:	5d ce       	rjmp	.-838    	; 0x13f6 <vfprintf+0x4c>
    173c:	b7 01       	movw	r22, r14
    173e:	80 e2       	ldi	r24, 0x20	; 32
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	bd d1       	rcall	.+890    	; 0x1abe <fputc>
    1744:	3a 94       	dec	r3
    1746:	f7 cf       	rjmp	.-18     	; 0x1736 <vfprintf+0x38c>
    1748:	f7 01       	movw	r30, r14
    174a:	86 81       	ldd	r24, Z+6	; 0x06
    174c:	97 81       	ldd	r25, Z+7	; 0x07
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <vfprintf+0x3aa>
    1750:	8f ef       	ldi	r24, 0xFF	; 255
    1752:	9f ef       	ldi	r25, 0xFF	; 255
    1754:	2c 96       	adiw	r28, 0x0c	; 12
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	1f 91       	pop	r17
    1766:	0f 91       	pop	r16
    1768:	ff 90       	pop	r15
    176a:	ef 90       	pop	r14
    176c:	df 90       	pop	r13
    176e:	cf 90       	pop	r12
    1770:	bf 90       	pop	r11
    1772:	af 90       	pop	r10
    1774:	9f 90       	pop	r9
    1776:	8f 90       	pop	r8
    1778:	7f 90       	pop	r7
    177a:	6f 90       	pop	r6
    177c:	5f 90       	pop	r5
    177e:	4f 90       	pop	r4
    1780:	3f 90       	pop	r3
    1782:	2f 90       	pop	r2
    1784:	08 95       	ret

00001786 <strtod>:
    1786:	6f 92       	push	r6
    1788:	7f 92       	push	r7
    178a:	8f 92       	push	r8
    178c:	9f 92       	push	r9
    178e:	af 92       	push	r10
    1790:	bf 92       	push	r11
    1792:	cf 92       	push	r12
    1794:	df 92       	push	r13
    1796:	ef 92       	push	r14
    1798:	ff 92       	push	r15
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	ec 01       	movw	r28, r24
    17a4:	7b 01       	movw	r14, r22
    17a6:	61 15       	cp	r22, r1
    17a8:	71 05       	cpc	r23, r1
    17aa:	19 f0       	breq	.+6      	; 0x17b2 <strtod+0x2c>
    17ac:	db 01       	movw	r26, r22
    17ae:	8d 93       	st	X+, r24
    17b0:	9c 93       	st	X, r25
    17b2:	8e 01       	movw	r16, r28
    17b4:	0f 5f       	subi	r16, 0xFF	; 255
    17b6:	1f 4f       	sbci	r17, 0xFF	; 255
    17b8:	78 80       	ld	r7, Y
    17ba:	87 2d       	mov	r24, r7
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	49 d1       	rcall	.+658    	; 0x1a52 <isspace>
    17c0:	89 2b       	or	r24, r25
    17c2:	11 f0       	breq	.+4      	; 0x17c8 <strtod+0x42>
    17c4:	e8 01       	movw	r28, r16
    17c6:	f5 cf       	rjmp	.-22     	; 0x17b2 <strtod+0x2c>
    17c8:	bd e2       	ldi	r27, 0x2D	; 45
    17ca:	7b 12       	cpse	r7, r27
    17cc:	05 c0       	rjmp	.+10     	; 0x17d8 <strtod+0x52>
    17ce:	0f 5f       	subi	r16, 0xFF	; 255
    17d0:	1f 4f       	sbci	r17, 0xFF	; 255
    17d2:	79 80       	ldd	r7, Y+1	; 0x01
    17d4:	c1 e0       	ldi	r28, 0x01	; 1
    17d6:	08 c0       	rjmp	.+16     	; 0x17e8 <strtod+0x62>
    17d8:	eb e2       	ldi	r30, 0x2B	; 43
    17da:	7e 12       	cpse	r7, r30
    17dc:	04 c0       	rjmp	.+8      	; 0x17e6 <strtod+0x60>
    17de:	8e 01       	movw	r16, r28
    17e0:	0e 5f       	subi	r16, 0xFE	; 254
    17e2:	1f 4f       	sbci	r17, 0xFF	; 255
    17e4:	79 80       	ldd	r7, Y+1	; 0x01
    17e6:	c0 e0       	ldi	r28, 0x00	; 0
    17e8:	68 01       	movw	r12, r16
    17ea:	f1 e0       	ldi	r31, 0x01	; 1
    17ec:	cf 1a       	sub	r12, r31
    17ee:	d1 08       	sbc	r13, r1
    17f0:	43 e0       	ldi	r20, 0x03	; 3
    17f2:	50 e0       	ldi	r21, 0x00	; 0
    17f4:	64 e9       	ldi	r22, 0x94	; 148
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	c6 01       	movw	r24, r12
    17fa:	33 d1       	rcall	.+614    	; 0x1a62 <strncasecmp_P>
    17fc:	89 2b       	or	r24, r25
    17fe:	e9 f4       	brne	.+58     	; 0x183a <strtod+0xb4>
    1800:	68 01       	movw	r12, r16
    1802:	22 e0       	ldi	r18, 0x02	; 2
    1804:	c2 0e       	add	r12, r18
    1806:	d1 1c       	adc	r13, r1
    1808:	45 e0       	ldi	r20, 0x05	; 5
    180a:	50 e0       	ldi	r21, 0x00	; 0
    180c:	6f e8       	ldi	r22, 0x8F	; 143
    180e:	70 e0       	ldi	r23, 0x00	; 0
    1810:	c6 01       	movw	r24, r12
    1812:	27 d1       	rcall	.+590    	; 0x1a62 <strncasecmp_P>
    1814:	89 2b       	or	r24, r25
    1816:	21 f4       	brne	.+8      	; 0x1820 <strtod+0x9a>
    1818:	68 01       	movw	r12, r16
    181a:	87 e0       	ldi	r24, 0x07	; 7
    181c:	c8 0e       	add	r12, r24
    181e:	d1 1c       	adc	r13, r1
    1820:	e1 14       	cp	r14, r1
    1822:	f1 04       	cpc	r15, r1
    1824:	19 f0       	breq	.+6      	; 0x182c <strtod+0xa6>
    1826:	d7 01       	movw	r26, r14
    1828:	cd 92       	st	X+, r12
    182a:	dc 92       	st	X, r13
    182c:	c1 11       	cpse	r28, r1
    182e:	f9 c0       	rjmp	.+498    	; 0x1a22 <strtod+0x29c>
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	70 e0       	ldi	r23, 0x00	; 0
    1834:	80 e8       	ldi	r24, 0x80	; 128
    1836:	9f e7       	ldi	r25, 0x7F	; 127
    1838:	fd c0       	rjmp	.+506    	; 0x1a34 <strtod+0x2ae>
    183a:	43 e0       	ldi	r20, 0x03	; 3
    183c:	50 e0       	ldi	r21, 0x00	; 0
    183e:	6c e8       	ldi	r22, 0x8C	; 140
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	c6 01       	movw	r24, r12
    1844:	0e d1       	rcall	.+540    	; 0x1a62 <strncasecmp_P>
    1846:	89 2b       	or	r24, r25
    1848:	51 f4       	brne	.+20     	; 0x185e <strtod+0xd8>
    184a:	e1 14       	cp	r14, r1
    184c:	f1 04       	cpc	r15, r1
    184e:	09 f4       	brne	.+2      	; 0x1852 <strtod+0xcc>
    1850:	ed c0       	rjmp	.+474    	; 0x1a2c <strtod+0x2a6>
    1852:	0e 5f       	subi	r16, 0xFE	; 254
    1854:	1f 4f       	sbci	r17, 0xFF	; 255
    1856:	f7 01       	movw	r30, r14
    1858:	11 83       	std	Z+1, r17	; 0x01
    185a:	00 83       	st	Z, r16
    185c:	e7 c0       	rjmp	.+462    	; 0x1a2c <strtod+0x2a6>
    185e:	68 01       	movw	r12, r16
    1860:	60 e0       	ldi	r22, 0x00	; 0
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	cb 01       	movw	r24, r22
    1866:	00 e0       	ldi	r16, 0x00	; 0
    1868:	10 e0       	ldi	r17, 0x00	; 0
    186a:	f6 01       	movw	r30, r12
    186c:	d0 ed       	ldi	r29, 0xD0	; 208
    186e:	d7 0d       	add	r29, r7
    1870:	da 30       	cpi	r29, 0x0A	; 10
    1872:	50 f5       	brcc	.+84     	; 0x18c8 <strtod+0x142>
    1874:	2c 2f       	mov	r18, r28
    1876:	22 60       	ori	r18, 0x02	; 2
    1878:	62 2e       	mov	r6, r18
    187a:	2c 2f       	mov	r18, r28
    187c:	28 70       	andi	r18, 0x08	; 8
    187e:	c2 ff       	sbrs	r28, 2
    1880:	05 c0       	rjmp	.+10     	; 0x188c <strtod+0x106>
    1882:	21 11       	cpse	r18, r1
    1884:	27 c0       	rjmp	.+78     	; 0x18d4 <strtod+0x14e>
    1886:	0f 5f       	subi	r16, 0xFF	; 255
    1888:	1f 4f       	sbci	r17, 0xFF	; 255
    188a:	24 c0       	rjmp	.+72     	; 0x18d4 <strtod+0x14e>
    188c:	22 23       	and	r18, r18
    188e:	11 f0       	breq	.+4      	; 0x1894 <strtod+0x10e>
    1890:	01 50       	subi	r16, 0x01	; 1
    1892:	11 09       	sbc	r17, r1
    1894:	a5 e0       	ldi	r26, 0x05	; 5
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	9b 01       	movw	r18, r22
    189a:	ac 01       	movw	r20, r24
    189c:	c9 d1       	rcall	.+914    	; 0x1c30 <__muluhisi3>
    189e:	4b 01       	movw	r8, r22
    18a0:	5c 01       	movw	r10, r24
    18a2:	88 0c       	add	r8, r8
    18a4:	99 1c       	adc	r9, r9
    18a6:	aa 1c       	adc	r10, r10
    18a8:	bb 1c       	adc	r11, r11
    18aa:	c5 01       	movw	r24, r10
    18ac:	b4 01       	movw	r22, r8
    18ae:	6d 0f       	add	r22, r29
    18b0:	71 1d       	adc	r23, r1
    18b2:	81 1d       	adc	r24, r1
    18b4:	91 1d       	adc	r25, r1
    18b6:	68 39       	cpi	r22, 0x98	; 152
    18b8:	a9 e9       	ldi	r26, 0x99	; 153
    18ba:	7a 07       	cpc	r23, r26
    18bc:	8a 07       	cpc	r24, r26
    18be:	a9 e1       	ldi	r26, 0x19	; 25
    18c0:	9a 07       	cpc	r25, r26
    18c2:	40 f0       	brcs	.+16     	; 0x18d4 <strtod+0x14e>
    18c4:	c6 60       	ori	r28, 0x06	; 6
    18c6:	05 c0       	rjmp	.+10     	; 0x18d2 <strtod+0x14c>
    18c8:	de 3f       	cpi	r29, 0xFE	; 254
    18ca:	51 f4       	brne	.+20     	; 0x18e0 <strtod+0x15a>
    18cc:	c3 fd       	sbrc	r28, 3
    18ce:	44 c0       	rjmp	.+136    	; 0x1958 <strtod+0x1d2>
    18d0:	c8 60       	ori	r28, 0x08	; 8
    18d2:	6c 2e       	mov	r6, r28
    18d4:	bf ef       	ldi	r27, 0xFF	; 255
    18d6:	cb 1a       	sub	r12, r27
    18d8:	db 0a       	sbc	r13, r27
    18da:	70 80       	ld	r7, Z
    18dc:	c6 2d       	mov	r28, r6
    18de:	c5 cf       	rjmp	.-118    	; 0x186a <strtod+0xe4>
    18e0:	2d 2f       	mov	r18, r29
    18e2:	2f 7d       	andi	r18, 0xDF	; 223
    18e4:	25 31       	cpi	r18, 0x15	; 21
    18e6:	c1 f5       	brne	.+112    	; 0x1958 <strtod+0x1d2>
    18e8:	40 81       	ld	r20, Z
    18ea:	4d 32       	cpi	r20, 0x2D	; 45
    18ec:	11 f4       	brne	.+4      	; 0x18f2 <strtod+0x16c>
    18ee:	c0 61       	ori	r28, 0x10	; 16
    18f0:	06 c0       	rjmp	.+12     	; 0x18fe <strtod+0x178>
    18f2:	4b 32       	cpi	r20, 0x2B	; 43
    18f4:	21 f0       	breq	.+8      	; 0x18fe <strtod+0x178>
    18f6:	31 96       	adiw	r30, 0x01	; 1
    18f8:	21 e0       	ldi	r18, 0x01	; 1
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	06 c0       	rjmp	.+12     	; 0x190a <strtod+0x184>
    18fe:	32 96       	adiw	r30, 0x02	; 2
    1900:	d6 01       	movw	r26, r12
    1902:	11 96       	adiw	r26, 0x01	; 1
    1904:	4c 91       	ld	r20, X
    1906:	22 e0       	ldi	r18, 0x02	; 2
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	a0 ed       	ldi	r26, 0xD0	; 208
    190c:	a4 0f       	add	r26, r20
    190e:	aa 30       	cpi	r26, 0x0A	; 10
    1910:	18 f0       	brcs	.+6      	; 0x1918 <strtod+0x192>
    1912:	e2 1b       	sub	r30, r18
    1914:	f3 0b       	sbc	r31, r19
    1916:	20 c0       	rjmp	.+64     	; 0x1958 <strtod+0x1d2>
    1918:	40 e0       	ldi	r20, 0x00	; 0
    191a:	50 e0       	ldi	r21, 0x00	; 0
    191c:	40 38       	cpi	r20, 0x80	; 128
    191e:	bc e0       	ldi	r27, 0x0C	; 12
    1920:	5b 07       	cpc	r21, r27
    1922:	5c f4       	brge	.+22     	; 0x193a <strtod+0x1b4>
    1924:	9a 01       	movw	r18, r20
    1926:	22 0f       	add	r18, r18
    1928:	33 1f       	adc	r19, r19
    192a:	22 0f       	add	r18, r18
    192c:	33 1f       	adc	r19, r19
    192e:	42 0f       	add	r20, r18
    1930:	53 1f       	adc	r21, r19
    1932:	44 0f       	add	r20, r20
    1934:	55 1f       	adc	r21, r21
    1936:	4a 0f       	add	r20, r26
    1938:	51 1d       	adc	r21, r1
    193a:	31 96       	adiw	r30, 0x01	; 1
    193c:	df 01       	movw	r26, r30
    193e:	11 97       	sbiw	r26, 0x01	; 1
    1940:	2c 91       	ld	r18, X
    1942:	a0 ed       	ldi	r26, 0xD0	; 208
    1944:	a2 0f       	add	r26, r18
    1946:	aa 30       	cpi	r26, 0x0A	; 10
    1948:	48 f3       	brcs	.-46     	; 0x191c <strtod+0x196>
    194a:	c4 ff       	sbrs	r28, 4
    194c:	03 c0       	rjmp	.+6      	; 0x1954 <strtod+0x1ce>
    194e:	51 95       	neg	r21
    1950:	41 95       	neg	r20
    1952:	51 09       	sbc	r21, r1
    1954:	04 0f       	add	r16, r20
    1956:	15 1f       	adc	r17, r21
    1958:	c1 ff       	sbrs	r28, 1
    195a:	07 c0       	rjmp	.+14     	; 0x196a <strtod+0x1e4>
    195c:	e1 14       	cp	r14, r1
    195e:	f1 04       	cpc	r15, r1
    1960:	21 f0       	breq	.+8      	; 0x196a <strtod+0x1e4>
    1962:	31 97       	sbiw	r30, 0x01	; 1
    1964:	d7 01       	movw	r26, r14
    1966:	ed 93       	st	X+, r30
    1968:	fc 93       	st	X, r31
    196a:	ee d9       	rcall	.-3108   	; 0xd48 <__floatunsisf>
    196c:	c3 70       	andi	r28, 0x03	; 3
    196e:	c3 30       	cpi	r28, 0x03	; 3
    1970:	19 f0       	breq	.+6      	; 0x1978 <strtod+0x1f2>
    1972:	6b 01       	movw	r12, r22
    1974:	7c 01       	movw	r14, r24
    1976:	06 c0       	rjmp	.+12     	; 0x1984 <strtod+0x1fe>
    1978:	6b 01       	movw	r12, r22
    197a:	7c 01       	movw	r14, r24
    197c:	f7 fa       	bst	r15, 7
    197e:	f0 94       	com	r15
    1980:	f7 f8       	bld	r15, 7
    1982:	f0 94       	com	r15
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	a9 01       	movw	r20, r18
    198a:	c7 01       	movw	r24, r14
    198c:	b6 01       	movw	r22, r12
    198e:	2d d1       	rcall	.+602    	; 0x1bea <__cmpsf2>
    1990:	88 23       	and	r24, r24
    1992:	09 f4       	brne	.+2      	; 0x1996 <strtod+0x210>
    1994:	43 c0       	rjmp	.+134    	; 0x1a1c <strtod+0x296>
    1996:	17 ff       	sbrs	r17, 7
    1998:	06 c0       	rjmp	.+12     	; 0x19a6 <strtod+0x220>
    199a:	11 95       	neg	r17
    199c:	01 95       	neg	r16
    199e:	11 09       	sbc	r17, r1
    19a0:	cb ea       	ldi	r28, 0xAB	; 171
    19a2:	d0 e0       	ldi	r29, 0x00	; 0
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <strtod+0x224>
    19a6:	c3 ec       	ldi	r28, 0xC3	; 195
    19a8:	d0 e0       	ldi	r29, 0x00	; 0
    19aa:	5e 01       	movw	r10, r28
    19ac:	b8 e1       	ldi	r27, 0x18	; 24
    19ae:	ab 1a       	sub	r10, r27
    19b0:	b1 08       	sbc	r11, r1
    19b2:	46 01       	movw	r8, r12
    19b4:	be 2d       	mov	r27, r14
    19b6:	af 2d       	mov	r26, r15
    19b8:	90 e2       	ldi	r25, 0x20	; 32
    19ba:	e9 2e       	mov	r14, r25
    19bc:	f1 2c       	mov	r15, r1
    19be:	0e 15       	cp	r16, r14
    19c0:	1f 05       	cpc	r17, r15
    19c2:	7c f0       	brlt	.+30     	; 0x19e2 <strtod+0x25c>
    19c4:	fe 01       	movw	r30, r28
    19c6:	25 91       	lpm	r18, Z+
    19c8:	35 91       	lpm	r19, Z+
    19ca:	45 91       	lpm	r20, Z+
    19cc:	54 91       	lpm	r21, Z
    19ce:	b4 01       	movw	r22, r8
    19d0:	8b 2f       	mov	r24, r27
    19d2:	9a 2f       	mov	r25, r26
    19d4:	47 da       	rcall	.-2930   	; 0xe64 <__mulsf3>
    19d6:	4b 01       	movw	r8, r22
    19d8:	b8 2f       	mov	r27, r24
    19da:	a9 2f       	mov	r26, r25
    19dc:	0e 19       	sub	r16, r14
    19de:	1f 09       	sbc	r17, r15
    19e0:	ee cf       	rjmp	.-36     	; 0x19be <strtod+0x238>
    19e2:	24 97       	sbiw	r28, 0x04	; 4
    19e4:	f5 94       	asr	r15
    19e6:	e7 94       	ror	r14
    19e8:	ca 15       	cp	r28, r10
    19ea:	db 05       	cpc	r29, r11
    19ec:	41 f7       	brne	.-48     	; 0x19be <strtod+0x238>
    19ee:	64 01       	movw	r12, r8
    19f0:	eb 2e       	mov	r14, r27
    19f2:	fa 2e       	mov	r15, r26
    19f4:	8e 2d       	mov	r24, r14
    19f6:	88 0f       	add	r24, r24
    19f8:	8f 2d       	mov	r24, r15
    19fa:	88 1f       	adc	r24, r24
    19fc:	8f 3f       	cpi	r24, 0xFF	; 255
    19fe:	41 f0       	breq	.+16     	; 0x1a10 <strtod+0x28a>
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	a9 01       	movw	r20, r18
    1a06:	c7 01       	movw	r24, r14
    1a08:	b6 01       	movw	r22, r12
    1a0a:	ef d0       	rcall	.+478    	; 0x1bea <__cmpsf2>
    1a0c:	81 11       	cpse	r24, r1
    1a0e:	06 c0       	rjmp	.+12     	; 0x1a1c <strtod+0x296>
    1a10:	82 e2       	ldi	r24, 0x22	; 34
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <errno+0x1>
    1a18:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <errno>
    1a1c:	c7 01       	movw	r24, r14
    1a1e:	b6 01       	movw	r22, r12
    1a20:	09 c0       	rjmp	.+18     	; 0x1a34 <strtod+0x2ae>
    1a22:	60 e0       	ldi	r22, 0x00	; 0
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	80 e8       	ldi	r24, 0x80	; 128
    1a28:	9f ef       	ldi	r25, 0xFF	; 255
    1a2a:	04 c0       	rjmp	.+8      	; 0x1a34 <strtod+0x2ae>
    1a2c:	60 e0       	ldi	r22, 0x00	; 0
    1a2e:	70 e0       	ldi	r23, 0x00	; 0
    1a30:	80 ec       	ldi	r24, 0xC0	; 192
    1a32:	9f e7       	ldi	r25, 0x7F	; 127
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	1f 91       	pop	r17
    1a3a:	0f 91       	pop	r16
    1a3c:	ff 90       	pop	r15
    1a3e:	ef 90       	pop	r14
    1a40:	df 90       	pop	r13
    1a42:	cf 90       	pop	r12
    1a44:	bf 90       	pop	r11
    1a46:	af 90       	pop	r10
    1a48:	9f 90       	pop	r9
    1a4a:	8f 90       	pop	r8
    1a4c:	7f 90       	pop	r7
    1a4e:	6f 90       	pop	r6
    1a50:	08 95       	ret

00001a52 <isspace>:
    1a52:	91 11       	cpse	r25, r1
    1a54:	ce c0       	rjmp	.+412    	; 0x1bf2 <__ctype_isfalse>
    1a56:	80 32       	cpi	r24, 0x20	; 32
    1a58:	19 f0       	breq	.+6      	; 0x1a60 <isspace+0xe>
    1a5a:	89 50       	subi	r24, 0x09	; 9
    1a5c:	85 50       	subi	r24, 0x05	; 5
    1a5e:	d0 f7       	brcc	.-12     	; 0x1a54 <isspace+0x2>
    1a60:	08 95       	ret

00001a62 <strncasecmp_P>:
    1a62:	fb 01       	movw	r30, r22
    1a64:	dc 01       	movw	r26, r24
    1a66:	41 50       	subi	r20, 0x01	; 1
    1a68:	50 40       	sbci	r21, 0x00	; 0
    1a6a:	88 f0       	brcs	.+34     	; 0x1a8e <strncasecmp_P+0x2c>
    1a6c:	8d 91       	ld	r24, X+
    1a6e:	81 34       	cpi	r24, 0x41	; 65
    1a70:	1c f0       	brlt	.+6      	; 0x1a78 <strncasecmp_P+0x16>
    1a72:	8b 35       	cpi	r24, 0x5B	; 91
    1a74:	0c f4       	brge	.+2      	; 0x1a78 <strncasecmp_P+0x16>
    1a76:	80 5e       	subi	r24, 0xE0	; 224
    1a78:	65 91       	lpm	r22, Z+
    1a7a:	61 34       	cpi	r22, 0x41	; 65
    1a7c:	1c f0       	brlt	.+6      	; 0x1a84 <strncasecmp_P+0x22>
    1a7e:	6b 35       	cpi	r22, 0x5B	; 91
    1a80:	0c f4       	brge	.+2      	; 0x1a84 <strncasecmp_P+0x22>
    1a82:	60 5e       	subi	r22, 0xE0	; 224
    1a84:	86 1b       	sub	r24, r22
    1a86:	61 11       	cpse	r22, r1
    1a88:	71 f3       	breq	.-36     	; 0x1a66 <strncasecmp_P+0x4>
    1a8a:	99 0b       	sbc	r25, r25
    1a8c:	08 95       	ret
    1a8e:	88 1b       	sub	r24, r24
    1a90:	fc cf       	rjmp	.-8      	; 0x1a8a <strncasecmp_P+0x28>

00001a92 <strnlen_P>:
    1a92:	fc 01       	movw	r30, r24
    1a94:	05 90       	lpm	r0, Z+
    1a96:	61 50       	subi	r22, 0x01	; 1
    1a98:	70 40       	sbci	r23, 0x00	; 0
    1a9a:	01 10       	cpse	r0, r1
    1a9c:	d8 f7       	brcc	.-10     	; 0x1a94 <strnlen_P+0x2>
    1a9e:	80 95       	com	r24
    1aa0:	90 95       	com	r25
    1aa2:	8e 0f       	add	r24, r30
    1aa4:	9f 1f       	adc	r25, r31
    1aa6:	08 95       	ret

00001aa8 <strnlen>:
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	61 50       	subi	r22, 0x01	; 1
    1aac:	70 40       	sbci	r23, 0x00	; 0
    1aae:	01 90       	ld	r0, Z+
    1ab0:	01 10       	cpse	r0, r1
    1ab2:	d8 f7       	brcc	.-10     	; 0x1aaa <strnlen+0x2>
    1ab4:	80 95       	com	r24
    1ab6:	90 95       	com	r25
    1ab8:	8e 0f       	add	r24, r30
    1aba:	9f 1f       	adc	r25, r31
    1abc:	08 95       	ret

00001abe <fputc>:
    1abe:	0f 93       	push	r16
    1ac0:	1f 93       	push	r17
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	fb 01       	movw	r30, r22
    1ac8:	23 81       	ldd	r18, Z+3	; 0x03
    1aca:	21 fd       	sbrc	r18, 1
    1acc:	03 c0       	rjmp	.+6      	; 0x1ad4 <fputc+0x16>
    1ace:	8f ef       	ldi	r24, 0xFF	; 255
    1ad0:	9f ef       	ldi	r25, 0xFF	; 255
    1ad2:	28 c0       	rjmp	.+80     	; 0x1b24 <fputc+0x66>
    1ad4:	22 ff       	sbrs	r18, 2
    1ad6:	16 c0       	rjmp	.+44     	; 0x1b04 <fputc+0x46>
    1ad8:	46 81       	ldd	r20, Z+6	; 0x06
    1ada:	57 81       	ldd	r21, Z+7	; 0x07
    1adc:	24 81       	ldd	r18, Z+4	; 0x04
    1ade:	35 81       	ldd	r19, Z+5	; 0x05
    1ae0:	42 17       	cp	r20, r18
    1ae2:	53 07       	cpc	r21, r19
    1ae4:	44 f4       	brge	.+16     	; 0x1af6 <fputc+0x38>
    1ae6:	a0 81       	ld	r26, Z
    1ae8:	b1 81       	ldd	r27, Z+1	; 0x01
    1aea:	9d 01       	movw	r18, r26
    1aec:	2f 5f       	subi	r18, 0xFF	; 255
    1aee:	3f 4f       	sbci	r19, 0xFF	; 255
    1af0:	31 83       	std	Z+1, r19	; 0x01
    1af2:	20 83       	st	Z, r18
    1af4:	8c 93       	st	X, r24
    1af6:	26 81       	ldd	r18, Z+6	; 0x06
    1af8:	37 81       	ldd	r19, Z+7	; 0x07
    1afa:	2f 5f       	subi	r18, 0xFF	; 255
    1afc:	3f 4f       	sbci	r19, 0xFF	; 255
    1afe:	37 83       	std	Z+7, r19	; 0x07
    1b00:	26 83       	std	Z+6, r18	; 0x06
    1b02:	10 c0       	rjmp	.+32     	; 0x1b24 <fputc+0x66>
    1b04:	eb 01       	movw	r28, r22
    1b06:	09 2f       	mov	r16, r25
    1b08:	18 2f       	mov	r17, r24
    1b0a:	00 84       	ldd	r0, Z+8	; 0x08
    1b0c:	f1 85       	ldd	r31, Z+9	; 0x09
    1b0e:	e0 2d       	mov	r30, r0
    1b10:	09 95       	icall
    1b12:	89 2b       	or	r24, r25
    1b14:	e1 f6       	brne	.-72     	; 0x1ace <fputc+0x10>
    1b16:	8e 81       	ldd	r24, Y+6	; 0x06
    1b18:	9f 81       	ldd	r25, Y+7	; 0x07
    1b1a:	01 96       	adiw	r24, 0x01	; 1
    1b1c:	9f 83       	std	Y+7, r25	; 0x07
    1b1e:	8e 83       	std	Y+6, r24	; 0x06
    1b20:	81 2f       	mov	r24, r17
    1b22:	90 2f       	mov	r25, r16
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	1f 91       	pop	r17
    1b2a:	0f 91       	pop	r16
    1b2c:	08 95       	ret

00001b2e <__ultoa_invert>:
    1b2e:	fa 01       	movw	r30, r20
    1b30:	aa 27       	eor	r26, r26
    1b32:	28 30       	cpi	r18, 0x08	; 8
    1b34:	51 f1       	breq	.+84     	; 0x1b8a <__ultoa_invert+0x5c>
    1b36:	20 31       	cpi	r18, 0x10	; 16
    1b38:	81 f1       	breq	.+96     	; 0x1b9a <__ultoa_invert+0x6c>
    1b3a:	e8 94       	clt
    1b3c:	6f 93       	push	r22
    1b3e:	6e 7f       	andi	r22, 0xFE	; 254
    1b40:	6e 5f       	subi	r22, 0xFE	; 254
    1b42:	7f 4f       	sbci	r23, 0xFF	; 255
    1b44:	8f 4f       	sbci	r24, 0xFF	; 255
    1b46:	9f 4f       	sbci	r25, 0xFF	; 255
    1b48:	af 4f       	sbci	r26, 0xFF	; 255
    1b4a:	b1 e0       	ldi	r27, 0x01	; 1
    1b4c:	3e d0       	rcall	.+124    	; 0x1bca <__ultoa_invert+0x9c>
    1b4e:	b4 e0       	ldi	r27, 0x04	; 4
    1b50:	3c d0       	rcall	.+120    	; 0x1bca <__ultoa_invert+0x9c>
    1b52:	67 0f       	add	r22, r23
    1b54:	78 1f       	adc	r23, r24
    1b56:	89 1f       	adc	r24, r25
    1b58:	9a 1f       	adc	r25, r26
    1b5a:	a1 1d       	adc	r26, r1
    1b5c:	68 0f       	add	r22, r24
    1b5e:	79 1f       	adc	r23, r25
    1b60:	8a 1f       	adc	r24, r26
    1b62:	91 1d       	adc	r25, r1
    1b64:	a1 1d       	adc	r26, r1
    1b66:	6a 0f       	add	r22, r26
    1b68:	71 1d       	adc	r23, r1
    1b6a:	81 1d       	adc	r24, r1
    1b6c:	91 1d       	adc	r25, r1
    1b6e:	a1 1d       	adc	r26, r1
    1b70:	20 d0       	rcall	.+64     	; 0x1bb2 <__ultoa_invert+0x84>
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <__ultoa_invert+0x48>
    1b74:	68 94       	set
    1b76:	3f 91       	pop	r19
    1b78:	2a e0       	ldi	r18, 0x0A	; 10
    1b7a:	26 9f       	mul	r18, r22
    1b7c:	11 24       	eor	r1, r1
    1b7e:	30 19       	sub	r19, r0
    1b80:	30 5d       	subi	r19, 0xD0	; 208
    1b82:	31 93       	st	Z+, r19
    1b84:	de f6       	brtc	.-74     	; 0x1b3c <__ultoa_invert+0xe>
    1b86:	cf 01       	movw	r24, r30
    1b88:	08 95       	ret
    1b8a:	46 2f       	mov	r20, r22
    1b8c:	47 70       	andi	r20, 0x07	; 7
    1b8e:	40 5d       	subi	r20, 0xD0	; 208
    1b90:	41 93       	st	Z+, r20
    1b92:	b3 e0       	ldi	r27, 0x03	; 3
    1b94:	0f d0       	rcall	.+30     	; 0x1bb4 <__ultoa_invert+0x86>
    1b96:	c9 f7       	brne	.-14     	; 0x1b8a <__ultoa_invert+0x5c>
    1b98:	f6 cf       	rjmp	.-20     	; 0x1b86 <__ultoa_invert+0x58>
    1b9a:	46 2f       	mov	r20, r22
    1b9c:	4f 70       	andi	r20, 0x0F	; 15
    1b9e:	40 5d       	subi	r20, 0xD0	; 208
    1ba0:	4a 33       	cpi	r20, 0x3A	; 58
    1ba2:	18 f0       	brcs	.+6      	; 0x1baa <__ultoa_invert+0x7c>
    1ba4:	49 5d       	subi	r20, 0xD9	; 217
    1ba6:	31 fd       	sbrc	r19, 1
    1ba8:	40 52       	subi	r20, 0x20	; 32
    1baa:	41 93       	st	Z+, r20
    1bac:	02 d0       	rcall	.+4      	; 0x1bb2 <__ultoa_invert+0x84>
    1bae:	a9 f7       	brne	.-22     	; 0x1b9a <__ultoa_invert+0x6c>
    1bb0:	ea cf       	rjmp	.-44     	; 0x1b86 <__ultoa_invert+0x58>
    1bb2:	b4 e0       	ldi	r27, 0x04	; 4
    1bb4:	a6 95       	lsr	r26
    1bb6:	97 95       	ror	r25
    1bb8:	87 95       	ror	r24
    1bba:	77 95       	ror	r23
    1bbc:	67 95       	ror	r22
    1bbe:	ba 95       	dec	r27
    1bc0:	c9 f7       	brne	.-14     	; 0x1bb4 <__ultoa_invert+0x86>
    1bc2:	00 97       	sbiw	r24, 0x00	; 0
    1bc4:	61 05       	cpc	r22, r1
    1bc6:	71 05       	cpc	r23, r1
    1bc8:	08 95       	ret
    1bca:	9b 01       	movw	r18, r22
    1bcc:	ac 01       	movw	r20, r24
    1bce:	0a 2e       	mov	r0, r26
    1bd0:	06 94       	lsr	r0
    1bd2:	57 95       	ror	r21
    1bd4:	47 95       	ror	r20
    1bd6:	37 95       	ror	r19
    1bd8:	27 95       	ror	r18
    1bda:	ba 95       	dec	r27
    1bdc:	c9 f7       	brne	.-14     	; 0x1bd0 <__ultoa_invert+0xa2>
    1bde:	62 0f       	add	r22, r18
    1be0:	73 1f       	adc	r23, r19
    1be2:	84 1f       	adc	r24, r20
    1be4:	95 1f       	adc	r25, r21
    1be6:	a0 1d       	adc	r26, r0
    1be8:	08 95       	ret

00001bea <__cmpsf2>:
    1bea:	9f d9       	rcall	.-3266   	; 0xf2a <__fp_cmp>
    1bec:	08 f4       	brcc	.+2      	; 0x1bf0 <__cmpsf2+0x6>
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	08 95       	ret

00001bf2 <__ctype_isfalse>:
    1bf2:	99 27       	eor	r25, r25
    1bf4:	88 27       	eor	r24, r24

00001bf6 <__ctype_istrue>:
    1bf6:	08 95       	ret

00001bf8 <__divmodsi4>:
    1bf8:	05 2e       	mov	r0, r21
    1bfa:	97 fb       	bst	r25, 7
    1bfc:	16 f4       	brtc	.+4      	; 0x1c02 <__divmodsi4+0xa>
    1bfe:	00 94       	com	r0
    1c00:	0f d0       	rcall	.+30     	; 0x1c20 <__negsi2>
    1c02:	57 fd       	sbrc	r21, 7
    1c04:	05 d0       	rcall	.+10     	; 0x1c10 <__divmodsi4_neg2>
    1c06:	b5 d9       	rcall	.-3222   	; 0xf72 <__udivmodsi4>
    1c08:	07 fc       	sbrc	r0, 7
    1c0a:	02 d0       	rcall	.+4      	; 0x1c10 <__divmodsi4_neg2>
    1c0c:	46 f4       	brtc	.+16     	; 0x1c1e <__divmodsi4_exit>
    1c0e:	08 c0       	rjmp	.+16     	; 0x1c20 <__negsi2>

00001c10 <__divmodsi4_neg2>:
    1c10:	50 95       	com	r21
    1c12:	40 95       	com	r20
    1c14:	30 95       	com	r19
    1c16:	21 95       	neg	r18
    1c18:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1a:	4f 4f       	sbci	r20, 0xFF	; 255
    1c1c:	5f 4f       	sbci	r21, 0xFF	; 255

00001c1e <__divmodsi4_exit>:
    1c1e:	08 95       	ret

00001c20 <__negsi2>:
    1c20:	90 95       	com	r25
    1c22:	80 95       	com	r24
    1c24:	70 95       	com	r23
    1c26:	61 95       	neg	r22
    1c28:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2e:	08 95       	ret

00001c30 <__muluhisi3>:
    1c30:	0f d0       	rcall	.+30     	; 0x1c50 <__umulhisi3>
    1c32:	a5 9f       	mul	r26, r21
    1c34:	90 0d       	add	r25, r0
    1c36:	b4 9f       	mul	r27, r20
    1c38:	90 0d       	add	r25, r0
    1c3a:	a4 9f       	mul	r26, r20
    1c3c:	80 0d       	add	r24, r0
    1c3e:	91 1d       	adc	r25, r1
    1c40:	11 24       	eor	r1, r1
    1c42:	08 95       	ret

00001c44 <__mulshisi3>:
    1c44:	b7 ff       	sbrs	r27, 7
    1c46:	f4 cf       	rjmp	.-24     	; 0x1c30 <__muluhisi3>

00001c48 <__mulohisi3>:
    1c48:	f3 df       	rcall	.-26     	; 0x1c30 <__muluhisi3>
    1c4a:	82 1b       	sub	r24, r18
    1c4c:	93 0b       	sbc	r25, r19
    1c4e:	08 95       	ret

00001c50 <__umulhisi3>:
    1c50:	a2 9f       	mul	r26, r18
    1c52:	b0 01       	movw	r22, r0
    1c54:	b3 9f       	mul	r27, r19
    1c56:	c0 01       	movw	r24, r0
    1c58:	a3 9f       	mul	r26, r19
    1c5a:	70 0d       	add	r23, r0
    1c5c:	81 1d       	adc	r24, r1
    1c5e:	11 24       	eor	r1, r1
    1c60:	91 1d       	adc	r25, r1
    1c62:	b2 9f       	mul	r27, r18
    1c64:	70 0d       	add	r23, r0
    1c66:	81 1d       	adc	r24, r1
    1c68:	11 24       	eor	r1, r1
    1c6a:	91 1d       	adc	r25, r1
    1c6c:	08 95       	ret

00001c6e <_exit>:
    1c6e:	f8 94       	cli

00001c70 <__stop_program>:
    1c70:	ff cf       	rjmp	.-2      	; 0x1c70 <__stop_program>
