
Mega128BoardGPSTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  000019d8  00001a6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010a  0080015c  0080015c  00001ac8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ac8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f46  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000daf  00000000  00000000  00003bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d91  00000000  00000000  00004965  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  000056f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000075c  00000000  00000000  00005b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001126  00000000  00000000  00006284  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000073aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	63 c0       	rjmp	.+198    	; 0xc8 <__ctors_end>
       2:	00 00       	nop
       4:	7f c0       	rjmp	.+254    	; 0x104 <__bad_interrupt>
       6:	00 00       	nop
       8:	7d c0       	rjmp	.+250    	; 0x104 <__bad_interrupt>
       a:	00 00       	nop
       c:	7b c0       	rjmp	.+246    	; 0x104 <__bad_interrupt>
       e:	00 00       	nop
      10:	79 c0       	rjmp	.+242    	; 0x104 <__bad_interrupt>
      12:	00 00       	nop
      14:	77 c0       	rjmp	.+238    	; 0x104 <__bad_interrupt>
      16:	00 00       	nop
      18:	75 c0       	rjmp	.+234    	; 0x104 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	73 c0       	rjmp	.+230    	; 0x104 <__bad_interrupt>
      1e:	00 00       	nop
      20:	71 c0       	rjmp	.+226    	; 0x104 <__bad_interrupt>
      22:	00 00       	nop
      24:	6f c0       	rjmp	.+222    	; 0x104 <__bad_interrupt>
      26:	00 00       	nop
      28:	6d c0       	rjmp	.+218    	; 0x104 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6b c0       	rjmp	.+214    	; 0x104 <__bad_interrupt>
      2e:	00 00       	nop
      30:	69 c0       	rjmp	.+210    	; 0x104 <__bad_interrupt>
      32:	00 00       	nop
      34:	67 c0       	rjmp	.+206    	; 0x104 <__bad_interrupt>
      36:	00 00       	nop
      38:	65 c0       	rjmp	.+202    	; 0x104 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	63 c0       	rjmp	.+198    	; 0x104 <__bad_interrupt>
      3e:	00 00       	nop
      40:	61 c0       	rjmp	.+194    	; 0x104 <__bad_interrupt>
      42:	00 00       	nop
      44:	5f c0       	rjmp	.+190    	; 0x104 <__bad_interrupt>
      46:	00 00       	nop
      48:	73 c0       	rjmp	.+230    	; 0x130 <__vector_18>
      4a:	00 00       	nop
      4c:	5b c0       	rjmp	.+182    	; 0x104 <__bad_interrupt>
      4e:	00 00       	nop
      50:	59 c0       	rjmp	.+178    	; 0x104 <__bad_interrupt>
      52:	00 00       	nop
      54:	57 c0       	rjmp	.+174    	; 0x104 <__bad_interrupt>
      56:	00 00       	nop
      58:	55 c0       	rjmp	.+170    	; 0x104 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	53 c0       	rjmp	.+166    	; 0x104 <__bad_interrupt>
      5e:	00 00       	nop
      60:	51 c0       	rjmp	.+162    	; 0x104 <__bad_interrupt>
      62:	00 00       	nop
      64:	4f c0       	rjmp	.+158    	; 0x104 <__bad_interrupt>
      66:	00 00       	nop
      68:	4d c0       	rjmp	.+154    	; 0x104 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4b c0       	rjmp	.+150    	; 0x104 <__bad_interrupt>
      6e:	00 00       	nop
      70:	49 c0       	rjmp	.+146    	; 0x104 <__bad_interrupt>
      72:	00 00       	nop
      74:	47 c0       	rjmp	.+142    	; 0x104 <__bad_interrupt>
      76:	00 00       	nop
      78:	45 c0       	rjmp	.+138    	; 0x104 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	43 c0       	rjmp	.+134    	; 0x104 <__bad_interrupt>
      7e:	00 00       	nop
      80:	41 c0       	rjmp	.+130    	; 0x104 <__bad_interrupt>
      82:	00 00       	nop
      84:	3f c0       	rjmp	.+126    	; 0x104 <__bad_interrupt>
      86:	00 00       	nop
      88:	3d c0       	rjmp	.+122    	; 0x104 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	4e 41       	sbci	r20, 0x1E	; 30
      8e:	4e 49       	Address 0x0000008e is out of bounds.
.word	0xffff	; ????

0000008f <pstr_inity>:
      8f:	49 4e 49 54 59                                      INITY

00000094 <pstr_inf>:
      94:	49 4e 46                                            INF

00000097 <pwr_m10>:
      97:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      a7:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000af <pwr_p10>:
      af:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      bf:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d0 e1       	ldi	r29, 0x10	; 16
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e8 ed       	ldi	r30, 0xD8	; 216
      dc:	f9 e1       	ldi	r31, 0x19	; 25
      de:	00 e0       	ldi	r16, 0x00	; 0
      e0:	0b bf       	out	0x3b, r16	; 59
      e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x14>
      e4:	07 90       	elpm	r0, Z+
      e6:	0d 92       	st	X+, r0
      e8:	ac 35       	cpi	r26, 0x5C	; 92
      ea:	b1 07       	cpc	r27, r17
      ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0x10>

000000ee <__do_clear_bss>:
      ee:	22 e0       	ldi	r18, 0x02	; 2
      f0:	ac e5       	ldi	r26, 0x5C	; 92
      f2:	b1 e0       	ldi	r27, 0x01	; 1
      f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
      f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
      f8:	a6 36       	cpi	r26, 0x66	; 102
      fa:	b2 07       	cpc	r27, r18
      fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
      fe:	16 d0       	rcall	.+44     	; 0x12c <main>
     100:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <_exit>

00000104 <__bad_interrupt>:
     104:	7d cf       	rjmp	.-262    	; 0x0 <__vectors>

00000106 <time>:
     106:	fc 01       	movw	r30, r24
     108:	0f b6       	in	r0, 0x3f	; 63
     10a:	f8 94       	cli
     10c:	60 91 60 02 	lds	r22, 0x0260	; 0x800260 <__system_time>
     110:	70 91 61 02 	lds	r23, 0x0261	; 0x800261 <__system_time+0x1>
     114:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__system_time+0x2>
     118:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <__system_time+0x3>
     11c:	0f be       	out	0x3f, r0	; 63
     11e:	30 97       	sbiw	r30, 0x00	; 0
     120:	21 f0       	breq	.+8      	; 0x12a <time+0x24>
     122:	60 83       	st	Z, r22
     124:	71 83       	std	Z+1, r23	; 0x01
     126:	82 83       	std	Z+2, r24	; 0x02
     128:	93 83       	std	Z+3, r25	; 0x03
     12a:	08 95       	ret

0000012c <main>:


int main(void)
{
	#ifdef DOUNITTEST
	beginUnitTest();
     12c:	8e d4       	rcall	.+2332   	; 0xa4a <beginUnitTest>
	#endif

	while(1){};
     12e:	ff cf       	rjmp	.-2      	; 0x12e <main+0x2>

00000130 <__vector_18>:
	} else if (!checkPUBX(packet)){
		return 0;	
	} else {
		return 1;
	}
}
     130:	1f 92       	push	r1
     132:	0f 92       	push	r0
     134:	0f b6       	in	r0, 0x3f	; 63
     136:	0f 92       	push	r0
     138:	11 24       	eor	r1, r1
     13a:	0b b6       	in	r0, 0x3b	; 59
     13c:	0f 92       	push	r0
     13e:	2f 93       	push	r18
     140:	3f 93       	push	r19
     142:	4f 93       	push	r20
     144:	5f 93       	push	r21
     146:	6f 93       	push	r22
     148:	7f 93       	push	r23
     14a:	8f 93       	push	r24
     14c:	9f 93       	push	r25
     14e:	af 93       	push	r26
     150:	bf 93       	push	r27
     152:	cf 93       	push	r28
     154:	ef 93       	push	r30
     156:	ff 93       	push	r31
     158:	cc b1       	in	r28, 0x0c	; 12
     15a:	c3 98       	cbi	0x18, 3	; 24
     15c:	98 b3       	in	r25, 0x18	; 24
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	89 27       	eor	r24, r25
     162:	88 bb       	out	0x18, r24	; 24
     164:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <msgIndex>
     168:	8e 3f       	cpi	r24, 0xFE	; 254
     16a:	80 f0       	brcs	.+32     	; 0x18c <__vector_18+0x5c>
     16c:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <msgIndex>
     170:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <msgBeginFlag>
     174:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <msgEndFlag>
     178:	c2 98       	cbi	0x18, 2	; 24
     17a:	88 b3       	in	r24, 0x18	; 24
     17c:	80 58       	subi	r24, 0x80	; 128
     17e:	88 bb       	out	0x18, r24	; 24
     180:	60 e0       	ldi	r22, 0x00	; 0
     182:	8f e4       	ldi	r24, 0x4F	; 79
     184:	d4 d4       	rcall	.+2472   	; 0xb2e <USARTTX>
     186:	60 e0       	ldi	r22, 0x00	; 0
     188:	8a e2       	ldi	r24, 0x2A	; 42
     18a:	d1 d4       	rcall	.+2466   	; 0xb2e <USARTTX>
     18c:	c4 32       	cpi	r28, 0x24	; 36
     18e:	d9 f4       	brne	.+54     	; 0x1c6 <__vector_18+0x96>
     190:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <msgEndFlag>
     194:	81 11       	cpse	r24, r1
     196:	61 c0       	rjmp	.+194    	; 0x25a <__vector_18+0x12a>
     198:	c1 9a       	sbi	0x18, 1	; 24
     19a:	c3 98       	cbi	0x18, 3	; 24
     19c:	c2 98       	cbi	0x18, 2	; 24
     19e:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end>
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <msgBeginFlag>
     1a8:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <msgIndex>
     1ac:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <msgIndex>
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	e0 5a       	subi	r30, 0xA0	; 160
     1b4:	fe 4f       	sbci	r31, 0xFE	; 254
     1b6:	84 e2       	ldi	r24, 0x24	; 36
     1b8:	80 83       	st	Z, r24
     1ba:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <msgIndex>
     1be:	8f 5f       	subi	r24, 0xFF	; 255
     1c0:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <msgIndex>
     1c4:	62 c0       	rjmp	.+196    	; 0x28a <__vector_18+0x15a>
     1c6:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <msgBeginFlag>
     1ca:	88 23       	and	r24, r24
     1cc:	c9 f0       	breq	.+50     	; 0x200 <__vector_18+0xd0>
     1ce:	ca 32       	cpi	r28, 0x2A	; 42
     1d0:	09 f0       	breq	.+2      	; 0x1d4 <__vector_18+0xa4>
     1d2:	53 c0       	rjmp	.+166    	; 0x27a <__vector_18+0x14a>
     1d4:	47 c0       	rjmp	.+142    	; 0x264 <__vector_18+0x134>
     1d6:	c2 9a       	sbi	0x18, 2	; 24
     1d8:	c1 98       	cbi	0x18, 1	; 24
     1da:	cc 32       	cpi	r28, 0x2C	; 44
     1dc:	29 f4       	brne	.+10     	; 0x1e8 <__vector_18+0xb8>
     1de:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
     1e2:	8f 5f       	subi	r24, 0xFF	; 255
     1e4:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
     1e8:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <msgIndex>
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	e0 5a       	subi	r30, 0xA0	; 160
     1f0:	fe 4f       	sbci	r31, 0xFE	; 254
     1f2:	c0 83       	st	Z, r28
     1f4:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <msgIndex>
     1f8:	8f 5f       	subi	r24, 0xFF	; 255
     1fa:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <msgIndex>
     1fe:	45 c0       	rjmp	.+138    	; 0x28a <__vector_18+0x15a>
     200:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <msgBeginFlag>
     204:	88 23       	and	r24, r24
     206:	09 f4       	brne	.+2      	; 0x20a <__vector_18+0xda>
     208:	40 c0       	rjmp	.+128    	; 0x28a <__vector_18+0x15a>
     20a:	ca 32       	cpi	r28, 0x2A	; 42
     20c:	09 f0       	breq	.+2      	; 0x210 <__vector_18+0xe0>
     20e:	3d c0       	rjmp	.+122    	; 0x28a <__vector_18+0x15a>
     210:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <msgEndFlag>
     214:	81 11       	cpse	r24, r1
     216:	39 c0       	rjmp	.+114    	; 0x28a <__vector_18+0x15a>
     218:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <msgIndex>
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	e0 5a       	subi	r30, 0xA0	; 160
     220:	fe 4f       	sbci	r31, 0xFE	; 254
     222:	8a e2       	ldi	r24, 0x2A	; 42
     224:	80 83       	st	Z, r24
     226:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <msgIndex>
     22a:	8f 5f       	subi	r24, 0xFF	; 255
     22c:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <msgIndex>
     230:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <msgIndex>
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	e0 5a       	subi	r30, 0xA0	; 160
     238:	fe 4f       	sbci	r31, 0xFE	; 254
     23a:	10 82       	st	Z, r1
     23c:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <msgIndex>
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <msgEndFlag>
     246:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <msgBeginFlag>
     24a:	c3 9a       	sbi	0x18, 3	; 24
     24c:	c1 98       	cbi	0x18, 1	; 24
     24e:	c2 98       	cbi	0x18, 2	; 24
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	8a e0       	ldi	r24, 0x0A	; 10
     254:	6c d4       	rcall	.+2264   	; 0xb2e <USARTTX>
     256:	f8 94       	cli
     258:	18 c0       	rjmp	.+48     	; 0x28a <__vector_18+0x15a>
     25a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <msgBeginFlag>
     25e:	81 11       	cpse	r24, r1
     260:	09 c0       	rjmp	.+18     	; 0x274 <__vector_18+0x144>
     262:	11 c0       	rjmp	.+34     	; 0x286 <__vector_18+0x156>
     264:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <msgBeginFlag>
     268:	81 11       	cpse	r24, r1
     26a:	d2 cf       	rjmp	.-92     	; 0x210 <__vector_18+0xe0>
     26c:	0e c0       	rjmp	.+28     	; 0x28a <__vector_18+0x15a>
     26e:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <msgBeginFlag>
     272:	0b c0       	rjmp	.+22     	; 0x28a <__vector_18+0x15a>
     274:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <msgEndFlag>
     278:	fa cf       	rjmp	.-12     	; 0x26e <__vector_18+0x13e>
     27a:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <msgEndFlag>
     27e:	88 23       	and	r24, r24
     280:	09 f4       	brne	.+2      	; 0x284 <__vector_18+0x154>
     282:	a9 cf       	rjmp	.-174    	; 0x1d6 <__vector_18+0xa6>
     284:	f4 cf       	rjmp	.-24     	; 0x26e <__vector_18+0x13e>
     286:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <msgBeginFlag>
     28a:	ff 91       	pop	r31
     28c:	ef 91       	pop	r30
     28e:	cf 91       	pop	r28
     290:	bf 91       	pop	r27
     292:	af 91       	pop	r26
     294:	9f 91       	pop	r25
     296:	8f 91       	pop	r24
     298:	7f 91       	pop	r23
     29a:	6f 91       	pop	r22
     29c:	5f 91       	pop	r21
     29e:	4f 91       	pop	r20
     2a0:	3f 91       	pop	r19
     2a2:	2f 91       	pop	r18
     2a4:	0f 90       	pop	r0
     2a6:	0b be       	out	0x3b, r0	; 59
     2a8:	0f 90       	pop	r0
     2aa:	0f be       	out	0x3f, r0	; 63
     2ac:	0f 90       	pop	r0
     2ae:	1f 90       	pop	r1
     2b0:	18 95       	reti

000002b2 <SendGPS>:
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	1f 92       	push	r1
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
     2c2:	7c 01       	movw	r14, r24
     2c4:	16 2f       	mov	r17, r22
     2c6:	60 e0       	ldi	r22, 0x00	; 0
     2c8:	84 e2       	ldi	r24, 0x24	; 36
     2ca:	31 d4       	rcall	.+2146   	; 0xb2e <USARTTX>
     2cc:	19 82       	std	Y+1, r1	; 0x01
     2ce:	89 81       	ldd	r24, Y+1	; 0x01
     2d0:	81 17       	cp	r24, r17
     2d2:	68 f4       	brcc	.+26     	; 0x2ee <SendGPS+0x3c>
     2d4:	99 81       	ldd	r25, Y+1	; 0x01
     2d6:	f7 01       	movw	r30, r14
     2d8:	e9 0f       	add	r30, r25
     2da:	f1 1d       	adc	r31, r1
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	80 81       	ld	r24, Z
     2e0:	26 d4       	rcall	.+2124   	; 0xb2e <USARTTX>
     2e2:	99 81       	ldd	r25, Y+1	; 0x01
     2e4:	9f 5f       	subi	r25, 0xFF	; 255
     2e6:	99 83       	std	Y+1, r25	; 0x01
     2e8:	99 81       	ldd	r25, Y+1	; 0x01
     2ea:	91 17       	cp	r25, r17
     2ec:	98 f3       	brcs	.-26     	; 0x2d4 <SendGPS+0x22>
     2ee:	60 e0       	ldi	r22, 0x00	; 0
     2f0:	8d e0       	ldi	r24, 0x0D	; 13
     2f2:	1d d4       	rcall	.+2106   	; 0xb2e <USARTTX>
     2f4:	60 e0       	ldi	r22, 0x00	; 0
     2f6:	8a e0       	ldi	r24, 0x0A	; 10
     2f8:	1a d4       	rcall	.+2100   	; 0xb2e <USARTTX>
     2fa:	0f 90       	pop	r0
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	1f 91       	pop	r17
     302:	ff 90       	pop	r15
     304:	ef 90       	pop	r14
     306:	08 95       	ret

00000308 <CheckSum>:

// Calculates and writes the checksum for an outgoing packet
void CheckSum(char* packet){
     308:	0f 93       	push	r16
     30a:	1f 93       	push	r17
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	00 d0       	rcall	.+0      	; 0x312 <CheckSum+0xa>
     312:	00 d0       	rcall	.+0      	; 0x314 <CheckSum+0xc>
     314:	1f 92       	push	r1
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	8c 01       	movw	r16, r24
	uint8_t volatile i = 0;
     31c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t volatile checksum;
	char hexchar[3];
	while(!(packet[i] == '*')){
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	f8 01       	movw	r30, r16
     322:	e8 0f       	add	r30, r24
     324:	f1 1d       	adc	r31, r1
     326:	80 81       	ld	r24, Z
     328:	8a 32       	cpi	r24, 0x2A	; 42
     32a:	91 f0       	breq	.+36     	; 0x350 <CheckSum+0x48>
		checksum ^= packet[i]; //XORs all the packet bytes together to get the checksum
     32c:	99 81       	ldd	r25, Y+1	; 0x01
     32e:	8a 81       	ldd	r24, Y+2	; 0x02
     330:	f8 01       	movw	r30, r16
     332:	e9 0f       	add	r30, r25
     334:	f1 1d       	adc	r31, r1
     336:	90 81       	ld	r25, Z
     338:	98 27       	eor	r25, r24
     33a:	9a 83       	std	Y+2, r25	; 0x02
		i++;
     33c:	99 81       	ldd	r25, Y+1	; 0x01
     33e:	9f 5f       	subi	r25, 0xFF	; 255
     340:	99 83       	std	Y+1, r25	; 0x01
// Calculates and writes the checksum for an outgoing packet
void CheckSum(char* packet){
	uint8_t volatile i = 0;
	uint8_t volatile checksum;
	char hexchar[3];
	while(!(packet[i] == '*')){
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	f8 01       	movw	r30, r16
     346:	e8 0f       	add	r30, r24
     348:	f1 1d       	adc	r31, r1
     34a:	80 81       	ld	r24, Z
     34c:	8a 32       	cpi	r24, 0x2A	; 42
     34e:	71 f7       	brne	.-36     	; 0x32c <CheckSum+0x24>
		checksum ^= packet[i]; //XORs all the packet bytes together to get the checksum
		i++;
	}
	sprintf(hexchar, "%02X", checksum);
     350:	8a 81       	ldd	r24, Y+2	; 0x02
     352:	1f 92       	push	r1
     354:	8f 93       	push	r24
     356:	8a e2       	ldi	r24, 0x2A	; 42
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	9f 93       	push	r25
     35c:	8f 93       	push	r24
     35e:	ce 01       	movw	r24, r28
     360:	03 96       	adiw	r24, 0x03	; 3
     362:	9f 93       	push	r25
     364:	8f 93       	push	r24
     366:	a5 d6       	rcall	.+3402   	; 0x10b2 <sprintf>
	i++;
     368:	89 81       	ldd	r24, Y+1	; 0x01
     36a:	8f 5f       	subi	r24, 0xFF	; 255
     36c:	89 83       	std	Y+1, r24	; 0x01
	packet[i] = hexchar[0];
     36e:	89 81       	ldd	r24, Y+1	; 0x01
     370:	f8 01       	movw	r30, r16
     372:	e8 0f       	add	r30, r24
     374:	f1 1d       	adc	r31, r1
     376:	8b 81       	ldd	r24, Y+3	; 0x03
     378:	80 83       	st	Z, r24
	i++;
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	8f 5f       	subi	r24, 0xFF	; 255
     37e:	89 83       	std	Y+1, r24	; 0x01
	packet[i] = hexchar[1];
     380:	89 81       	ldd	r24, Y+1	; 0x01
     382:	f8 01       	movw	r30, r16
     384:	e8 0f       	add	r30, r24
     386:	f1 1d       	adc	r31, r1
     388:	8c 81       	ldd	r24, Y+4	; 0x04
     38a:	80 83       	st	Z, r24
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
	return;
}
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	08 95       	ret

000003ac <PUBXCFGSetup>:
//	packet: The packet to be sent, consisting of the config message base. The message name gets modified.
//	msg: The particular identifier of the message to be turned off
// Returns:
//	Nothing

void PUBXCFGSetup(char* packet, char* msg){
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	00 d0       	rcall	.+0      	; 0x3b2 <PUBXCFGSetup+0x6>
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	ac 01       	movw	r20, r24
	uint8_t volatile i = MSGSTT; //Sets up the configure message to turn off all the messages we don't want.
     3b8:	88 e0       	ldi	r24, 0x08	; 8
     3ba:	89 83       	std	Y+1, r24	; 0x01
	uint8_t volatile j = 0; //Takes the message name
     3bc:	1a 82       	std	Y+2, r1	; 0x02
	for (i; i < MSGEND; i++){
     3be:	89 81       	ldd	r24, Y+1	; 0x01
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	8b 30       	cpi	r24, 0x0B	; 11
     3c4:	98 f4       	brcc	.+38     	; 0x3ec <PUBXCFGSetup+0x40>
		packet[i] = msg[j];
     3c6:	29 81       	ldd	r18, Y+1	; 0x01
     3c8:	9a 81       	ldd	r25, Y+2	; 0x02
     3ca:	fb 01       	movw	r30, r22
     3cc:	e9 0f       	add	r30, r25
     3ce:	f1 1d       	adc	r31, r1
     3d0:	90 81       	ld	r25, Z
     3d2:	fa 01       	movw	r30, r20
     3d4:	e2 0f       	add	r30, r18
     3d6:	f1 1d       	adc	r31, r1
     3d8:	90 83       	st	Z, r25
		j++;
     3da:	9a 81       	ldd	r25, Y+2	; 0x02
     3dc:	9f 5f       	subi	r25, 0xFF	; 255
     3de:	9a 83       	std	Y+2, r25	; 0x02
//	Nothing

void PUBXCFGSetup(char* packet, char* msg){
	uint8_t volatile i = MSGSTT; //Sets up the configure message to turn off all the messages we don't want.
	uint8_t volatile j = 0; //Takes the message name
	for (i; i < MSGEND; i++){
     3e0:	99 81       	ldd	r25, Y+1	; 0x01
     3e2:	9f 5f       	subi	r25, 0xFF	; 255
     3e4:	99 83       	std	Y+1, r25	; 0x01
     3e6:	99 81       	ldd	r25, Y+1	; 0x01
     3e8:	9b 30       	cpi	r25, 0x0B	; 11
     3ea:	68 f3       	brcs	.-38     	; 0x3c6 <PUBXCFGSetup+0x1a>
		packet[i] = msg[j];
		j++;
	}
	CheckSum(packet);
     3ec:	ca 01       	movw	r24, r20
     3ee:	8c df       	rcall	.-232    	; 0x308 <CheckSum>
	return;
}
     3f0:	0f 90       	pop	r0
     3f2:	0f 90       	pop	r0
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	08 95       	ret

000003fa <InitGPS>:
		return;
	}
}

//Use RATE (PUBX,40)
uint16_t InitGPS(void){
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	6c 97       	sbiw	r28, 0x1c	; 28
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
	uint16_t volatile SetUBRR; //Turns off all the messages we don't want
	msgIndex = 0;
     40e:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <msgIndex>
	msgBeginFlag = 0;
     412:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <msgBeginFlag>
	msgEndFlag = 0;
     416:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <msgEndFlag>
	char CFGMSG[CFGMSGSIZE] = PUBXNOCOMMCFGMSGBASE;
     41a:	8a e1       	ldi	r24, 0x1A	; 26
     41c:	e4 e0       	ldi	r30, 0x04	; 4
     41e:	f1 e0       	ldi	r31, 0x01	; 1
     420:	de 01       	movw	r26, r28
     422:	13 96       	adiw	r26, 0x03	; 3
     424:	01 90       	ld	r0, Z+
     426:	0d 92       	st	X+, r0
     428:	8a 95       	dec	r24
     42a:	e1 f7       	brne	.-8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	SetUBRR = InitUSART(GPSBAUD, GPSPORT);
     42c:	40 e0       	ldi	r20, 0x00	; 0
     42e:	60 e8       	ldi	r22, 0x80	; 128
     430:	75 e2       	ldi	r23, 0x25	; 37
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	5b d3       	rcall	.+1718   	; 0xaee <InitUSART>
     438:	9a 83       	std	Y+2, r25	; 0x02
     43a:	89 83       	std	Y+1, r24	; 0x01
	if (SetUBRR){
     43c:	89 81       	ldd	r24, Y+1	; 0x01
     43e:	9a 81       	ldd	r25, Y+2	; 0x02
     440:	00 97       	sbiw	r24, 0x00	; 0
     442:	09 f4       	brne	.+2      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     444:	5d c0       	rjmp	.+186    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     446:	2f ef       	ldi	r18, 0xFF	; 255
     448:	87 ea       	ldi	r24, 0xA7	; 167
     44a:	91 e6       	ldi	r25, 0x61	; 97
     44c:	21 50       	subi	r18, 0x01	; 1
     44e:	80 40       	sbci	r24, 0x00	; 0
     450:	90 40       	sbci	r25, 0x00	; 0
     452:	e1 f7       	brne	.-8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     454:	00 c0       	rjmp	.+0      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     456:	00 00       	nop
		_delay_ms(2000);
		PUBXCFGSetup(CFGMSG, "GLL");
     458:	6f e2       	ldi	r22, 0x2F	; 47
     45a:	71 e0       	ldi	r23, 0x01	; 1
     45c:	ce 01       	movw	r24, r28
     45e:	03 96       	adiw	r24, 0x03	; 3
     460:	a5 df       	rcall	.-182    	; 0x3ac <PUBXCFGSetup>
		SendGPS(CFGMSG, CFGMSGSIZE);
     462:	6a e1       	ldi	r22, 0x1A	; 26
     464:	ce 01       	movw	r24, r28
     466:	03 96       	adiw	r24, 0x03	; 3
     468:	24 df       	rcall	.-440    	; 0x2b2 <SendGPS>
     46a:	2f ef       	ldi	r18, 0xFF	; 255
     46c:	85 ea       	ldi	r24, 0xA5	; 165
     46e:	9e e0       	ldi	r25, 0x0E	; 14
     470:	21 50       	subi	r18, 0x01	; 1
     472:	80 40       	sbci	r24, 0x00	; 0
     474:	90 40       	sbci	r25, 0x00	; 0
     476:	e1 f7       	brne	.-8      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     478:	00 c0       	rjmp	.+0      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     47a:	00 00       	nop
		_delay_ms(300);
		PUBXCFGSetup(CFGMSG, "GSA");
     47c:	63 e3       	ldi	r22, 0x33	; 51
     47e:	71 e0       	ldi	r23, 0x01	; 1
     480:	ce 01       	movw	r24, r28
     482:	03 96       	adiw	r24, 0x03	; 3
     484:	93 df       	rcall	.-218    	; 0x3ac <PUBXCFGSetup>
		SendGPS(CFGMSG, CFGMSGSIZE);
     486:	6a e1       	ldi	r22, 0x1A	; 26
     488:	ce 01       	movw	r24, r28
     48a:	03 96       	adiw	r24, 0x03	; 3
     48c:	12 df       	rcall	.-476    	; 0x2b2 <SendGPS>
     48e:	2f ef       	ldi	r18, 0xFF	; 255
     490:	85 ea       	ldi	r24, 0xA5	; 165
     492:	9e e0       	ldi	r25, 0x0E	; 14
     494:	21 50       	subi	r18, 0x01	; 1
     496:	80 40       	sbci	r24, 0x00	; 0
     498:	90 40       	sbci	r25, 0x00	; 0
     49a:	e1 f7       	brne	.-8      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     49e:	00 00       	nop
		_delay_ms(300);
		PUBXCFGSetup(CFGMSG, "GSV");
     4a0:	67 e3       	ldi	r22, 0x37	; 55
     4a2:	71 e0       	ldi	r23, 0x01	; 1
     4a4:	ce 01       	movw	r24, r28
     4a6:	03 96       	adiw	r24, 0x03	; 3
     4a8:	81 df       	rcall	.-254    	; 0x3ac <PUBXCFGSetup>
		SendGPS(CFGMSG, CFGMSGSIZE);
     4aa:	6a e1       	ldi	r22, 0x1A	; 26
     4ac:	ce 01       	movw	r24, r28
     4ae:	03 96       	adiw	r24, 0x03	; 3
     4b0:	00 df       	rcall	.-512    	; 0x2b2 <SendGPS>
     4b2:	2f ef       	ldi	r18, 0xFF	; 255
     4b4:	85 ea       	ldi	r24, 0xA5	; 165
     4b6:	9e e0       	ldi	r25, 0x0E	; 14
     4b8:	21 50       	subi	r18, 0x01	; 1
     4ba:	80 40       	sbci	r24, 0x00	; 0
     4bc:	90 40       	sbci	r25, 0x00	; 0
     4be:	e1 f7       	brne	.-8      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4c2:	00 00       	nop
		_delay_ms(300);
		PUBXCFGSetup(CFGMSG, "RMC");
     4c4:	6b e3       	ldi	r22, 0x3B	; 59
     4c6:	71 e0       	ldi	r23, 0x01	; 1
     4c8:	ce 01       	movw	r24, r28
     4ca:	03 96       	adiw	r24, 0x03	; 3
     4cc:	6f df       	rcall	.-290    	; 0x3ac <PUBXCFGSetup>
		SendGPS(CFGMSG, CFGMSGSIZE);
     4ce:	6a e1       	ldi	r22, 0x1A	; 26
     4d0:	ce 01       	movw	r24, r28
     4d2:	03 96       	adiw	r24, 0x03	; 3
     4d4:	ee de       	rcall	.-548    	; 0x2b2 <SendGPS>
     4d6:	2f ef       	ldi	r18, 0xFF	; 255
     4d8:	85 ea       	ldi	r24, 0xA5	; 165
     4da:	9e e0       	ldi	r25, 0x0E	; 14
     4dc:	21 50       	subi	r18, 0x01	; 1
     4de:	80 40       	sbci	r24, 0x00	; 0
     4e0:	90 40       	sbci	r25, 0x00	; 0
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4e6:	00 00       	nop
		_delay_ms(300);
		PUBXCFGSetup(CFGMSG, "VTG");
     4e8:	6f e3       	ldi	r22, 0x3F	; 63
     4ea:	71 e0       	ldi	r23, 0x01	; 1
     4ec:	ce 01       	movw	r24, r28
     4ee:	03 96       	adiw	r24, 0x03	; 3
     4f0:	5d df       	rcall	.-326    	; 0x3ac <PUBXCFGSetup>
		SendGPS(CFGMSG, CFGMSGSIZE);
     4f2:	6a e1       	ldi	r22, 0x1A	; 26
     4f4:	ce 01       	movw	r24, r28
     4f6:	03 96       	adiw	r24, 0x03	; 3
     4f8:	dc de       	rcall	.-584    	; 0x2b2 <SendGPS>
		sei();
     4fa:	78 94       	sei
		return SetUBRR;
     4fc:	89 81       	ldd	r24, Y+1	; 0x01
     4fe:	9a 81       	ldd	r25, Y+2	; 0x02
	} else {
		return 0;
	}
}
     500:	6c 96       	adiw	r28, 0x1c	; 28
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	f8 94       	cli
     506:	de bf       	out	0x3e, r29	; 62
     508:	0f be       	out	0x3f, r0	; 63
     50a:	cd bf       	out	0x3d, r28	; 61
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <parseDegreesMinutes>:
}

// Parses a string in the format: DDMM.MMMMMMM, where DD is degrees, and MM is minutes.
// degLength is the length of the degrees part. For example, degLength of 3 means
// the string will be DDDMM.MMMMMMM.
float parseDegreesMinutes(char *s, int degLength) {
     512:	af 92       	push	r10
     514:	bf 92       	push	r11
     516:	cf 92       	push	r12
     518:	df 92       	push	r13
     51a:	ef 92       	push	r14
     51c:	ff 92       	push	r15
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	cd b7       	in	r28, 0x3d	; 61
     528:	de b7       	in	r29, 0x3e	; 62
     52a:	28 97       	sbiw	r28, 0x08	; 8
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
     536:	6c 01       	movw	r12, r24
     538:	8b 01       	movw	r16, r22
	degrees = atof(degreesString);
	// Convert the minutes
	minutes = atof(s + degLength);
	// Convert the minutes to decimal degrees
	return degrees + (minutes / 60);
}
     53a:	ad b6       	in	r10, 0x3d	; 61
     53c:	be b6       	in	r11, 0x3e	; 62

// Parses a string in the format: DDMM.MMMMMMM, where DD is degrees, and MM is minutes.
// degLength is the length of the degrees part. For example, degLength of 3 means
// the string will be DDDMM.MMMMMMM.
float parseDegreesMinutes(char *s, int degLength) {
	char degreesString[degLength + 1];
     53e:	cb 01       	movw	r24, r22
     540:	01 96       	adiw	r24, 0x01	; 1
     542:	2d b7       	in	r18, 0x3d	; 61
     544:	3e b7       	in	r19, 0x3e	; 62
     546:	28 1b       	sub	r18, r24
     548:	39 0b       	sbc	r19, r25
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	f8 94       	cli
     54e:	3e bf       	out	0x3e, r19	; 62
     550:	0f be       	out	0x3f, r0	; 63
     552:	2d bf       	out	0x3d, r18	; 61
     554:	8d b7       	in	r24, 0x3d	; 61
     556:	9e b7       	in	r25, 0x3e	; 62
     558:	01 96       	adiw	r24, 0x01	; 1
     55a:	7c 01       	movw	r14, r24
	float volatile degrees;
	float volatile minutes;
	// Copy the degrees part into degreesString and convert it to a float
	strncpy(degreesString, s, degLength);
     55c:	ab 01       	movw	r20, r22
     55e:	b6 01       	movw	r22, r12
     560:	81 d5       	rcall	.+2818   	; 0x1064 <strncpy>
	degreesString[degLength] = '\0';
     562:	f7 01       	movw	r30, r14
     564:	e0 0f       	add	r30, r16
     566:	f1 1f       	adc	r31, r17
     568:	10 82       	st	Z, r1
	degrees = atof(degreesString);
     56a:	c7 01       	movw	r24, r14
     56c:	78 d5       	rcall	.+2800   	; 0x105e <atof>
     56e:	69 83       	std	Y+1, r22	; 0x01
     570:	7a 83       	std	Y+2, r23	; 0x02
     572:	8b 83       	std	Y+3, r24	; 0x03
     574:	9c 83       	std	Y+4, r25	; 0x04
	// Convert the minutes
	minutes = atof(s + degLength);
     576:	c6 01       	movw	r24, r12
     578:	80 0f       	add	r24, r16
     57a:	91 1f       	adc	r25, r17
     57c:	70 d5       	rcall	.+2784   	; 0x105e <atof>
     57e:	6d 83       	std	Y+5, r22	; 0x05
     580:	7e 83       	std	Y+6, r23	; 0x06
     582:	8f 83       	std	Y+7, r24	; 0x07
     584:	98 87       	std	Y+8, r25	; 0x08
	// Convert the minutes to decimal degrees
	return degrees + (minutes / 60);
     586:	6d 81       	ldd	r22, Y+5	; 0x05
     588:	7e 81       	ldd	r23, Y+6	; 0x06
     58a:	8f 81       	ldd	r24, Y+7	; 0x07
     58c:	98 85       	ldd	r25, Y+8	; 0x08
     58e:	c9 80       	ldd	r12, Y+1	; 0x01
     590:	da 80       	ldd	r13, Y+2	; 0x02
     592:	eb 80       	ldd	r14, Y+3	; 0x03
     594:	fc 80       	ldd	r15, Y+4	; 0x04
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	40 e7       	ldi	r20, 0x70	; 112
     59c:	52 e4       	ldi	r21, 0x42	; 66
     59e:	3a d3       	rcall	.+1652   	; 0xc14 <__divsf3>
     5a0:	a7 01       	movw	r20, r14
     5a2:	96 01       	movw	r18, r12
     5a4:	d3 d2       	rcall	.+1446   	; 0xb4c <__addsf3>
}
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	be be       	out	0x3e, r11	; 62
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	ad be       	out	0x3d, r10	; 61
     5b0:	28 96       	adiw	r28, 0x08	; 8
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	de bf       	out	0x3e, r29	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	cd bf       	out	0x3d, r28	; 61
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	df 90       	pop	r13
     5ca:	cf 90       	pop	r12
     5cc:	bf 90       	pop	r11
     5ce:	af 90       	pop	r10
     5d0:	08 95       	ret

000005d2 <parseGGA>:
// Parameters:
//		packet:		the GGA message string
//		GPSdata:	the struct that accepts the final calculated data
// Returns:
//		Nothing
void parseGGA(char *packet, struct GPSStruct *GPSdata) {
     5d2:	0f 93       	push	r16
     5d4:	1f 93       	push	r17
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
     5de:	c3 50       	subi	r28, 0x03	; 3
     5e0:	d1 40       	sbci	r29, 0x01	; 1
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	f8 94       	cli
     5e6:	de bf       	out	0x3e, r29	; 62
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	cd bf       	out	0x3d, r28	; 61
     5ec:	9c 01       	movw	r18, r24
     5ee:	8b 01       	movw	r16, r22
	char packetIn[256];
	char* packetCopy;
	packetCopy = packetIn;
     5f0:	ce 01       	movw	r24, r28
     5f2:	01 96       	adiw	r24, 0x01	; 1
     5f4:	cf 5f       	subi	r28, 0xFF	; 255
     5f6:	de 4f       	sbci	r29, 0xFE	; 254
     5f8:	99 83       	std	Y+1, r25	; 0x01
     5fa:	88 83       	st	Y, r24
     5fc:	c1 50       	subi	r28, 0x01	; 1
     5fe:	d1 40       	sbci	r29, 0x01	; 1
	strncpy(packetIn, packet, 256);
     600:	40 e0       	ldi	r20, 0x00	; 0
     602:	51 e0       	ldi	r21, 0x01	; 1
     604:	b9 01       	movw	r22, r18
     606:	2e d5       	rcall	.+2652   	; 0x1064 <strncpy>
	uint8_t volatile i = 0;
     608:	cd 5f       	subi	r28, 0xFD	; 253
     60a:	de 4f       	sbci	r29, 0xFE	; 254
     60c:	18 82       	st	Y, r1
     60e:	c3 50       	subi	r28, 0x03	; 3
     610:	d1 40       	sbci	r29, 0x01	; 1
	//USARTTX('\n', GPSPORT);
	//msgIndex = 0;
	//#endif
	
	// Skip the xxGGA and time fields
	for(i = 0; i < 2; i++) {
     612:	cd 5f       	subi	r28, 0xFD	; 253
     614:	de 4f       	sbci	r29, 0xFE	; 254
     616:	18 82       	st	Y, r1
     618:	c3 50       	subi	r28, 0x03	; 3
     61a:	d1 40       	sbci	r29, 0x01	; 1
     61c:	cd 5f       	subi	r28, 0xFD	; 253
     61e:	de 4f       	sbci	r29, 0xFE	; 254
     620:	88 81       	ld	r24, Y
     622:	c3 50       	subi	r28, 0x03	; 3
     624:	d1 40       	sbci	r29, 0x01	; 1
     626:	82 30       	cpi	r24, 0x02	; 2
     628:	c0 f4       	brcc	.+48     	; 0x65a <parseGGA+0x88>
		strsep(&packetCopy, ",");
     62a:	63 e4       	ldi	r22, 0x43	; 67
     62c:	71 e0       	ldi	r23, 0x01	; 1
     62e:	ce 01       	movw	r24, r28
     630:	8f 5f       	subi	r24, 0xFF	; 255
     632:	9e 4f       	sbci	r25, 0xFE	; 254
     634:	26 d5       	rcall	.+2636   	; 0x1082 <strsep>
	//USARTTX('\n', GPSPORT);
	//msgIndex = 0;
	//#endif
	
	// Skip the xxGGA and time fields
	for(i = 0; i < 2; i++) {
     636:	cd 5f       	subi	r28, 0xFD	; 253
     638:	de 4f       	sbci	r29, 0xFE	; 254
     63a:	88 81       	ld	r24, Y
     63c:	c3 50       	subi	r28, 0x03	; 3
     63e:	d1 40       	sbci	r29, 0x01	; 1
     640:	8f 5f       	subi	r24, 0xFF	; 255
     642:	cd 5f       	subi	r28, 0xFD	; 253
     644:	de 4f       	sbci	r29, 0xFE	; 254
     646:	88 83       	st	Y, r24
     648:	c3 50       	subi	r28, 0x03	; 3
     64a:	d1 40       	sbci	r29, 0x01	; 1
     64c:	cd 5f       	subi	r28, 0xFD	; 253
     64e:	de 4f       	sbci	r29, 0xFE	; 254
     650:	88 81       	ld	r24, Y
     652:	c3 50       	subi	r28, 0x03	; 3
     654:	d1 40       	sbci	r29, 0x01	; 1
     656:	82 30       	cpi	r24, 0x02	; 2
     658:	40 f3       	brcs	.-48     	; 0x62a <parseGGA+0x58>
		strsep(&packetCopy, ",");
	}
	i = 0;
     65a:	cd 5f       	subi	r28, 0xFD	; 253
     65c:	de 4f       	sbci	r29, 0xFE	; 254
     65e:	18 82       	st	Y, r1
     660:	c3 50       	subi	r28, 0x03	; 3
     662:	d1 40       	sbci	r29, 0x01	; 1
	
	// get the latitude
	msgPart = strsep(&packetCopy, ",");
     664:	63 e4       	ldi	r22, 0x43	; 67
     666:	71 e0       	ldi	r23, 0x01	; 1
     668:	ce 01       	movw	r24, r28
     66a:	8f 5f       	subi	r24, 0xFF	; 255
     66c:	9e 4f       	sbci	r25, 0xFE	; 254
     66e:	09 d5       	rcall	.+2578   	; 0x1082 <strsep>
	if (*msgPart){
     670:	fc 01       	movw	r30, r24
     672:	20 81       	ld	r18, Z
     674:	22 23       	and	r18, r18
     676:	99 f0       	breq	.+38     	; 0x69e <parseGGA+0xcc>
		GPSdata->latitude = parseDegreesMinutes(msgPart, 2);
     678:	62 e0       	ldi	r22, 0x02	; 2
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	4a df       	rcall	.-364    	; 0x512 <parseDegreesMinutes>
     67e:	f8 01       	movw	r30, r16
     680:	62 83       	std	Z+2, r22	; 0x02
     682:	73 83       	std	Z+3, r23	; 0x03
     684:	84 83       	std	Z+4, r24	; 0x04
     686:	95 83       	std	Z+5, r25	; 0x05
		GPSdata->GPSAltitude = 0;
		return;
	}
	
	// get the N/S component of the latitude. If it's 'S', then make the latitude negative
	msgPart = strsep(&packetCopy, ",");
     688:	63 e4       	ldi	r22, 0x43	; 67
     68a:	71 e0       	ldi	r23, 0x01	; 1
     68c:	ce 01       	movw	r24, r28
     68e:	8f 5f       	subi	r24, 0xFF	; 255
     690:	9e 4f       	sbci	r25, 0xFE	; 254
     692:	f7 d4       	rcall	.+2542   	; 0x1082 <strsep>
	if(*msgPart == 'S') {
     694:	fc 01       	movw	r30, r24
     696:	80 81       	ld	r24, Z
     698:	83 35       	cpi	r24, 0x53	; 83
     69a:	c1 f4       	brne	.+48     	; 0x6cc <parseGGA+0xfa>
     69c:	0c c0       	rjmp	.+24     	; 0x6b6 <parseGGA+0xe4>
	// get the latitude
	msgPart = strsep(&packetCopy, ",");
	if (*msgPart){
		GPSdata->latitude = parseDegreesMinutes(msgPart, 2);
	} else {
		GPSdata->latitude = 0;
     69e:	f8 01       	movw	r30, r16
     6a0:	12 82       	std	Z+2, r1	; 0x02
     6a2:	13 82       	std	Z+3, r1	; 0x03
     6a4:	14 82       	std	Z+4, r1	; 0x04
     6a6:	15 82       	std	Z+5, r1	; 0x05
		GPSdata->longitude = 0;
     6a8:	16 82       	std	Z+6, r1	; 0x06
     6aa:	17 82       	std	Z+7, r1	; 0x07
     6ac:	10 86       	std	Z+8, r1	; 0x08
     6ae:	11 86       	std	Z+9, r1	; 0x09
		GPSdata->GPSAltitude = 0;
     6b0:	11 82       	std	Z+1, r1	; 0x01
     6b2:	10 82       	st	Z, r1
		return;
     6b4:	9a c0       	rjmp	.+308    	; 0x7ea <parseGGA+0x218>
	}
	
	// get the N/S component of the latitude. If it's 'S', then make the latitude negative
	msgPart = strsep(&packetCopy, ",");
	if(*msgPart == 'S') {
		GPSdata->latitude = -GPSdata->latitude;
     6b6:	f8 01       	movw	r30, r16
     6b8:	82 81       	ldd	r24, Z+2	; 0x02
     6ba:	93 81       	ldd	r25, Z+3	; 0x03
     6bc:	a4 81       	ldd	r26, Z+4	; 0x04
     6be:	b5 81       	ldd	r27, Z+5	; 0x05
     6c0:	b0 58       	subi	r27, 0x80	; 128
     6c2:	82 83       	std	Z+2, r24	; 0x02
     6c4:	93 83       	std	Z+3, r25	; 0x03
     6c6:	a4 83       	std	Z+4, r26	; 0x04
     6c8:	b5 83       	std	Z+5, r27	; 0x05
     6ca:	0e c0       	rjmp	.+28     	; 0x6e8 <parseGGA+0x116>
	} else if (*msgPart != 'N'){
     6cc:	8e 34       	cpi	r24, 0x4E	; 78
     6ce:	61 f0       	breq	.+24     	; 0x6e8 <parseGGA+0x116>
		GPSdata->latitude = 0;
     6d0:	f8 01       	movw	r30, r16
     6d2:	12 82       	std	Z+2, r1	; 0x02
     6d4:	13 82       	std	Z+3, r1	; 0x03
     6d6:	14 82       	std	Z+4, r1	; 0x04
     6d8:	15 82       	std	Z+5, r1	; 0x05
		GPSdata->longitude = 0;
     6da:	16 82       	std	Z+6, r1	; 0x06
     6dc:	17 82       	std	Z+7, r1	; 0x07
     6de:	10 86       	std	Z+8, r1	; 0x08
     6e0:	11 86       	std	Z+9, r1	; 0x09
		GPSdata->GPSAltitude = 0;
     6e2:	11 82       	std	Z+1, r1	; 0x01
     6e4:	10 82       	st	Z, r1
		return;
     6e6:	81 c0       	rjmp	.+258    	; 0x7ea <parseGGA+0x218>
	}
	
	// get the longitude
	msgPart = strsep(&packetCopy, ",");
     6e8:	63 e4       	ldi	r22, 0x43	; 67
     6ea:	71 e0       	ldi	r23, 0x01	; 1
     6ec:	ce 01       	movw	r24, r28
     6ee:	8f 5f       	subi	r24, 0xFF	; 255
     6f0:	9e 4f       	sbci	r25, 0xFE	; 254
     6f2:	c7 d4       	rcall	.+2446   	; 0x1082 <strsep>
	// Debug to see what it thinks the longitude is
	
	if (*msgPart){
     6f4:	fc 01       	movw	r30, r24
     6f6:	20 81       	ld	r18, Z
     6f8:	22 23       	and	r18, r18
     6fa:	99 f0       	breq	.+38     	; 0x722 <parseGGA+0x150>
		GPSdata->longitude = parseDegreesMinutes(msgPart, 3);
     6fc:	63 e0       	ldi	r22, 0x03	; 3
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	08 df       	rcall	.-496    	; 0x512 <parseDegreesMinutes>
     702:	f8 01       	movw	r30, r16
     704:	66 83       	std	Z+6, r22	; 0x06
     706:	77 83       	std	Z+7, r23	; 0x07
     708:	80 87       	std	Z+8, r24	; 0x08
     70a:	91 87       	std	Z+9, r25	; 0x09
		GPSdata->longitude = 0;
		GPSdata->GPSAltitude = 0;
		return;
	}
	// get the E/W component of the longitude. If it's 'W', then make the longitude negative
	msgPart = strsep(&packetCopy, ",");
     70c:	63 e4       	ldi	r22, 0x43	; 67
     70e:	71 e0       	ldi	r23, 0x01	; 1
     710:	ce 01       	movw	r24, r28
     712:	8f 5f       	subi	r24, 0xFF	; 255
     714:	9e 4f       	sbci	r25, 0xFE	; 254
     716:	b5 d4       	rcall	.+2410   	; 0x1082 <strsep>
	if(*msgPart == 'W') {
     718:	fc 01       	movw	r30, r24
     71a:	80 81       	ld	r24, Z
     71c:	87 35       	cpi	r24, 0x57	; 87
     71e:	c1 f4       	brne	.+48     	; 0x750 <parseGGA+0x17e>
     720:	0c c0       	rjmp	.+24     	; 0x73a <parseGGA+0x168>
	// Debug to see what it thinks the longitude is
	
	if (*msgPart){
		GPSdata->longitude = parseDegreesMinutes(msgPart, 3);
	} else {
		GPSdata->latitude = 0;
     722:	f8 01       	movw	r30, r16
     724:	12 82       	std	Z+2, r1	; 0x02
     726:	13 82       	std	Z+3, r1	; 0x03
     728:	14 82       	std	Z+4, r1	; 0x04
     72a:	15 82       	std	Z+5, r1	; 0x05
		GPSdata->longitude = 0;
     72c:	16 82       	std	Z+6, r1	; 0x06
     72e:	17 82       	std	Z+7, r1	; 0x07
     730:	10 86       	std	Z+8, r1	; 0x08
     732:	11 86       	std	Z+9, r1	; 0x09
		GPSdata->GPSAltitude = 0;
     734:	11 82       	std	Z+1, r1	; 0x01
     736:	10 82       	st	Z, r1
		return;
     738:	58 c0       	rjmp	.+176    	; 0x7ea <parseGGA+0x218>
	}
	// get the E/W component of the longitude. If it's 'W', then make the longitude negative
	msgPart = strsep(&packetCopy, ",");
	if(*msgPart == 'W') {
		GPSdata->longitude = -GPSdata->longitude;
     73a:	f8 01       	movw	r30, r16
     73c:	86 81       	ldd	r24, Z+6	; 0x06
     73e:	97 81       	ldd	r25, Z+7	; 0x07
     740:	a0 85       	ldd	r26, Z+8	; 0x08
     742:	b1 85       	ldd	r27, Z+9	; 0x09
     744:	b0 58       	subi	r27, 0x80	; 128
     746:	86 83       	std	Z+6, r24	; 0x06
     748:	97 83       	std	Z+7, r25	; 0x07
     74a:	a0 87       	std	Z+8, r26	; 0x08
     74c:	b1 87       	std	Z+9, r27	; 0x09
     74e:	0e c0       	rjmp	.+28     	; 0x76c <parseGGA+0x19a>
	} else if (*msgPart != 'E'){
     750:	85 34       	cpi	r24, 0x45	; 69
     752:	61 f0       	breq	.+24     	; 0x76c <parseGGA+0x19a>
		GPSdata->latitude = 0;
     754:	f8 01       	movw	r30, r16
     756:	12 82       	std	Z+2, r1	; 0x02
     758:	13 82       	std	Z+3, r1	; 0x03
     75a:	14 82       	std	Z+4, r1	; 0x04
     75c:	15 82       	std	Z+5, r1	; 0x05
		GPSdata->longitude = 0;
     75e:	16 82       	std	Z+6, r1	; 0x06
     760:	17 82       	std	Z+7, r1	; 0x07
     762:	10 86       	std	Z+8, r1	; 0x08
     764:	11 86       	std	Z+9, r1	; 0x09
		GPSdata->GPSAltitude = 0;
     766:	11 82       	std	Z+1, r1	; 0x01
     768:	10 82       	st	Z, r1
		return;
     76a:	3f c0       	rjmp	.+126    	; 0x7ea <parseGGA+0x218>
	}
	
	// Skip the quality, numSV, and HDOP fields
	for(i = 0; i < 3; i++) {
     76c:	cd 5f       	subi	r28, 0xFD	; 253
     76e:	de 4f       	sbci	r29, 0xFE	; 254
     770:	18 82       	st	Y, r1
     772:	c3 50       	subi	r28, 0x03	; 3
     774:	d1 40       	sbci	r29, 0x01	; 1
     776:	cd 5f       	subi	r28, 0xFD	; 253
     778:	de 4f       	sbci	r29, 0xFE	; 254
     77a:	88 81       	ld	r24, Y
     77c:	c3 50       	subi	r28, 0x03	; 3
     77e:	d1 40       	sbci	r29, 0x01	; 1
     780:	83 30       	cpi	r24, 0x03	; 3
     782:	c0 f4       	brcc	.+48     	; 0x7b4 <parseGGA+0x1e2>
		strsep(&packetCopy, ",");
     784:	63 e4       	ldi	r22, 0x43	; 67
     786:	71 e0       	ldi	r23, 0x01	; 1
     788:	ce 01       	movw	r24, r28
     78a:	8f 5f       	subi	r24, 0xFF	; 255
     78c:	9e 4f       	sbci	r25, 0xFE	; 254
     78e:	79 d4       	rcall	.+2290   	; 0x1082 <strsep>
		GPSdata->GPSAltitude = 0;
		return;
	}
	
	// Skip the quality, numSV, and HDOP fields
	for(i = 0; i < 3; i++) {
     790:	cd 5f       	subi	r28, 0xFD	; 253
     792:	de 4f       	sbci	r29, 0xFE	; 254
     794:	88 81       	ld	r24, Y
     796:	c3 50       	subi	r28, 0x03	; 3
     798:	d1 40       	sbci	r29, 0x01	; 1
     79a:	8f 5f       	subi	r24, 0xFF	; 255
     79c:	cd 5f       	subi	r28, 0xFD	; 253
     79e:	de 4f       	sbci	r29, 0xFE	; 254
     7a0:	88 83       	st	Y, r24
     7a2:	c3 50       	subi	r28, 0x03	; 3
     7a4:	d1 40       	sbci	r29, 0x01	; 1
     7a6:	cd 5f       	subi	r28, 0xFD	; 253
     7a8:	de 4f       	sbci	r29, 0xFE	; 254
     7aa:	88 81       	ld	r24, Y
     7ac:	c3 50       	subi	r28, 0x03	; 3
     7ae:	d1 40       	sbci	r29, 0x01	; 1
     7b0:	83 30       	cpi	r24, 0x03	; 3
     7b2:	40 f3       	brcs	.-48     	; 0x784 <parseGGA+0x1b2>
		strsep(&packetCopy, ",");
	}
	
	// Get the altitude. If there is no altitude, then set it to zero.
	msgPart = strsep(&packetCopy, ",");
     7b4:	63 e4       	ldi	r22, 0x43	; 67
     7b6:	71 e0       	ldi	r23, 0x01	; 1
     7b8:	ce 01       	movw	r24, r28
     7ba:	8f 5f       	subi	r24, 0xFF	; 255
     7bc:	9e 4f       	sbci	r25, 0xFE	; 254
     7be:	61 d4       	rcall	.+2242   	; 0x1082 <strsep>
	if(*msgPart != '\0') {
     7c0:	fc 01       	movw	r30, r24
     7c2:	20 81       	ld	r18, Z
     7c4:	22 23       	and	r18, r18
     7c6:	31 f0       	breq	.+12     	; 0x7d4 <parseGGA+0x202>
		GPSdata->GPSAltitude = atof(msgPart);
     7c8:	4a d4       	rcall	.+2196   	; 0x105e <atof>
     7ca:	91 d2       	rcall	.+1314   	; 0xcee <__fixunssfsi>
     7cc:	f8 01       	movw	r30, r16
     7ce:	71 83       	std	Z+1, r23	; 0x01
     7d0:	60 83       	st	Z, r22
     7d2:	0b c0       	rjmp	.+22     	; 0x7ea <parseGGA+0x218>
	} else {
		GPSdata->latitude = 0;
     7d4:	f8 01       	movw	r30, r16
     7d6:	12 82       	std	Z+2, r1	; 0x02
     7d8:	13 82       	std	Z+3, r1	; 0x03
     7da:	14 82       	std	Z+4, r1	; 0x04
     7dc:	15 82       	std	Z+5, r1	; 0x05
		GPSdata->longitude = 0;
     7de:	16 82       	std	Z+6, r1	; 0x06
     7e0:	17 82       	std	Z+7, r1	; 0x07
     7e2:	10 86       	std	Z+8, r1	; 0x08
     7e4:	11 86       	std	Z+9, r1	; 0x09
		GPSdata->GPSAltitude = 0;
     7e6:	11 82       	std	Z+1, r1	; 0x01
     7e8:	10 82       	st	Z, r1
		return;
	}
}
     7ea:	cd 5f       	subi	r28, 0xFD	; 253
     7ec:	de 4f       	sbci	r29, 0xFE	; 254
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
     800:	08 95       	ret

00000802 <getGPSData>:
// Once message end flag is set, puts data in the GPS struct and resets end flag
// Parameters:
//		GPSdata:	Struct that accepts data
//	Returns:
//		Nothing
void getGPSData(struct GPSStruct *GPSdata){
     802:	4f 92       	push	r4
     804:	5f 92       	push	r5
     806:	6f 92       	push	r6
     808:	7f 92       	push	r7
     80a:	8f 92       	push	r8
     80c:	9f 92       	push	r9
     80e:	af 92       	push	r10
     810:	bf 92       	push	r11
     812:	cf 92       	push	r12
     814:	df 92       	push	r13
     816:	ef 92       	push	r14
     818:	ff 92       	push	r15
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62
     826:	c2 51       	subi	r28, 0x12	; 18
     828:	d1 40       	sbci	r29, 0x01	; 1
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	8c 01       	movw	r16, r24
	#ifdef DOUNITTEST
	uint8_t volatile echoLength = 0;
     836:	19 82       	std	Y+1, r1	; 0x01
	uint8_t volatile echoIndex = 0;
     838:	1a 82       	std	Y+2, r1	; 0x02
	int32_t volatile latConvert = 0; 
     83a:	1b 82       	std	Y+3, r1	; 0x03
     83c:	1c 82       	std	Y+4, r1	; 0x04
     83e:	1d 82       	std	Y+5, r1	; 0x05
     840:	1e 82       	std	Y+6, r1	; 0x06
	int32_t volatile longConvert = 0;
     842:	1f 82       	std	Y+7, r1	; 0x07
     844:	18 86       	std	Y+8, r1	; 0x08
     846:	19 86       	std	Y+9, r1	; 0x09
     848:	1a 86       	std	Y+10, r1	; 0x0a
	char echoLatLongAlt[256];
	#endif
	if (msgEndFlag){
     84a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <msgEndFlag>
     84e:	99 23       	and	r25, r25
     850:	09 f4       	brne	.+2      	; 0x854 <getGPSData+0x52>
     852:	bd c0       	rjmp	.+378    	; 0x9ce <getGPSData+0x1cc>
		parseGGA(gpsBuffer, GPSdata);
     854:	b8 01       	movw	r22, r16
     856:	80 e6       	ldi	r24, 0x60	; 96
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	bb de       	rcall	.-650    	; 0x5d2 <parseGGA>
		msgEndFlag = 0;
     85c:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <msgEndFlag>
		#ifdef DOUNITTEST
		PORTB &= ~(1 << 3);
     860:	c3 98       	cbi	0x18, 3	; 24
		latConvert = (int32_t)GPSdata->latitude;
     862:	d8 01       	movw	r26, r16
     864:	12 96       	adiw	r26, 0x02	; 2
     866:	4d 90       	ld	r4, X+
     868:	5d 90       	ld	r5, X+
     86a:	6d 90       	ld	r6, X+
     86c:	7c 90       	ld	r7, X
     86e:	15 97       	sbiw	r26, 0x05	; 5
     870:	c5 5f       	subi	r28, 0xF5	; 245
     872:	de 4f       	sbci	r29, 0xFE	; 254
     874:	48 82       	st	Y, r4
     876:	59 82       	std	Y+1, r5	; 0x01
     878:	6a 82       	std	Y+2, r6	; 0x02
     87a:	7b 82       	std	Y+3, r7	; 0x03
     87c:	cb 50       	subi	r28, 0x0B	; 11
     87e:	d1 40       	sbci	r29, 0x01	; 1
     880:	c3 01       	movw	r24, r6
     882:	b2 01       	movw	r22, r4
     884:	2f d2       	rcall	.+1118   	; 0xce4 <__fixsfsi>
     886:	6b 83       	std	Y+3, r22	; 0x03
     888:	7c 83       	std	Y+4, r23	; 0x04
     88a:	8d 83       	std	Y+5, r24	; 0x05
     88c:	9e 83       	std	Y+6, r25	; 0x06
		longConvert = (int32_t)GPSdata->longitude;
     88e:	f8 01       	movw	r30, r16
     890:	86 80       	ldd	r8, Z+6	; 0x06
     892:	97 80       	ldd	r9, Z+7	; 0x07
     894:	a0 84       	ldd	r10, Z+8	; 0x08
     896:	b1 84       	ldd	r11, Z+9	; 0x09
     898:	c5 01       	movw	r24, r10
     89a:	b4 01       	movw	r22, r8
     89c:	23 d2       	rcall	.+1094   	; 0xce4 <__fixsfsi>
     89e:	6f 83       	std	Y+7, r22	; 0x07
     8a0:	78 87       	std	Y+8, r23	; 0x08
     8a2:	89 87       	std	Y+9, r24	; 0x09
     8a4:	9a 87       	std	Y+10, r25	; 0x0a
		echoLength = sprintf(echoLatLongAlt, "%ld.%ld %ld.%ld %u %u*", latConvert, labs((int32_t)((GPSdata->latitude - latConvert)*10000)), longConvert, labs((int32_t)((GPSdata->longitude - longConvert)*10000)), GPSdata->GPSAltitude, commaCount);
     8a6:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <__data_end>
     8aa:	6f 81       	ldd	r22, Y+7	; 0x07
     8ac:	78 85       	ldd	r23, Y+8	; 0x08
     8ae:	89 85       	ldd	r24, Y+9	; 0x09
     8b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     8b2:	cf 80       	ldd	r12, Y+7	; 0x07
     8b4:	d8 84       	ldd	r13, Y+8	; 0x08
     8b6:	e9 84       	ldd	r14, Y+9	; 0x09
     8b8:	fa 84       	ldd	r15, Y+10	; 0x0a
     8ba:	4b 80       	ldd	r4, Y+3	; 0x03
     8bc:	5c 80       	ldd	r5, Y+4	; 0x04
     8be:	6d 80       	ldd	r6, Y+5	; 0x05
     8c0:	7e 80       	ldd	r7, Y+6	; 0x06
     8c2:	c1 5f       	subi	r28, 0xF1	; 241
     8c4:	de 4f       	sbci	r29, 0xFE	; 254
     8c6:	48 82       	st	Y, r4
     8c8:	59 82       	std	Y+1, r5	; 0x01
     8ca:	6a 82       	std	Y+2, r6	; 0x02
     8cc:	7b 82       	std	Y+3, r7	; 0x03
     8ce:	cf 50       	subi	r28, 0x0F	; 15
     8d0:	d1 40       	sbci	r29, 0x01	; 1
     8d2:	4b 80       	ldd	r4, Y+3	; 0x03
     8d4:	5c 80       	ldd	r5, Y+4	; 0x04
     8d6:	6d 80       	ldd	r6, Y+5	; 0x05
     8d8:	7e 80       	ldd	r7, Y+6	; 0x06
     8da:	1f 92       	push	r1
     8dc:	2f 93       	push	r18
     8de:	d8 01       	movw	r26, r16
     8e0:	11 96       	adiw	r26, 0x01	; 1
     8e2:	2c 91       	ld	r18, X
     8e4:	11 97       	sbiw	r26, 0x01	; 1
     8e6:	2f 93       	push	r18
     8e8:	2c 91       	ld	r18, X
     8ea:	2f 93       	push	r18
     8ec:	2e d2       	rcall	.+1116   	; 0xd4a <__floatsisf>
     8ee:	9b 01       	movw	r18, r22
     8f0:	ac 01       	movw	r20, r24
     8f2:	c5 01       	movw	r24, r10
     8f4:	b4 01       	movw	r22, r8
     8f6:	29 d1       	rcall	.+594    	; 0xb4a <__subsf3>
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e4       	ldi	r19, 0x40	; 64
     8fc:	4c e1       	ldi	r20, 0x1C	; 28
     8fe:	56 e4       	ldi	r21, 0x46	; 70
     900:	b0 d2       	rcall	.+1376   	; 0xe62 <__mulsf3>
     902:	f0 d1       	rcall	.+992    	; 0xce4 <__fixsfsi>
     904:	99 23       	and	r25, r25
     906:	3c f4       	brge	.+14     	; 0x916 <getGPSData+0x114>
     908:	90 95       	com	r25
     90a:	80 95       	com	r24
     90c:	70 95       	com	r23
     90e:	61 95       	neg	r22
     910:	7f 4f       	sbci	r23, 0xFF	; 255
     912:	8f 4f       	sbci	r24, 0xFF	; 255
     914:	9f 4f       	sbci	r25, 0xFF	; 255
     916:	9f 93       	push	r25
     918:	8f 93       	push	r24
     91a:	7f 93       	push	r23
     91c:	6f 93       	push	r22
     91e:	ff 92       	push	r15
     920:	ef 92       	push	r14
     922:	df 92       	push	r13
     924:	cf 92       	push	r12
     926:	c1 5f       	subi	r28, 0xF1	; 241
     928:	de 4f       	sbci	r29, 0xFE	; 254
     92a:	68 81       	ld	r22, Y
     92c:	79 81       	ldd	r23, Y+1	; 0x01
     92e:	8a 81       	ldd	r24, Y+2	; 0x02
     930:	9b 81       	ldd	r25, Y+3	; 0x03
     932:	cf 50       	subi	r28, 0x0F	; 15
     934:	d1 40       	sbci	r29, 0x01	; 1
     936:	09 d2       	rcall	.+1042   	; 0xd4a <__floatsisf>
     938:	9b 01       	movw	r18, r22
     93a:	ac 01       	movw	r20, r24
     93c:	c5 5f       	subi	r28, 0xF5	; 245
     93e:	de 4f       	sbci	r29, 0xFE	; 254
     940:	68 81       	ld	r22, Y
     942:	79 81       	ldd	r23, Y+1	; 0x01
     944:	8a 81       	ldd	r24, Y+2	; 0x02
     946:	9b 81       	ldd	r25, Y+3	; 0x03
     948:	cb 50       	subi	r28, 0x0B	; 11
     94a:	d1 40       	sbci	r29, 0x01	; 1
     94c:	fe d0       	rcall	.+508    	; 0xb4a <__subsf3>
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	30 e4       	ldi	r19, 0x40	; 64
     952:	4c e1       	ldi	r20, 0x1C	; 28
     954:	56 e4       	ldi	r21, 0x46	; 70
     956:	85 d2       	rcall	.+1290   	; 0xe62 <__mulsf3>
     958:	c5 d1       	rcall	.+906    	; 0xce4 <__fixsfsi>
     95a:	99 23       	and	r25, r25
     95c:	3c f4       	brge	.+14     	; 0x96c <getGPSData+0x16a>
     95e:	90 95       	com	r25
     960:	80 95       	com	r24
     962:	70 95       	com	r23
     964:	61 95       	neg	r22
     966:	7f 4f       	sbci	r23, 0xFF	; 255
     968:	8f 4f       	sbci	r24, 0xFF	; 255
     96a:	9f 4f       	sbci	r25, 0xFF	; 255
     96c:	9f 93       	push	r25
     96e:	8f 93       	push	r24
     970:	7f 93       	push	r23
     972:	6f 93       	push	r22
     974:	7f 92       	push	r7
     976:	6f 92       	push	r6
     978:	5f 92       	push	r5
     97a:	4f 92       	push	r4
     97c:	85 e4       	ldi	r24, 0x45	; 69
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	9f 93       	push	r25
     982:	8f 93       	push	r24
     984:	ce 01       	movw	r24, r28
     986:	0b 96       	adiw	r24, 0x0b	; 11
     988:	9f 93       	push	r25
     98a:	8f 93       	push	r24
     98c:	92 d3       	rcall	.+1828   	; 0x10b2 <sprintf>
     98e:	89 83       	std	Y+1, r24	; 0x01
		for (echoIndex; echoIndex < echoLength; echoIndex++){
     990:	8a 81       	ldd	r24, Y+2	; 0x02
     992:	9a 81       	ldd	r25, Y+2	; 0x02
     994:	89 81       	ldd	r24, Y+1	; 0x01
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	cd bf       	out	0x3d, r28	; 61
     9a0:	98 17       	cp	r25, r24
     9a2:	88 f4       	brcc	.+34     	; 0x9c6 <getGPSData+0x1c4>
			USARTTX(echoLatLongAlt[echoIndex], GPSPORT);
     9a4:	8a 81       	ldd	r24, Y+2	; 0x02
     9a6:	eb e0       	ldi	r30, 0x0B	; 11
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	ec 0f       	add	r30, r28
     9ac:	fd 1f       	adc	r31, r29
     9ae:	e8 0f       	add	r30, r24
     9b0:	f1 1d       	adc	r31, r1
     9b2:	60 e0       	ldi	r22, 0x00	; 0
     9b4:	80 81       	ld	r24, Z
     9b6:	bb d0       	rcall	.+374    	; 0xb2e <USARTTX>
		#ifdef DOUNITTEST
		PORTB &= ~(1 << 3);
		latConvert = (int32_t)GPSdata->latitude;
		longConvert = (int32_t)GPSdata->longitude;
		echoLength = sprintf(echoLatLongAlt, "%ld.%ld %ld.%ld %u %u*", latConvert, labs((int32_t)((GPSdata->latitude - latConvert)*10000)), longConvert, labs((int32_t)((GPSdata->longitude - longConvert)*10000)), GPSdata->GPSAltitude, commaCount);
		for (echoIndex; echoIndex < echoLength; echoIndex++){
     9b8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ba:	8f 5f       	subi	r24, 0xFF	; 255
     9bc:	8a 83       	std	Y+2, r24	; 0x02
     9be:	9a 81       	ldd	r25, Y+2	; 0x02
     9c0:	89 81       	ldd	r24, Y+1	; 0x01
     9c2:	98 17       	cp	r25, r24
     9c4:	78 f3       	brcs	.-34     	; 0x9a4 <getGPSData+0x1a2>
			USARTTX(echoLatLongAlt[echoIndex], GPSPORT);
		}
		USARTTX('\n', GPSPORT);
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	8a e0       	ldi	r24, 0x0A	; 10
     9ca:	b1 d0       	rcall	.+354    	; 0xb2e <USARTTX>
		#endif
		sei();
     9cc:	78 94       	sei
	}
	return;
}
     9ce:	ce 5e       	subi	r28, 0xEE	; 238
     9d0:	de 4f       	sbci	r29, 0xFE	; 254
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	df 90       	pop	r13
     9ea:	cf 90       	pop	r12
     9ec:	bf 90       	pop	r11
     9ee:	af 90       	pop	r10
     9f0:	9f 90       	pop	r9
     9f2:	8f 90       	pop	r8
     9f4:	7f 90       	pop	r7
     9f6:	6f 90       	pop	r6
     9f8:	5f 90       	pop	r5
     9fa:	4f 90       	pop	r4
     9fc:	08 95       	ret

000009fe <testGPSInterrupt>:
}

// This function should test the GPS interrupt and parsing ability.
// GPS packets should be sent from laptop over FTDI to the board
// and an evident signal should be sent back if the test passed.
void testGPSInterrupt(void){
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	cd b7       	in	r28, 0x3d	; 61
     a04:	de b7       	in	r29, 0x3e	; 62
     a06:	2a 97       	sbiw	r28, 0x0a	; 10
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	f8 94       	cli
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	cd bf       	out	0x3d, r28	; 61
	struct GPSStruct gpsData;
	gpsData.GPSAltitude = 0;
     a12:	1a 82       	std	Y+2, r1	; 0x02
     a14:	19 82       	std	Y+1, r1	; 0x01
	gpsData.latitude = 0;
     a16:	1b 82       	std	Y+3, r1	; 0x03
     a18:	1c 82       	std	Y+4, r1	; 0x04
     a1a:	1d 82       	std	Y+5, r1	; 0x05
     a1c:	1e 82       	std	Y+6, r1	; 0x06
	gpsData.longitude = 0;
     a1e:	1f 82       	std	Y+7, r1	; 0x07
     a20:	18 86       	std	Y+8, r1	; 0x08
     a22:	19 86       	std	Y+9, r1	; 0x09
     a24:	1a 86       	std	Y+10, r1	; 0x0a
	DDRB = 255;
     a26:	8f ef       	ldi	r24, 0xFF	; 255
     a28:	87 bb       	out	0x17, r24	; 23
	PORTB = 255;
     a2a:	88 bb       	out	0x18, r24	; 24
     a2c:	2f ef       	ldi	r18, 0xFF	; 255
     a2e:	89 e6       	ldi	r24, 0x69	; 105
     a30:	98 e1       	ldi	r25, 0x18	; 24
     a32:	21 50       	subi	r18, 0x01	; 1
     a34:	80 40       	sbci	r24, 0x00	; 0
     a36:	90 40       	sbci	r25, 0x00	; 0
     a38:	e1 f7       	brne	.-8      	; 0xa32 <testGPSInterrupt+0x34>
     a3a:	00 c0       	rjmp	.+0      	; 0xa3c <testGPSInterrupt+0x3e>
     a3c:	00 00       	nop
	_delay_ms(500);
	PORTB = 0;
     a3e:	18 ba       	out	0x18, r1	; 24
	InitGPS();
     a40:	dc dc       	rcall	.-1608   	; 0x3fa <InitGPS>
	while (1){
		getGPSData(&gpsData);
     a42:	ce 01       	movw	r24, r28
     a44:	01 96       	adiw	r24, 0x01	; 1
     a46:	dd de       	rcall	.-582    	; 0x802 <getGPSData>
	}
     a48:	fc cf       	rjmp	.-8      	; 0xa42 <testGPSInterrupt+0x44>

00000a4a <beginUnitTest>:
}

void beginUnitTest() {
	srand(time(NULL));
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	5b db       	rcall	.-2378   	; 0x106 <time>
     a50:	cb 01       	movw	r24, r22
     a52:	fa d2       	rcall	.+1524   	; 0x1048 <srand>
	testGPSInterrupt();
     a54:	d4 df       	rcall	.-88     	; 0x9fe <testGPSInterrupt>

00000a56 <SetBR>:
#include "USARTComm.h"

uint16_t SetBR(uint32_t baud, uint8_t port){
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	00 d0       	rcall	.+0      	; 0xa5e <SetBR+0x8>
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
     a62:	14 2f       	mov	r17, r20
	uint16_t volatile SetUBRR;
	SetUBRR = (F_CPU/(16*baud) - 1);
     a64:	dc 01       	movw	r26, r24
     a66:	cb 01       	movw	r24, r22
     a68:	88 0f       	add	r24, r24
     a6a:	99 1f       	adc	r25, r25
     a6c:	aa 1f       	adc	r26, r26
     a6e:	bb 1f       	adc	r27, r27
     a70:	88 0f       	add	r24, r24
     a72:	99 1f       	adc	r25, r25
     a74:	aa 1f       	adc	r26, r26
     a76:	bb 1f       	adc	r27, r27
     a78:	9c 01       	movw	r18, r24
     a7a:	ad 01       	movw	r20, r26
     a7c:	22 0f       	add	r18, r18
     a7e:	33 1f       	adc	r19, r19
     a80:	44 1f       	adc	r20, r20
     a82:	55 1f       	adc	r21, r21
     a84:	22 0f       	add	r18, r18
     a86:	33 1f       	adc	r19, r19
     a88:	44 1f       	adc	r20, r20
     a8a:	55 1f       	adc	r21, r21
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	74 e2       	ldi	r23, 0x24	; 36
     a90:	84 ef       	ldi	r24, 0xF4	; 244
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	6d d2       	rcall	.+1242   	; 0xf70 <__udivmodsi4>
     a96:	21 50       	subi	r18, 0x01	; 1
     a98:	31 09       	sbc	r19, r1
     a9a:	3a 83       	std	Y+2, r19	; 0x02
     a9c:	29 83       	std	Y+1, r18	; 0x01
	if (SetUBRR > 4095 || !SetUBRR){
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	9a 81       	ldd	r25, Y+2	; 0x02
     aa2:	81 15       	cp	r24, r1
     aa4:	90 41       	sbci	r25, 0x10	; 16
     aa6:	d8 f4       	brcc	.+54     	; 0xade <SetBR+0x88>
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	9a 81       	ldd	r25, Y+2	; 0x02
     aac:	00 97       	sbiw	r24, 0x00	; 0
     aae:	c9 f0       	breq	.+50     	; 0xae2 <SetBR+0x8c>
		return 0;
	} else {
		if (port){
     ab0:	11 23       	and	r17, r17
     ab2:	59 f0       	breq	.+22     	; 0xaca <SetBR+0x74>
			UBRR1H = SetUBRR >> 8;
     ab4:	89 81       	ldd	r24, Y+1	; 0x01
     ab6:	9a 81       	ldd	r25, Y+2	; 0x02
     ab8:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
			UBRR1L = SetUBRR;
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	9a 81       	ldd	r25, Y+2	; 0x02
     ac0:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
			return SetUBRR;
     ac4:	89 81       	ldd	r24, Y+1	; 0x01
     ac6:	9a 81       	ldd	r25, Y+2	; 0x02
     ac8:	0c c0       	rjmp	.+24     	; 0xae2 <SetBR+0x8c>
		} else {
			UBRR0H = SetUBRR >> 8;
     aca:	89 81       	ldd	r24, Y+1	; 0x01
     acc:	9a 81       	ldd	r25, Y+2	; 0x02
     ace:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
			UBRR0L = SetUBRR;
     ad2:	89 81       	ldd	r24, Y+1	; 0x01
     ad4:	9a 81       	ldd	r25, Y+2	; 0x02
     ad6:	89 b9       	out	0x09, r24	; 9
			return SetUBRR;
     ad8:	89 81       	ldd	r24, Y+1	; 0x01
     ada:	9a 81       	ldd	r25, Y+2	; 0x02
     adc:	02 c0       	rjmp	.+4      	; 0xae2 <SetBR+0x8c>

uint16_t SetBR(uint32_t baud, uint8_t port){
	uint16_t volatile SetUBRR;
	SetUBRR = (F_CPU/(16*baud) - 1);
	if (SetUBRR > 4095 || !SetUBRR){
		return 0;
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
			UBRR0H = SetUBRR >> 8;
			UBRR0L = SetUBRR;
			return SetUBRR;
		}
	}
}
     ae2:	0f 90       	pop	r0
     ae4:	0f 90       	pop	r0
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	1f 91       	pop	r17
     aec:	08 95       	ret

00000aee <InitUSART>:

uint16_t InitUSART(uint32_t baud, uint8_t port){
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	00 d0       	rcall	.+0      	; 0xaf6 <InitUSART+0x8>
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
     afa:	14 2f       	mov	r17, r20
	uint16_t volatile SetUBRR;
	SetUBRR = SetBR(baud, port);
     afc:	ac df       	rcall	.-168    	; 0xa56 <SetBR>
     afe:	9a 83       	std	Y+2, r25	; 0x02
     b00:	89 83       	std	Y+1, r24	; 0x01
	if (SetUBRR){
     b02:	89 81       	ldd	r24, Y+1	; 0x01
     b04:	9a 81       	ldd	r25, Y+2	; 0x02
     b06:	00 97       	sbiw	r24, 0x00	; 0
     b08:	61 f0       	breq	.+24     	; 0xb22 <InitUSART+0x34>
		if (port){
     b0a:	11 23       	and	r17, r17
     b0c:	31 f0       	breq	.+12     	; 0xb1a <InitUSART+0x2c>
			UCSR1B = (1 << RXEN1)|(1 << TXEN1);
     b0e:	88 e1       	ldi	r24, 0x18	; 24
     b10:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
			return SetUBRR;
     b14:	89 81       	ldd	r24, Y+1	; 0x01
     b16:	9a 81       	ldd	r25, Y+2	; 0x02
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <InitUSART+0x34>
		} else {
			UCSR0B = (1 << RXEN0)|(1 << TXEN0)|(1 << RXCIE0);
     b1a:	88 e9       	ldi	r24, 0x98	; 152
     b1c:	8a b9       	out	0x0a, r24	; 10
			return SetUBRR;
     b1e:	89 81       	ldd	r24, Y+1	; 0x01
     b20:	9a 81       	ldd	r25, Y+2	; 0x02
		}
	} else {
		return 0;
	}
}
     b22:	0f 90       	pop	r0
     b24:	0f 90       	pop	r0
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	08 95       	ret

00000b2e <USARTTX>:

void USARTTX(uint8_t TXval, uint8_t port){
	if (port){	
     b2e:	66 23       	and	r22, r22
     b30:	41 f0       	breq	.+16     	; 0xb42 <USARTTX+0x14>
		while(!(UCSR1A & (1 << UDRE1))){}
     b32:	eb e9       	ldi	r30, 0x9B	; 155
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	90 81       	ld	r25, Z
     b38:	95 ff       	sbrs	r25, 5
     b3a:	fd cf       	rjmp	.-6      	; 0xb36 <USARTTX+0x8>
		UDR1 = TXval;
     b3c:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     b40:	08 95       	ret
	} else {
		while(!(UCSR0A & (1 << UDRE0))){}
     b42:	5d 9b       	sbis	0x0b, 5	; 11
     b44:	fe cf       	rjmp	.-4      	; 0xb42 <USARTTX+0x14>
		UDR0 = TXval;
     b46:	8c b9       	out	0x0c, r24	; 12
     b48:	08 95       	ret

00000b4a <__subsf3>:
     b4a:	50 58       	subi	r21, 0x80	; 128

00000b4c <__addsf3>:
     b4c:	bb 27       	eor	r27, r27
     b4e:	aa 27       	eor	r26, r26
     b50:	0e d0       	rcall	.+28     	; 0xb6e <__addsf3x>
     b52:	4d c1       	rjmp	.+666    	; 0xdee <__fp_round>
     b54:	3e d1       	rcall	.+636    	; 0xdd2 <__fp_pscA>
     b56:	30 f0       	brcs	.+12     	; 0xb64 <__addsf3+0x18>
     b58:	43 d1       	rcall	.+646    	; 0xde0 <__fp_pscB>
     b5a:	20 f0       	brcs	.+8      	; 0xb64 <__addsf3+0x18>
     b5c:	31 f4       	brne	.+12     	; 0xb6a <__addsf3+0x1e>
     b5e:	9f 3f       	cpi	r25, 0xFF	; 255
     b60:	11 f4       	brne	.+4      	; 0xb66 <__addsf3+0x1a>
     b62:	1e f4       	brtc	.+6      	; 0xb6a <__addsf3+0x1e>
     b64:	33 c1       	rjmp	.+614    	; 0xdcc <__fp_nan>
     b66:	0e f4       	brtc	.+2      	; 0xb6a <__addsf3+0x1e>
     b68:	e0 95       	com	r30
     b6a:	e7 fb       	bst	r30, 7
     b6c:	29 c1       	rjmp	.+594    	; 0xdc0 <__fp_inf>

00000b6e <__addsf3x>:
     b6e:	e9 2f       	mov	r30, r25
     b70:	4f d1       	rcall	.+670    	; 0xe10 <__fp_split3>
     b72:	80 f3       	brcs	.-32     	; 0xb54 <__addsf3+0x8>
     b74:	ba 17       	cp	r27, r26
     b76:	62 07       	cpc	r22, r18
     b78:	73 07       	cpc	r23, r19
     b7a:	84 07       	cpc	r24, r20
     b7c:	95 07       	cpc	r25, r21
     b7e:	18 f0       	brcs	.+6      	; 0xb86 <__addsf3x+0x18>
     b80:	71 f4       	brne	.+28     	; 0xb9e <__addsf3x+0x30>
     b82:	9e f5       	brtc	.+102    	; 0xbea <__addsf3x+0x7c>
     b84:	67 c1       	rjmp	.+718    	; 0xe54 <__fp_zero>
     b86:	0e f4       	brtc	.+2      	; 0xb8a <__addsf3x+0x1c>
     b88:	e0 95       	com	r30
     b8a:	0b 2e       	mov	r0, r27
     b8c:	ba 2f       	mov	r27, r26
     b8e:	a0 2d       	mov	r26, r0
     b90:	0b 01       	movw	r0, r22
     b92:	b9 01       	movw	r22, r18
     b94:	90 01       	movw	r18, r0
     b96:	0c 01       	movw	r0, r24
     b98:	ca 01       	movw	r24, r20
     b9a:	a0 01       	movw	r20, r0
     b9c:	11 24       	eor	r1, r1
     b9e:	ff 27       	eor	r31, r31
     ba0:	59 1b       	sub	r21, r25
     ba2:	99 f0       	breq	.+38     	; 0xbca <__addsf3x+0x5c>
     ba4:	59 3f       	cpi	r21, 0xF9	; 249
     ba6:	50 f4       	brcc	.+20     	; 0xbbc <__addsf3x+0x4e>
     ba8:	50 3e       	cpi	r21, 0xE0	; 224
     baa:	68 f1       	brcs	.+90     	; 0xc06 <__addsf3x+0x98>
     bac:	1a 16       	cp	r1, r26
     bae:	f0 40       	sbci	r31, 0x00	; 0
     bb0:	a2 2f       	mov	r26, r18
     bb2:	23 2f       	mov	r18, r19
     bb4:	34 2f       	mov	r19, r20
     bb6:	44 27       	eor	r20, r20
     bb8:	58 5f       	subi	r21, 0xF8	; 248
     bba:	f3 cf       	rjmp	.-26     	; 0xba2 <__addsf3x+0x34>
     bbc:	46 95       	lsr	r20
     bbe:	37 95       	ror	r19
     bc0:	27 95       	ror	r18
     bc2:	a7 95       	ror	r26
     bc4:	f0 40       	sbci	r31, 0x00	; 0
     bc6:	53 95       	inc	r21
     bc8:	c9 f7       	brne	.-14     	; 0xbbc <__addsf3x+0x4e>
     bca:	7e f4       	brtc	.+30     	; 0xbea <__addsf3x+0x7c>
     bcc:	1f 16       	cp	r1, r31
     bce:	ba 0b       	sbc	r27, r26
     bd0:	62 0b       	sbc	r22, r18
     bd2:	73 0b       	sbc	r23, r19
     bd4:	84 0b       	sbc	r24, r20
     bd6:	ba f0       	brmi	.+46     	; 0xc06 <__addsf3x+0x98>
     bd8:	91 50       	subi	r25, 0x01	; 1
     bda:	a1 f0       	breq	.+40     	; 0xc04 <__addsf3x+0x96>
     bdc:	ff 0f       	add	r31, r31
     bde:	bb 1f       	adc	r27, r27
     be0:	66 1f       	adc	r22, r22
     be2:	77 1f       	adc	r23, r23
     be4:	88 1f       	adc	r24, r24
     be6:	c2 f7       	brpl	.-16     	; 0xbd8 <__addsf3x+0x6a>
     be8:	0e c0       	rjmp	.+28     	; 0xc06 <__addsf3x+0x98>
     bea:	ba 0f       	add	r27, r26
     bec:	62 1f       	adc	r22, r18
     bee:	73 1f       	adc	r23, r19
     bf0:	84 1f       	adc	r24, r20
     bf2:	48 f4       	brcc	.+18     	; 0xc06 <__addsf3x+0x98>
     bf4:	87 95       	ror	r24
     bf6:	77 95       	ror	r23
     bf8:	67 95       	ror	r22
     bfa:	b7 95       	ror	r27
     bfc:	f7 95       	ror	r31
     bfe:	9e 3f       	cpi	r25, 0xFE	; 254
     c00:	08 f0       	brcs	.+2      	; 0xc04 <__addsf3x+0x96>
     c02:	b3 cf       	rjmp	.-154    	; 0xb6a <__addsf3+0x1e>
     c04:	93 95       	inc	r25
     c06:	88 0f       	add	r24, r24
     c08:	08 f0       	brcs	.+2      	; 0xc0c <__addsf3x+0x9e>
     c0a:	99 27       	eor	r25, r25
     c0c:	ee 0f       	add	r30, r30
     c0e:	97 95       	ror	r25
     c10:	87 95       	ror	r24
     c12:	08 95       	ret

00000c14 <__divsf3>:
     c14:	0c d0       	rcall	.+24     	; 0xc2e <__divsf3x>
     c16:	eb c0       	rjmp	.+470    	; 0xdee <__fp_round>
     c18:	e3 d0       	rcall	.+454    	; 0xde0 <__fp_pscB>
     c1a:	40 f0       	brcs	.+16     	; 0xc2c <__divsf3+0x18>
     c1c:	da d0       	rcall	.+436    	; 0xdd2 <__fp_pscA>
     c1e:	30 f0       	brcs	.+12     	; 0xc2c <__divsf3+0x18>
     c20:	21 f4       	brne	.+8      	; 0xc2a <__divsf3+0x16>
     c22:	5f 3f       	cpi	r21, 0xFF	; 255
     c24:	19 f0       	breq	.+6      	; 0xc2c <__divsf3+0x18>
     c26:	cc c0       	rjmp	.+408    	; 0xdc0 <__fp_inf>
     c28:	51 11       	cpse	r21, r1
     c2a:	15 c1       	rjmp	.+554    	; 0xe56 <__fp_szero>
     c2c:	cf c0       	rjmp	.+414    	; 0xdcc <__fp_nan>

00000c2e <__divsf3x>:
     c2e:	f0 d0       	rcall	.+480    	; 0xe10 <__fp_split3>
     c30:	98 f3       	brcs	.-26     	; 0xc18 <__divsf3+0x4>

00000c32 <__divsf3_pse>:
     c32:	99 23       	and	r25, r25
     c34:	c9 f3       	breq	.-14     	; 0xc28 <__divsf3+0x14>
     c36:	55 23       	and	r21, r21
     c38:	b1 f3       	breq	.-20     	; 0xc26 <__divsf3+0x12>
     c3a:	95 1b       	sub	r25, r21
     c3c:	55 0b       	sbc	r21, r21
     c3e:	bb 27       	eor	r27, r27
     c40:	aa 27       	eor	r26, r26
     c42:	62 17       	cp	r22, r18
     c44:	73 07       	cpc	r23, r19
     c46:	84 07       	cpc	r24, r20
     c48:	38 f0       	brcs	.+14     	; 0xc58 <__divsf3_pse+0x26>
     c4a:	9f 5f       	subi	r25, 0xFF	; 255
     c4c:	5f 4f       	sbci	r21, 0xFF	; 255
     c4e:	22 0f       	add	r18, r18
     c50:	33 1f       	adc	r19, r19
     c52:	44 1f       	adc	r20, r20
     c54:	aa 1f       	adc	r26, r26
     c56:	a9 f3       	breq	.-22     	; 0xc42 <__divsf3_pse+0x10>
     c58:	33 d0       	rcall	.+102    	; 0xcc0 <__divsf3_pse+0x8e>
     c5a:	0e 2e       	mov	r0, r30
     c5c:	3a f0       	brmi	.+14     	; 0xc6c <__divsf3_pse+0x3a>
     c5e:	e0 e8       	ldi	r30, 0x80	; 128
     c60:	30 d0       	rcall	.+96     	; 0xcc2 <__divsf3_pse+0x90>
     c62:	91 50       	subi	r25, 0x01	; 1
     c64:	50 40       	sbci	r21, 0x00	; 0
     c66:	e6 95       	lsr	r30
     c68:	00 1c       	adc	r0, r0
     c6a:	ca f7       	brpl	.-14     	; 0xc5e <__divsf3_pse+0x2c>
     c6c:	29 d0       	rcall	.+82     	; 0xcc0 <__divsf3_pse+0x8e>
     c6e:	fe 2f       	mov	r31, r30
     c70:	27 d0       	rcall	.+78     	; 0xcc0 <__divsf3_pse+0x8e>
     c72:	66 0f       	add	r22, r22
     c74:	77 1f       	adc	r23, r23
     c76:	88 1f       	adc	r24, r24
     c78:	bb 1f       	adc	r27, r27
     c7a:	26 17       	cp	r18, r22
     c7c:	37 07       	cpc	r19, r23
     c7e:	48 07       	cpc	r20, r24
     c80:	ab 07       	cpc	r26, r27
     c82:	b0 e8       	ldi	r27, 0x80	; 128
     c84:	09 f0       	breq	.+2      	; 0xc88 <__divsf3_pse+0x56>
     c86:	bb 0b       	sbc	r27, r27
     c88:	80 2d       	mov	r24, r0
     c8a:	bf 01       	movw	r22, r30
     c8c:	ff 27       	eor	r31, r31
     c8e:	93 58       	subi	r25, 0x83	; 131
     c90:	5f 4f       	sbci	r21, 0xFF	; 255
     c92:	2a f0       	brmi	.+10     	; 0xc9e <__divsf3_pse+0x6c>
     c94:	9e 3f       	cpi	r25, 0xFE	; 254
     c96:	51 05       	cpc	r21, r1
     c98:	68 f0       	brcs	.+26     	; 0xcb4 <__divsf3_pse+0x82>
     c9a:	92 c0       	rjmp	.+292    	; 0xdc0 <__fp_inf>
     c9c:	dc c0       	rjmp	.+440    	; 0xe56 <__fp_szero>
     c9e:	5f 3f       	cpi	r21, 0xFF	; 255
     ca0:	ec f3       	brlt	.-6      	; 0xc9c <__divsf3_pse+0x6a>
     ca2:	98 3e       	cpi	r25, 0xE8	; 232
     ca4:	dc f3       	brlt	.-10     	; 0xc9c <__divsf3_pse+0x6a>
     ca6:	86 95       	lsr	r24
     ca8:	77 95       	ror	r23
     caa:	67 95       	ror	r22
     cac:	b7 95       	ror	r27
     cae:	f7 95       	ror	r31
     cb0:	9f 5f       	subi	r25, 0xFF	; 255
     cb2:	c9 f7       	brne	.-14     	; 0xca6 <__divsf3_pse+0x74>
     cb4:	88 0f       	add	r24, r24
     cb6:	91 1d       	adc	r25, r1
     cb8:	96 95       	lsr	r25
     cba:	87 95       	ror	r24
     cbc:	97 f9       	bld	r25, 7
     cbe:	08 95       	ret
     cc0:	e1 e0       	ldi	r30, 0x01	; 1
     cc2:	66 0f       	add	r22, r22
     cc4:	77 1f       	adc	r23, r23
     cc6:	88 1f       	adc	r24, r24
     cc8:	bb 1f       	adc	r27, r27
     cca:	62 17       	cp	r22, r18
     ccc:	73 07       	cpc	r23, r19
     cce:	84 07       	cpc	r24, r20
     cd0:	ba 07       	cpc	r27, r26
     cd2:	20 f0       	brcs	.+8      	; 0xcdc <__divsf3_pse+0xaa>
     cd4:	62 1b       	sub	r22, r18
     cd6:	73 0b       	sbc	r23, r19
     cd8:	84 0b       	sbc	r24, r20
     cda:	ba 0b       	sbc	r27, r26
     cdc:	ee 1f       	adc	r30, r30
     cde:	88 f7       	brcc	.-30     	; 0xcc2 <__divsf3_pse+0x90>
     ce0:	e0 95       	com	r30
     ce2:	08 95       	ret

00000ce4 <__fixsfsi>:
     ce4:	04 d0       	rcall	.+8      	; 0xcee <__fixunssfsi>
     ce6:	68 94       	set
     ce8:	b1 11       	cpse	r27, r1
     cea:	b5 c0       	rjmp	.+362    	; 0xe56 <__fp_szero>
     cec:	08 95       	ret

00000cee <__fixunssfsi>:
     cee:	98 d0       	rcall	.+304    	; 0xe20 <__fp_splitA>
     cf0:	88 f0       	brcs	.+34     	; 0xd14 <__fixunssfsi+0x26>
     cf2:	9f 57       	subi	r25, 0x7F	; 127
     cf4:	90 f0       	brcs	.+36     	; 0xd1a <__fixunssfsi+0x2c>
     cf6:	b9 2f       	mov	r27, r25
     cf8:	99 27       	eor	r25, r25
     cfa:	b7 51       	subi	r27, 0x17	; 23
     cfc:	a0 f0       	brcs	.+40     	; 0xd26 <__fixunssfsi+0x38>
     cfe:	d1 f0       	breq	.+52     	; 0xd34 <__fixunssfsi+0x46>
     d00:	66 0f       	add	r22, r22
     d02:	77 1f       	adc	r23, r23
     d04:	88 1f       	adc	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	1a f0       	brmi	.+6      	; 0xd10 <__fixunssfsi+0x22>
     d0a:	ba 95       	dec	r27
     d0c:	c9 f7       	brne	.-14     	; 0xd00 <__fixunssfsi+0x12>
     d0e:	12 c0       	rjmp	.+36     	; 0xd34 <__fixunssfsi+0x46>
     d10:	b1 30       	cpi	r27, 0x01	; 1
     d12:	81 f0       	breq	.+32     	; 0xd34 <__fixunssfsi+0x46>
     d14:	9f d0       	rcall	.+318    	; 0xe54 <__fp_zero>
     d16:	b1 e0       	ldi	r27, 0x01	; 1
     d18:	08 95       	ret
     d1a:	9c c0       	rjmp	.+312    	; 0xe54 <__fp_zero>
     d1c:	67 2f       	mov	r22, r23
     d1e:	78 2f       	mov	r23, r24
     d20:	88 27       	eor	r24, r24
     d22:	b8 5f       	subi	r27, 0xF8	; 248
     d24:	39 f0       	breq	.+14     	; 0xd34 <__fixunssfsi+0x46>
     d26:	b9 3f       	cpi	r27, 0xF9	; 249
     d28:	cc f3       	brlt	.-14     	; 0xd1c <__fixunssfsi+0x2e>
     d2a:	86 95       	lsr	r24
     d2c:	77 95       	ror	r23
     d2e:	67 95       	ror	r22
     d30:	b3 95       	inc	r27
     d32:	d9 f7       	brne	.-10     	; 0xd2a <__fixunssfsi+0x3c>
     d34:	3e f4       	brtc	.+14     	; 0xd44 <__fixunssfsi+0x56>
     d36:	90 95       	com	r25
     d38:	80 95       	com	r24
     d3a:	70 95       	com	r23
     d3c:	61 95       	neg	r22
     d3e:	7f 4f       	sbci	r23, 0xFF	; 255
     d40:	8f 4f       	sbci	r24, 0xFF	; 255
     d42:	9f 4f       	sbci	r25, 0xFF	; 255
     d44:	08 95       	ret

00000d46 <__floatunsisf>:
     d46:	e8 94       	clt
     d48:	09 c0       	rjmp	.+18     	; 0xd5c <__floatsisf+0x12>

00000d4a <__floatsisf>:
     d4a:	97 fb       	bst	r25, 7
     d4c:	3e f4       	brtc	.+14     	; 0xd5c <__floatsisf+0x12>
     d4e:	90 95       	com	r25
     d50:	80 95       	com	r24
     d52:	70 95       	com	r23
     d54:	61 95       	neg	r22
     d56:	7f 4f       	sbci	r23, 0xFF	; 255
     d58:	8f 4f       	sbci	r24, 0xFF	; 255
     d5a:	9f 4f       	sbci	r25, 0xFF	; 255
     d5c:	99 23       	and	r25, r25
     d5e:	a9 f0       	breq	.+42     	; 0xd8a <__floatsisf+0x40>
     d60:	f9 2f       	mov	r31, r25
     d62:	96 e9       	ldi	r25, 0x96	; 150
     d64:	bb 27       	eor	r27, r27
     d66:	93 95       	inc	r25
     d68:	f6 95       	lsr	r31
     d6a:	87 95       	ror	r24
     d6c:	77 95       	ror	r23
     d6e:	67 95       	ror	r22
     d70:	b7 95       	ror	r27
     d72:	f1 11       	cpse	r31, r1
     d74:	f8 cf       	rjmp	.-16     	; 0xd66 <__floatsisf+0x1c>
     d76:	fa f4       	brpl	.+62     	; 0xdb6 <__floatsisf+0x6c>
     d78:	bb 0f       	add	r27, r27
     d7a:	11 f4       	brne	.+4      	; 0xd80 <__floatsisf+0x36>
     d7c:	60 ff       	sbrs	r22, 0
     d7e:	1b c0       	rjmp	.+54     	; 0xdb6 <__floatsisf+0x6c>
     d80:	6f 5f       	subi	r22, 0xFF	; 255
     d82:	7f 4f       	sbci	r23, 0xFF	; 255
     d84:	8f 4f       	sbci	r24, 0xFF	; 255
     d86:	9f 4f       	sbci	r25, 0xFF	; 255
     d88:	16 c0       	rjmp	.+44     	; 0xdb6 <__floatsisf+0x6c>
     d8a:	88 23       	and	r24, r24
     d8c:	11 f0       	breq	.+4      	; 0xd92 <__floatsisf+0x48>
     d8e:	96 e9       	ldi	r25, 0x96	; 150
     d90:	11 c0       	rjmp	.+34     	; 0xdb4 <__floatsisf+0x6a>
     d92:	77 23       	and	r23, r23
     d94:	21 f0       	breq	.+8      	; 0xd9e <__floatsisf+0x54>
     d96:	9e e8       	ldi	r25, 0x8E	; 142
     d98:	87 2f       	mov	r24, r23
     d9a:	76 2f       	mov	r23, r22
     d9c:	05 c0       	rjmp	.+10     	; 0xda8 <__floatsisf+0x5e>
     d9e:	66 23       	and	r22, r22
     da0:	71 f0       	breq	.+28     	; 0xdbe <__floatsisf+0x74>
     da2:	96 e8       	ldi	r25, 0x86	; 134
     da4:	86 2f       	mov	r24, r22
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	2a f0       	brmi	.+10     	; 0xdb6 <__floatsisf+0x6c>
     dac:	9a 95       	dec	r25
     dae:	66 0f       	add	r22, r22
     db0:	77 1f       	adc	r23, r23
     db2:	88 1f       	adc	r24, r24
     db4:	da f7       	brpl	.-10     	; 0xdac <__floatsisf+0x62>
     db6:	88 0f       	add	r24, r24
     db8:	96 95       	lsr	r25
     dba:	87 95       	ror	r24
     dbc:	97 f9       	bld	r25, 7
     dbe:	08 95       	ret

00000dc0 <__fp_inf>:
     dc0:	97 f9       	bld	r25, 7
     dc2:	9f 67       	ori	r25, 0x7F	; 127
     dc4:	80 e8       	ldi	r24, 0x80	; 128
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	08 95       	ret

00000dcc <__fp_nan>:
     dcc:	9f ef       	ldi	r25, 0xFF	; 255
     dce:	80 ec       	ldi	r24, 0xC0	; 192
     dd0:	08 95       	ret

00000dd2 <__fp_pscA>:
     dd2:	00 24       	eor	r0, r0
     dd4:	0a 94       	dec	r0
     dd6:	16 16       	cp	r1, r22
     dd8:	17 06       	cpc	r1, r23
     dda:	18 06       	cpc	r1, r24
     ddc:	09 06       	cpc	r0, r25
     dde:	08 95       	ret

00000de0 <__fp_pscB>:
     de0:	00 24       	eor	r0, r0
     de2:	0a 94       	dec	r0
     de4:	12 16       	cp	r1, r18
     de6:	13 06       	cpc	r1, r19
     de8:	14 06       	cpc	r1, r20
     dea:	05 06       	cpc	r0, r21
     dec:	08 95       	ret

00000dee <__fp_round>:
     dee:	09 2e       	mov	r0, r25
     df0:	03 94       	inc	r0
     df2:	00 0c       	add	r0, r0
     df4:	11 f4       	brne	.+4      	; 0xdfa <__fp_round+0xc>
     df6:	88 23       	and	r24, r24
     df8:	52 f0       	brmi	.+20     	; 0xe0e <__fp_round+0x20>
     dfa:	bb 0f       	add	r27, r27
     dfc:	40 f4       	brcc	.+16     	; 0xe0e <__fp_round+0x20>
     dfe:	bf 2b       	or	r27, r31
     e00:	11 f4       	brne	.+4      	; 0xe06 <__fp_round+0x18>
     e02:	60 ff       	sbrs	r22, 0
     e04:	04 c0       	rjmp	.+8      	; 0xe0e <__fp_round+0x20>
     e06:	6f 5f       	subi	r22, 0xFF	; 255
     e08:	7f 4f       	sbci	r23, 0xFF	; 255
     e0a:	8f 4f       	sbci	r24, 0xFF	; 255
     e0c:	9f 4f       	sbci	r25, 0xFF	; 255
     e0e:	08 95       	ret

00000e10 <__fp_split3>:
     e10:	57 fd       	sbrc	r21, 7
     e12:	90 58       	subi	r25, 0x80	; 128
     e14:	44 0f       	add	r20, r20
     e16:	55 1f       	adc	r21, r21
     e18:	59 f0       	breq	.+22     	; 0xe30 <__fp_splitA+0x10>
     e1a:	5f 3f       	cpi	r21, 0xFF	; 255
     e1c:	71 f0       	breq	.+28     	; 0xe3a <__fp_splitA+0x1a>
     e1e:	47 95       	ror	r20

00000e20 <__fp_splitA>:
     e20:	88 0f       	add	r24, r24
     e22:	97 fb       	bst	r25, 7
     e24:	99 1f       	adc	r25, r25
     e26:	61 f0       	breq	.+24     	; 0xe40 <__fp_splitA+0x20>
     e28:	9f 3f       	cpi	r25, 0xFF	; 255
     e2a:	79 f0       	breq	.+30     	; 0xe4a <__fp_splitA+0x2a>
     e2c:	87 95       	ror	r24
     e2e:	08 95       	ret
     e30:	12 16       	cp	r1, r18
     e32:	13 06       	cpc	r1, r19
     e34:	14 06       	cpc	r1, r20
     e36:	55 1f       	adc	r21, r21
     e38:	f2 cf       	rjmp	.-28     	; 0xe1e <__fp_split3+0xe>
     e3a:	46 95       	lsr	r20
     e3c:	f1 df       	rcall	.-30     	; 0xe20 <__fp_splitA>
     e3e:	08 c0       	rjmp	.+16     	; 0xe50 <__fp_splitA+0x30>
     e40:	16 16       	cp	r1, r22
     e42:	17 06       	cpc	r1, r23
     e44:	18 06       	cpc	r1, r24
     e46:	99 1f       	adc	r25, r25
     e48:	f1 cf       	rjmp	.-30     	; 0xe2c <__fp_splitA+0xc>
     e4a:	86 95       	lsr	r24
     e4c:	71 05       	cpc	r23, r1
     e4e:	61 05       	cpc	r22, r1
     e50:	08 94       	sec
     e52:	08 95       	ret

00000e54 <__fp_zero>:
     e54:	e8 94       	clt

00000e56 <__fp_szero>:
     e56:	bb 27       	eor	r27, r27
     e58:	66 27       	eor	r22, r22
     e5a:	77 27       	eor	r23, r23
     e5c:	cb 01       	movw	r24, r22
     e5e:	97 f9       	bld	r25, 7
     e60:	08 95       	ret

00000e62 <__mulsf3>:
     e62:	0b d0       	rcall	.+22     	; 0xe7a <__mulsf3x>
     e64:	c4 cf       	rjmp	.-120    	; 0xdee <__fp_round>
     e66:	b5 df       	rcall	.-150    	; 0xdd2 <__fp_pscA>
     e68:	28 f0       	brcs	.+10     	; 0xe74 <__mulsf3+0x12>
     e6a:	ba df       	rcall	.-140    	; 0xde0 <__fp_pscB>
     e6c:	18 f0       	brcs	.+6      	; 0xe74 <__mulsf3+0x12>
     e6e:	95 23       	and	r25, r21
     e70:	09 f0       	breq	.+2      	; 0xe74 <__mulsf3+0x12>
     e72:	a6 cf       	rjmp	.-180    	; 0xdc0 <__fp_inf>
     e74:	ab cf       	rjmp	.-170    	; 0xdcc <__fp_nan>
     e76:	11 24       	eor	r1, r1
     e78:	ee cf       	rjmp	.-36     	; 0xe56 <__fp_szero>

00000e7a <__mulsf3x>:
     e7a:	ca df       	rcall	.-108    	; 0xe10 <__fp_split3>
     e7c:	a0 f3       	brcs	.-24     	; 0xe66 <__mulsf3+0x4>

00000e7e <__mulsf3_pse>:
     e7e:	95 9f       	mul	r25, r21
     e80:	d1 f3       	breq	.-12     	; 0xe76 <__mulsf3+0x14>
     e82:	95 0f       	add	r25, r21
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	55 1f       	adc	r21, r21
     e88:	62 9f       	mul	r22, r18
     e8a:	f0 01       	movw	r30, r0
     e8c:	72 9f       	mul	r23, r18
     e8e:	bb 27       	eor	r27, r27
     e90:	f0 0d       	add	r31, r0
     e92:	b1 1d       	adc	r27, r1
     e94:	63 9f       	mul	r22, r19
     e96:	aa 27       	eor	r26, r26
     e98:	f0 0d       	add	r31, r0
     e9a:	b1 1d       	adc	r27, r1
     e9c:	aa 1f       	adc	r26, r26
     e9e:	64 9f       	mul	r22, r20
     ea0:	66 27       	eor	r22, r22
     ea2:	b0 0d       	add	r27, r0
     ea4:	a1 1d       	adc	r26, r1
     ea6:	66 1f       	adc	r22, r22
     ea8:	82 9f       	mul	r24, r18
     eaa:	22 27       	eor	r18, r18
     eac:	b0 0d       	add	r27, r0
     eae:	a1 1d       	adc	r26, r1
     eb0:	62 1f       	adc	r22, r18
     eb2:	73 9f       	mul	r23, r19
     eb4:	b0 0d       	add	r27, r0
     eb6:	a1 1d       	adc	r26, r1
     eb8:	62 1f       	adc	r22, r18
     eba:	83 9f       	mul	r24, r19
     ebc:	a0 0d       	add	r26, r0
     ebe:	61 1d       	adc	r22, r1
     ec0:	22 1f       	adc	r18, r18
     ec2:	74 9f       	mul	r23, r20
     ec4:	33 27       	eor	r19, r19
     ec6:	a0 0d       	add	r26, r0
     ec8:	61 1d       	adc	r22, r1
     eca:	23 1f       	adc	r18, r19
     ecc:	84 9f       	mul	r24, r20
     ece:	60 0d       	add	r22, r0
     ed0:	21 1d       	adc	r18, r1
     ed2:	82 2f       	mov	r24, r18
     ed4:	76 2f       	mov	r23, r22
     ed6:	6a 2f       	mov	r22, r26
     ed8:	11 24       	eor	r1, r1
     eda:	9f 57       	subi	r25, 0x7F	; 127
     edc:	50 40       	sbci	r21, 0x00	; 0
     ede:	8a f0       	brmi	.+34     	; 0xf02 <__mulsf3_pse+0x84>
     ee0:	e1 f0       	breq	.+56     	; 0xf1a <__mulsf3_pse+0x9c>
     ee2:	88 23       	and	r24, r24
     ee4:	4a f0       	brmi	.+18     	; 0xef8 <__mulsf3_pse+0x7a>
     ee6:	ee 0f       	add	r30, r30
     ee8:	ff 1f       	adc	r31, r31
     eea:	bb 1f       	adc	r27, r27
     eec:	66 1f       	adc	r22, r22
     eee:	77 1f       	adc	r23, r23
     ef0:	88 1f       	adc	r24, r24
     ef2:	91 50       	subi	r25, 0x01	; 1
     ef4:	50 40       	sbci	r21, 0x00	; 0
     ef6:	a9 f7       	brne	.-22     	; 0xee2 <__mulsf3_pse+0x64>
     ef8:	9e 3f       	cpi	r25, 0xFE	; 254
     efa:	51 05       	cpc	r21, r1
     efc:	70 f0       	brcs	.+28     	; 0xf1a <__mulsf3_pse+0x9c>
     efe:	60 cf       	rjmp	.-320    	; 0xdc0 <__fp_inf>
     f00:	aa cf       	rjmp	.-172    	; 0xe56 <__fp_szero>
     f02:	5f 3f       	cpi	r21, 0xFF	; 255
     f04:	ec f3       	brlt	.-6      	; 0xf00 <__mulsf3_pse+0x82>
     f06:	98 3e       	cpi	r25, 0xE8	; 232
     f08:	dc f3       	brlt	.-10     	; 0xf00 <__mulsf3_pse+0x82>
     f0a:	86 95       	lsr	r24
     f0c:	77 95       	ror	r23
     f0e:	67 95       	ror	r22
     f10:	b7 95       	ror	r27
     f12:	f7 95       	ror	r31
     f14:	e7 95       	ror	r30
     f16:	9f 5f       	subi	r25, 0xFF	; 255
     f18:	c1 f7       	brne	.-16     	; 0xf0a <__mulsf3_pse+0x8c>
     f1a:	fe 2b       	or	r31, r30
     f1c:	88 0f       	add	r24, r24
     f1e:	91 1d       	adc	r25, r1
     f20:	96 95       	lsr	r25
     f22:	87 95       	ror	r24
     f24:	97 f9       	bld	r25, 7
     f26:	08 95       	ret

00000f28 <__fp_cmp>:
     f28:	99 0f       	add	r25, r25
     f2a:	00 08       	sbc	r0, r0
     f2c:	55 0f       	add	r21, r21
     f2e:	aa 0b       	sbc	r26, r26
     f30:	e0 e8       	ldi	r30, 0x80	; 128
     f32:	fe ef       	ldi	r31, 0xFE	; 254
     f34:	16 16       	cp	r1, r22
     f36:	17 06       	cpc	r1, r23
     f38:	e8 07       	cpc	r30, r24
     f3a:	f9 07       	cpc	r31, r25
     f3c:	c0 f0       	brcs	.+48     	; 0xf6e <__fp_cmp+0x46>
     f3e:	12 16       	cp	r1, r18
     f40:	13 06       	cpc	r1, r19
     f42:	e4 07       	cpc	r30, r20
     f44:	f5 07       	cpc	r31, r21
     f46:	98 f0       	brcs	.+38     	; 0xf6e <__fp_cmp+0x46>
     f48:	62 1b       	sub	r22, r18
     f4a:	73 0b       	sbc	r23, r19
     f4c:	84 0b       	sbc	r24, r20
     f4e:	95 0b       	sbc	r25, r21
     f50:	39 f4       	brne	.+14     	; 0xf60 <__fp_cmp+0x38>
     f52:	0a 26       	eor	r0, r26
     f54:	61 f0       	breq	.+24     	; 0xf6e <__fp_cmp+0x46>
     f56:	23 2b       	or	r18, r19
     f58:	24 2b       	or	r18, r20
     f5a:	25 2b       	or	r18, r21
     f5c:	21 f4       	brne	.+8      	; 0xf66 <__fp_cmp+0x3e>
     f5e:	08 95       	ret
     f60:	0a 26       	eor	r0, r26
     f62:	09 f4       	brne	.+2      	; 0xf66 <__fp_cmp+0x3e>
     f64:	a1 40       	sbci	r26, 0x01	; 1
     f66:	a6 95       	lsr	r26
     f68:	8f ef       	ldi	r24, 0xFF	; 255
     f6a:	81 1d       	adc	r24, r1
     f6c:	81 1d       	adc	r24, r1
     f6e:	08 95       	ret

00000f70 <__udivmodsi4>:
     f70:	a1 e2       	ldi	r26, 0x21	; 33
     f72:	1a 2e       	mov	r1, r26
     f74:	aa 1b       	sub	r26, r26
     f76:	bb 1b       	sub	r27, r27
     f78:	fd 01       	movw	r30, r26
     f7a:	0d c0       	rjmp	.+26     	; 0xf96 <__udivmodsi4_ep>

00000f7c <__udivmodsi4_loop>:
     f7c:	aa 1f       	adc	r26, r26
     f7e:	bb 1f       	adc	r27, r27
     f80:	ee 1f       	adc	r30, r30
     f82:	ff 1f       	adc	r31, r31
     f84:	a2 17       	cp	r26, r18
     f86:	b3 07       	cpc	r27, r19
     f88:	e4 07       	cpc	r30, r20
     f8a:	f5 07       	cpc	r31, r21
     f8c:	20 f0       	brcs	.+8      	; 0xf96 <__udivmodsi4_ep>
     f8e:	a2 1b       	sub	r26, r18
     f90:	b3 0b       	sbc	r27, r19
     f92:	e4 0b       	sbc	r30, r20
     f94:	f5 0b       	sbc	r31, r21

00000f96 <__udivmodsi4_ep>:
     f96:	66 1f       	adc	r22, r22
     f98:	77 1f       	adc	r23, r23
     f9a:	88 1f       	adc	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	1a 94       	dec	r1
     fa0:	69 f7       	brne	.-38     	; 0xf7c <__udivmodsi4_loop>
     fa2:	60 95       	com	r22
     fa4:	70 95       	com	r23
     fa6:	80 95       	com	r24
     fa8:	90 95       	com	r25
     faa:	9b 01       	movw	r18, r22
     fac:	ac 01       	movw	r20, r24
     fae:	bd 01       	movw	r22, r26
     fb0:	cf 01       	movw	r24, r30
     fb2:	08 95       	ret

00000fb4 <do_rand>:
     fb4:	8f 92       	push	r8
     fb6:	9f 92       	push	r9
     fb8:	af 92       	push	r10
     fba:	bf 92       	push	r11
     fbc:	cf 92       	push	r12
     fbe:	df 92       	push	r13
     fc0:	ef 92       	push	r14
     fc2:	ff 92       	push	r15
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	ec 01       	movw	r28, r24
     fca:	68 81       	ld	r22, Y
     fcc:	79 81       	ldd	r23, Y+1	; 0x01
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	9b 81       	ldd	r25, Y+3	; 0x03
     fd2:	61 15       	cp	r22, r1
     fd4:	71 05       	cpc	r23, r1
     fd6:	81 05       	cpc	r24, r1
     fd8:	91 05       	cpc	r25, r1
     fda:	21 f4       	brne	.+8      	; 0xfe4 <do_rand+0x30>
     fdc:	64 e2       	ldi	r22, 0x24	; 36
     fde:	79 ed       	ldi	r23, 0xD9	; 217
     fe0:	8b e5       	ldi	r24, 0x5B	; 91
     fe2:	97 e0       	ldi	r25, 0x07	; 7
     fe4:	2d e1       	ldi	r18, 0x1D	; 29
     fe6:	33 ef       	ldi	r19, 0xF3	; 243
     fe8:	41 e0       	ldi	r20, 0x01	; 1
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	b8 d4       	rcall	.+2416   	; 0x195e <__divmodsi4>
     fee:	49 01       	movw	r8, r18
     ff0:	5a 01       	movw	r10, r20
     ff2:	9b 01       	movw	r18, r22
     ff4:	ac 01       	movw	r20, r24
     ff6:	a7 ea       	ldi	r26, 0xA7	; 167
     ff8:	b1 e4       	ldi	r27, 0x41	; 65
     ffa:	cd d4       	rcall	.+2458   	; 0x1996 <__muluhisi3>
     ffc:	6b 01       	movw	r12, r22
     ffe:	7c 01       	movw	r14, r24
    1000:	ac ee       	ldi	r26, 0xEC	; 236
    1002:	b4 ef       	ldi	r27, 0xF4	; 244
    1004:	a5 01       	movw	r20, r10
    1006:	94 01       	movw	r18, r8
    1008:	d2 d4       	rcall	.+2468   	; 0x19ae <__mulohisi3>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	8c 0d       	add	r24, r12
    1010:	9d 1d       	adc	r25, r13
    1012:	ae 1d       	adc	r26, r14
    1014:	bf 1d       	adc	r27, r15
    1016:	b7 ff       	sbrs	r27, 7
    1018:	03 c0       	rjmp	.+6      	; 0x1020 <do_rand+0x6c>
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	a1 09       	sbc	r26, r1
    101e:	b0 48       	sbci	r27, 0x80	; 128
    1020:	88 83       	st	Y, r24
    1022:	99 83       	std	Y+1, r25	; 0x01
    1024:	aa 83       	std	Y+2, r26	; 0x02
    1026:	bb 83       	std	Y+3, r27	; 0x03
    1028:	9f 77       	andi	r25, 0x7F	; 127
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	ff 90       	pop	r15
    1030:	ef 90       	pop	r14
    1032:	df 90       	pop	r13
    1034:	cf 90       	pop	r12
    1036:	bf 90       	pop	r11
    1038:	af 90       	pop	r10
    103a:	9f 90       	pop	r9
    103c:	8f 90       	pop	r8
    103e:	08 95       	ret

00001040 <rand_r>:
    1040:	b9 cf       	rjmp	.-142    	; 0xfb4 <do_rand>

00001042 <rand>:
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	91 e0       	ldi	r25, 0x01	; 1
    1046:	b6 cf       	rjmp	.-148    	; 0xfb4 <do_rand>

00001048 <srand>:
    1048:	a0 e0       	ldi	r26, 0x00	; 0
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1050:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1054:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1058:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    105c:	08 95       	ret

0000105e <atof>:
    105e:	66 27       	eor	r22, r22
    1060:	77 27       	eor	r23, r23
    1062:	44 c2       	rjmp	.+1160   	; 0x14ec <strtod>

00001064 <strncpy>:
    1064:	fb 01       	movw	r30, r22
    1066:	dc 01       	movw	r26, r24
    1068:	41 50       	subi	r20, 0x01	; 1
    106a:	50 40       	sbci	r21, 0x00	; 0
    106c:	48 f0       	brcs	.+18     	; 0x1080 <strncpy+0x1c>
    106e:	01 90       	ld	r0, Z+
    1070:	0d 92       	st	X+, r0
    1072:	00 20       	and	r0, r0
    1074:	c9 f7       	brne	.-14     	; 0x1068 <strncpy+0x4>
    1076:	01 c0       	rjmp	.+2      	; 0x107a <strncpy+0x16>
    1078:	1d 92       	st	X+, r1
    107a:	41 50       	subi	r20, 0x01	; 1
    107c:	50 40       	sbci	r21, 0x00	; 0
    107e:	e0 f7       	brcc	.-8      	; 0x1078 <strncpy+0x14>
    1080:	08 95       	ret

00001082 <strsep>:
    1082:	fc 01       	movw	r30, r24
    1084:	a0 81       	ld	r26, Z
    1086:	b1 81       	ldd	r27, Z+1	; 0x01
    1088:	ad 01       	movw	r20, r26
    108a:	10 96       	adiw	r26, 0x00	; 0
    108c:	81 f0       	breq	.+32     	; 0x10ae <strsep+0x2c>
    108e:	3d 91       	ld	r19, X+
    1090:	fb 01       	movw	r30, r22
    1092:	01 90       	ld	r0, Z+
    1094:	03 16       	cp	r0, r19
    1096:	01 10       	cpse	r0, r1
    1098:	e1 f7       	brne	.-8      	; 0x1092 <strsep+0x10>
    109a:	c9 f7       	brne	.-14     	; 0x108e <strsep+0xc>
    109c:	00 20       	and	r0, r0
    109e:	11 f4       	brne	.+4      	; 0x10a4 <strsep+0x22>
    10a0:	d0 01       	movw	r26, r0
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <strsep+0x26>
    10a4:	1e 92       	st	-X, r1
    10a6:	11 96       	adiw	r26, 0x01	; 1
    10a8:	fc 01       	movw	r30, r24
    10aa:	a0 83       	st	Z, r26
    10ac:	b1 83       	std	Z+1, r27	; 0x01
    10ae:	ca 01       	movw	r24, r20
    10b0:	08 95       	ret

000010b2 <sprintf>:
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	2e 97       	sbiw	r28, 0x0e	; 14
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	0d 89       	ldd	r16, Y+21	; 0x15
    10cc:	1e 89       	ldd	r17, Y+22	; 0x16
    10ce:	86 e0       	ldi	r24, 0x06	; 6
    10d0:	8c 83       	std	Y+4, r24	; 0x04
    10d2:	1a 83       	std	Y+2, r17	; 0x02
    10d4:	09 83       	std	Y+1, r16	; 0x01
    10d6:	8f ef       	ldi	r24, 0xFF	; 255
    10d8:	9f e7       	ldi	r25, 0x7F	; 127
    10da:	9e 83       	std	Y+6, r25	; 0x06
    10dc:	8d 83       	std	Y+5, r24	; 0x05
    10de:	ae 01       	movw	r20, r28
    10e0:	47 5e       	subi	r20, 0xE7	; 231
    10e2:	5f 4f       	sbci	r21, 0xFF	; 255
    10e4:	6f 89       	ldd	r22, Y+23	; 0x17
    10e6:	78 8d       	ldd	r23, Y+24	; 0x18
    10e8:	ce 01       	movw	r24, r28
    10ea:	01 96       	adiw	r24, 0x01	; 1
    10ec:	11 d0       	rcall	.+34     	; 0x1110 <vfprintf>
    10ee:	2f 81       	ldd	r18, Y+7	; 0x07
    10f0:	38 85       	ldd	r19, Y+8	; 0x08
    10f2:	f8 01       	movw	r30, r16
    10f4:	e2 0f       	add	r30, r18
    10f6:	f3 1f       	adc	r31, r19
    10f8:	10 82       	st	Z, r1
    10fa:	2e 96       	adiw	r28, 0x0e	; 14
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	08 95       	ret

00001110 <vfprintf>:
    1110:	2f 92       	push	r2
    1112:	3f 92       	push	r3
    1114:	4f 92       	push	r4
    1116:	5f 92       	push	r5
    1118:	6f 92       	push	r6
    111a:	7f 92       	push	r7
    111c:	8f 92       	push	r8
    111e:	9f 92       	push	r9
    1120:	af 92       	push	r10
    1122:	bf 92       	push	r11
    1124:	cf 92       	push	r12
    1126:	df 92       	push	r13
    1128:	ef 92       	push	r14
    112a:	ff 92       	push	r15
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	2c 97       	sbiw	r28, 0x0c	; 12
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
    1144:	7c 01       	movw	r14, r24
    1146:	6b 01       	movw	r12, r22
    1148:	8a 01       	movw	r16, r20
    114a:	fc 01       	movw	r30, r24
    114c:	17 82       	std	Z+7, r1	; 0x07
    114e:	16 82       	std	Z+6, r1	; 0x06
    1150:	83 81       	ldd	r24, Z+3	; 0x03
    1152:	81 ff       	sbrs	r24, 1
    1154:	b0 c1       	rjmp	.+864    	; 0x14b6 <vfprintf+0x3a6>
    1156:	ce 01       	movw	r24, r28
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	4c 01       	movw	r8, r24
    115c:	f7 01       	movw	r30, r14
    115e:	93 81       	ldd	r25, Z+3	; 0x03
    1160:	f6 01       	movw	r30, r12
    1162:	93 fd       	sbrc	r25, 3
    1164:	85 91       	lpm	r24, Z+
    1166:	93 ff       	sbrs	r25, 3
    1168:	81 91       	ld	r24, Z+
    116a:	6f 01       	movw	r12, r30
    116c:	88 23       	and	r24, r24
    116e:	09 f4       	brne	.+2      	; 0x1172 <vfprintf+0x62>
    1170:	9e c1       	rjmp	.+828    	; 0x14ae <vfprintf+0x39e>
    1172:	85 32       	cpi	r24, 0x25	; 37
    1174:	39 f4       	brne	.+14     	; 0x1184 <vfprintf+0x74>
    1176:	93 fd       	sbrc	r25, 3
    1178:	85 91       	lpm	r24, Z+
    117a:	93 ff       	sbrs	r25, 3
    117c:	81 91       	ld	r24, Z+
    117e:	6f 01       	movw	r12, r30
    1180:	85 32       	cpi	r24, 0x25	; 37
    1182:	21 f4       	brne	.+8      	; 0x118c <vfprintf+0x7c>
    1184:	b7 01       	movw	r22, r14
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	4d d3       	rcall	.+1690   	; 0x1824 <fputc>
    118a:	e8 cf       	rjmp	.-48     	; 0x115c <vfprintf+0x4c>
    118c:	51 2c       	mov	r5, r1
    118e:	31 2c       	mov	r3, r1
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	20 32       	cpi	r18, 0x20	; 32
    1194:	a0 f4       	brcc	.+40     	; 0x11be <vfprintf+0xae>
    1196:	8b 32       	cpi	r24, 0x2B	; 43
    1198:	69 f0       	breq	.+26     	; 0x11b4 <vfprintf+0xa4>
    119a:	30 f4       	brcc	.+12     	; 0x11a8 <vfprintf+0x98>
    119c:	80 32       	cpi	r24, 0x20	; 32
    119e:	59 f0       	breq	.+22     	; 0x11b6 <vfprintf+0xa6>
    11a0:	83 32       	cpi	r24, 0x23	; 35
    11a2:	69 f4       	brne	.+26     	; 0x11be <vfprintf+0xae>
    11a4:	20 61       	ori	r18, 0x10	; 16
    11a6:	2c c0       	rjmp	.+88     	; 0x1200 <vfprintf+0xf0>
    11a8:	8d 32       	cpi	r24, 0x2D	; 45
    11aa:	39 f0       	breq	.+14     	; 0x11ba <vfprintf+0xaa>
    11ac:	80 33       	cpi	r24, 0x30	; 48
    11ae:	39 f4       	brne	.+14     	; 0x11be <vfprintf+0xae>
    11b0:	21 60       	ori	r18, 0x01	; 1
    11b2:	26 c0       	rjmp	.+76     	; 0x1200 <vfprintf+0xf0>
    11b4:	22 60       	ori	r18, 0x02	; 2
    11b6:	24 60       	ori	r18, 0x04	; 4
    11b8:	23 c0       	rjmp	.+70     	; 0x1200 <vfprintf+0xf0>
    11ba:	28 60       	ori	r18, 0x08	; 8
    11bc:	21 c0       	rjmp	.+66     	; 0x1200 <vfprintf+0xf0>
    11be:	27 fd       	sbrc	r18, 7
    11c0:	27 c0       	rjmp	.+78     	; 0x1210 <vfprintf+0x100>
    11c2:	30 ed       	ldi	r19, 0xD0	; 208
    11c4:	38 0f       	add	r19, r24
    11c6:	3a 30       	cpi	r19, 0x0A	; 10
    11c8:	78 f4       	brcc	.+30     	; 0x11e8 <vfprintf+0xd8>
    11ca:	26 ff       	sbrs	r18, 6
    11cc:	06 c0       	rjmp	.+12     	; 0x11da <vfprintf+0xca>
    11ce:	fa e0       	ldi	r31, 0x0A	; 10
    11d0:	5f 9e       	mul	r5, r31
    11d2:	30 0d       	add	r19, r0
    11d4:	11 24       	eor	r1, r1
    11d6:	53 2e       	mov	r5, r19
    11d8:	13 c0       	rjmp	.+38     	; 0x1200 <vfprintf+0xf0>
    11da:	8a e0       	ldi	r24, 0x0A	; 10
    11dc:	38 9e       	mul	r3, r24
    11de:	30 0d       	add	r19, r0
    11e0:	11 24       	eor	r1, r1
    11e2:	33 2e       	mov	r3, r19
    11e4:	20 62       	ori	r18, 0x20	; 32
    11e6:	0c c0       	rjmp	.+24     	; 0x1200 <vfprintf+0xf0>
    11e8:	8e 32       	cpi	r24, 0x2E	; 46
    11ea:	21 f4       	brne	.+8      	; 0x11f4 <vfprintf+0xe4>
    11ec:	26 fd       	sbrc	r18, 6
    11ee:	5f c1       	rjmp	.+702    	; 0x14ae <vfprintf+0x39e>
    11f0:	20 64       	ori	r18, 0x40	; 64
    11f2:	06 c0       	rjmp	.+12     	; 0x1200 <vfprintf+0xf0>
    11f4:	8c 36       	cpi	r24, 0x6C	; 108
    11f6:	11 f4       	brne	.+4      	; 0x11fc <vfprintf+0xec>
    11f8:	20 68       	ori	r18, 0x80	; 128
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <vfprintf+0xf0>
    11fc:	88 36       	cpi	r24, 0x68	; 104
    11fe:	41 f4       	brne	.+16     	; 0x1210 <vfprintf+0x100>
    1200:	f6 01       	movw	r30, r12
    1202:	93 fd       	sbrc	r25, 3
    1204:	85 91       	lpm	r24, Z+
    1206:	93 ff       	sbrs	r25, 3
    1208:	81 91       	ld	r24, Z+
    120a:	6f 01       	movw	r12, r30
    120c:	81 11       	cpse	r24, r1
    120e:	c1 cf       	rjmp	.-126    	; 0x1192 <vfprintf+0x82>
    1210:	98 2f       	mov	r25, r24
    1212:	9f 7d       	andi	r25, 0xDF	; 223
    1214:	95 54       	subi	r25, 0x45	; 69
    1216:	93 30       	cpi	r25, 0x03	; 3
    1218:	28 f4       	brcc	.+10     	; 0x1224 <vfprintf+0x114>
    121a:	0c 5f       	subi	r16, 0xFC	; 252
    121c:	1f 4f       	sbci	r17, 0xFF	; 255
    121e:	ff e3       	ldi	r31, 0x3F	; 63
    1220:	f9 83       	std	Y+1, r31	; 0x01
    1222:	0d c0       	rjmp	.+26     	; 0x123e <vfprintf+0x12e>
    1224:	83 36       	cpi	r24, 0x63	; 99
    1226:	31 f0       	breq	.+12     	; 0x1234 <vfprintf+0x124>
    1228:	83 37       	cpi	r24, 0x73	; 115
    122a:	71 f0       	breq	.+28     	; 0x1248 <vfprintf+0x138>
    122c:	83 35       	cpi	r24, 0x53	; 83
    122e:	09 f0       	breq	.+2      	; 0x1232 <vfprintf+0x122>
    1230:	57 c0       	rjmp	.+174    	; 0x12e0 <vfprintf+0x1d0>
    1232:	21 c0       	rjmp	.+66     	; 0x1276 <vfprintf+0x166>
    1234:	f8 01       	movw	r30, r16
    1236:	80 81       	ld	r24, Z
    1238:	89 83       	std	Y+1, r24	; 0x01
    123a:	0e 5f       	subi	r16, 0xFE	; 254
    123c:	1f 4f       	sbci	r17, 0xFF	; 255
    123e:	44 24       	eor	r4, r4
    1240:	43 94       	inc	r4
    1242:	51 2c       	mov	r5, r1
    1244:	54 01       	movw	r10, r8
    1246:	14 c0       	rjmp	.+40     	; 0x1270 <vfprintf+0x160>
    1248:	38 01       	movw	r6, r16
    124a:	f2 e0       	ldi	r31, 0x02	; 2
    124c:	6f 0e       	add	r6, r31
    124e:	71 1c       	adc	r7, r1
    1250:	f8 01       	movw	r30, r16
    1252:	a0 80       	ld	r10, Z
    1254:	b1 80       	ldd	r11, Z+1	; 0x01
    1256:	26 ff       	sbrs	r18, 6
    1258:	03 c0       	rjmp	.+6      	; 0x1260 <vfprintf+0x150>
    125a:	65 2d       	mov	r22, r5
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <vfprintf+0x154>
    1260:	6f ef       	ldi	r22, 0xFF	; 255
    1262:	7f ef       	ldi	r23, 0xFF	; 255
    1264:	c5 01       	movw	r24, r10
    1266:	2c 87       	std	Y+12, r18	; 0x0c
    1268:	d2 d2       	rcall	.+1444   	; 0x180e <strnlen>
    126a:	2c 01       	movw	r4, r24
    126c:	83 01       	movw	r16, r6
    126e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1270:	2f 77       	andi	r18, 0x7F	; 127
    1272:	22 2e       	mov	r2, r18
    1274:	16 c0       	rjmp	.+44     	; 0x12a2 <vfprintf+0x192>
    1276:	38 01       	movw	r6, r16
    1278:	f2 e0       	ldi	r31, 0x02	; 2
    127a:	6f 0e       	add	r6, r31
    127c:	71 1c       	adc	r7, r1
    127e:	f8 01       	movw	r30, r16
    1280:	a0 80       	ld	r10, Z
    1282:	b1 80       	ldd	r11, Z+1	; 0x01
    1284:	26 ff       	sbrs	r18, 6
    1286:	03 c0       	rjmp	.+6      	; 0x128e <vfprintf+0x17e>
    1288:	65 2d       	mov	r22, r5
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <vfprintf+0x182>
    128e:	6f ef       	ldi	r22, 0xFF	; 255
    1290:	7f ef       	ldi	r23, 0xFF	; 255
    1292:	c5 01       	movw	r24, r10
    1294:	2c 87       	std	Y+12, r18	; 0x0c
    1296:	b0 d2       	rcall	.+1376   	; 0x17f8 <strnlen_P>
    1298:	2c 01       	movw	r4, r24
    129a:	2c 85       	ldd	r18, Y+12	; 0x0c
    129c:	20 68       	ori	r18, 0x80	; 128
    129e:	22 2e       	mov	r2, r18
    12a0:	83 01       	movw	r16, r6
    12a2:	23 fc       	sbrc	r2, 3
    12a4:	19 c0       	rjmp	.+50     	; 0x12d8 <vfprintf+0x1c8>
    12a6:	83 2d       	mov	r24, r3
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	48 16       	cp	r4, r24
    12ac:	59 06       	cpc	r5, r25
    12ae:	a0 f4       	brcc	.+40     	; 0x12d8 <vfprintf+0x1c8>
    12b0:	b7 01       	movw	r22, r14
    12b2:	80 e2       	ldi	r24, 0x20	; 32
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	b6 d2       	rcall	.+1388   	; 0x1824 <fputc>
    12b8:	3a 94       	dec	r3
    12ba:	f5 cf       	rjmp	.-22     	; 0x12a6 <vfprintf+0x196>
    12bc:	f5 01       	movw	r30, r10
    12be:	27 fc       	sbrc	r2, 7
    12c0:	85 91       	lpm	r24, Z+
    12c2:	27 fe       	sbrs	r2, 7
    12c4:	81 91       	ld	r24, Z+
    12c6:	5f 01       	movw	r10, r30
    12c8:	b7 01       	movw	r22, r14
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	ab d2       	rcall	.+1366   	; 0x1824 <fputc>
    12ce:	31 10       	cpse	r3, r1
    12d0:	3a 94       	dec	r3
    12d2:	f1 e0       	ldi	r31, 0x01	; 1
    12d4:	4f 1a       	sub	r4, r31
    12d6:	51 08       	sbc	r5, r1
    12d8:	41 14       	cp	r4, r1
    12da:	51 04       	cpc	r5, r1
    12dc:	79 f7       	brne	.-34     	; 0x12bc <vfprintf+0x1ac>
    12de:	de c0       	rjmp	.+444    	; 0x149c <vfprintf+0x38c>
    12e0:	84 36       	cpi	r24, 0x64	; 100
    12e2:	11 f0       	breq	.+4      	; 0x12e8 <vfprintf+0x1d8>
    12e4:	89 36       	cpi	r24, 0x69	; 105
    12e6:	31 f5       	brne	.+76     	; 0x1334 <vfprintf+0x224>
    12e8:	f8 01       	movw	r30, r16
    12ea:	27 ff       	sbrs	r18, 7
    12ec:	07 c0       	rjmp	.+14     	; 0x12fc <vfprintf+0x1ec>
    12ee:	60 81       	ld	r22, Z
    12f0:	71 81       	ldd	r23, Z+1	; 0x01
    12f2:	82 81       	ldd	r24, Z+2	; 0x02
    12f4:	93 81       	ldd	r25, Z+3	; 0x03
    12f6:	0c 5f       	subi	r16, 0xFC	; 252
    12f8:	1f 4f       	sbci	r17, 0xFF	; 255
    12fa:	08 c0       	rjmp	.+16     	; 0x130c <vfprintf+0x1fc>
    12fc:	60 81       	ld	r22, Z
    12fe:	71 81       	ldd	r23, Z+1	; 0x01
    1300:	07 2e       	mov	r0, r23
    1302:	00 0c       	add	r0, r0
    1304:	88 0b       	sbc	r24, r24
    1306:	99 0b       	sbc	r25, r25
    1308:	0e 5f       	subi	r16, 0xFE	; 254
    130a:	1f 4f       	sbci	r17, 0xFF	; 255
    130c:	2f 76       	andi	r18, 0x6F	; 111
    130e:	72 2e       	mov	r7, r18
    1310:	97 ff       	sbrs	r25, 7
    1312:	09 c0       	rjmp	.+18     	; 0x1326 <vfprintf+0x216>
    1314:	90 95       	com	r25
    1316:	80 95       	com	r24
    1318:	70 95       	com	r23
    131a:	61 95       	neg	r22
    131c:	7f 4f       	sbci	r23, 0xFF	; 255
    131e:	8f 4f       	sbci	r24, 0xFF	; 255
    1320:	9f 4f       	sbci	r25, 0xFF	; 255
    1322:	20 68       	ori	r18, 0x80	; 128
    1324:	72 2e       	mov	r7, r18
    1326:	2a e0       	ldi	r18, 0x0A	; 10
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	a4 01       	movw	r20, r8
    132c:	b3 d2       	rcall	.+1382   	; 0x1894 <__ultoa_invert>
    132e:	a8 2e       	mov	r10, r24
    1330:	a8 18       	sub	r10, r8
    1332:	43 c0       	rjmp	.+134    	; 0x13ba <vfprintf+0x2aa>
    1334:	85 37       	cpi	r24, 0x75	; 117
    1336:	29 f4       	brne	.+10     	; 0x1342 <vfprintf+0x232>
    1338:	2f 7e       	andi	r18, 0xEF	; 239
    133a:	b2 2e       	mov	r11, r18
    133c:	2a e0       	ldi	r18, 0x0A	; 10
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	25 c0       	rjmp	.+74     	; 0x138c <vfprintf+0x27c>
    1342:	f2 2f       	mov	r31, r18
    1344:	f9 7f       	andi	r31, 0xF9	; 249
    1346:	bf 2e       	mov	r11, r31
    1348:	8f 36       	cpi	r24, 0x6F	; 111
    134a:	c1 f0       	breq	.+48     	; 0x137c <vfprintf+0x26c>
    134c:	18 f4       	brcc	.+6      	; 0x1354 <vfprintf+0x244>
    134e:	88 35       	cpi	r24, 0x58	; 88
    1350:	79 f0       	breq	.+30     	; 0x1370 <vfprintf+0x260>
    1352:	ad c0       	rjmp	.+346    	; 0x14ae <vfprintf+0x39e>
    1354:	80 37       	cpi	r24, 0x70	; 112
    1356:	19 f0       	breq	.+6      	; 0x135e <vfprintf+0x24e>
    1358:	88 37       	cpi	r24, 0x78	; 120
    135a:	21 f0       	breq	.+8      	; 0x1364 <vfprintf+0x254>
    135c:	a8 c0       	rjmp	.+336    	; 0x14ae <vfprintf+0x39e>
    135e:	2f 2f       	mov	r18, r31
    1360:	20 61       	ori	r18, 0x10	; 16
    1362:	b2 2e       	mov	r11, r18
    1364:	b4 fe       	sbrs	r11, 4
    1366:	0d c0       	rjmp	.+26     	; 0x1382 <vfprintf+0x272>
    1368:	8b 2d       	mov	r24, r11
    136a:	84 60       	ori	r24, 0x04	; 4
    136c:	b8 2e       	mov	r11, r24
    136e:	09 c0       	rjmp	.+18     	; 0x1382 <vfprintf+0x272>
    1370:	24 ff       	sbrs	r18, 4
    1372:	0a c0       	rjmp	.+20     	; 0x1388 <vfprintf+0x278>
    1374:	9f 2f       	mov	r25, r31
    1376:	96 60       	ori	r25, 0x06	; 6
    1378:	b9 2e       	mov	r11, r25
    137a:	06 c0       	rjmp	.+12     	; 0x1388 <vfprintf+0x278>
    137c:	28 e0       	ldi	r18, 0x08	; 8
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	05 c0       	rjmp	.+10     	; 0x138c <vfprintf+0x27c>
    1382:	20 e1       	ldi	r18, 0x10	; 16
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	02 c0       	rjmp	.+4      	; 0x138c <vfprintf+0x27c>
    1388:	20 e1       	ldi	r18, 0x10	; 16
    138a:	32 e0       	ldi	r19, 0x02	; 2
    138c:	f8 01       	movw	r30, r16
    138e:	b7 fe       	sbrs	r11, 7
    1390:	07 c0       	rjmp	.+14     	; 0x13a0 <vfprintf+0x290>
    1392:	60 81       	ld	r22, Z
    1394:	71 81       	ldd	r23, Z+1	; 0x01
    1396:	82 81       	ldd	r24, Z+2	; 0x02
    1398:	93 81       	ldd	r25, Z+3	; 0x03
    139a:	0c 5f       	subi	r16, 0xFC	; 252
    139c:	1f 4f       	sbci	r17, 0xFF	; 255
    139e:	06 c0       	rjmp	.+12     	; 0x13ac <vfprintf+0x29c>
    13a0:	60 81       	ld	r22, Z
    13a2:	71 81       	ldd	r23, Z+1	; 0x01
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	0e 5f       	subi	r16, 0xFE	; 254
    13aa:	1f 4f       	sbci	r17, 0xFF	; 255
    13ac:	a4 01       	movw	r20, r8
    13ae:	72 d2       	rcall	.+1252   	; 0x1894 <__ultoa_invert>
    13b0:	a8 2e       	mov	r10, r24
    13b2:	a8 18       	sub	r10, r8
    13b4:	fb 2d       	mov	r31, r11
    13b6:	ff 77       	andi	r31, 0x7F	; 127
    13b8:	7f 2e       	mov	r7, r31
    13ba:	76 fe       	sbrs	r7, 6
    13bc:	0b c0       	rjmp	.+22     	; 0x13d4 <vfprintf+0x2c4>
    13be:	37 2d       	mov	r19, r7
    13c0:	3e 7f       	andi	r19, 0xFE	; 254
    13c2:	a5 14       	cp	r10, r5
    13c4:	50 f4       	brcc	.+20     	; 0x13da <vfprintf+0x2ca>
    13c6:	74 fe       	sbrs	r7, 4
    13c8:	0a c0       	rjmp	.+20     	; 0x13de <vfprintf+0x2ce>
    13ca:	72 fc       	sbrc	r7, 2
    13cc:	08 c0       	rjmp	.+16     	; 0x13de <vfprintf+0x2ce>
    13ce:	37 2d       	mov	r19, r7
    13d0:	3e 7e       	andi	r19, 0xEE	; 238
    13d2:	05 c0       	rjmp	.+10     	; 0x13de <vfprintf+0x2ce>
    13d4:	ba 2c       	mov	r11, r10
    13d6:	37 2d       	mov	r19, r7
    13d8:	03 c0       	rjmp	.+6      	; 0x13e0 <vfprintf+0x2d0>
    13da:	ba 2c       	mov	r11, r10
    13dc:	01 c0       	rjmp	.+2      	; 0x13e0 <vfprintf+0x2d0>
    13de:	b5 2c       	mov	r11, r5
    13e0:	34 ff       	sbrs	r19, 4
    13e2:	0d c0       	rjmp	.+26     	; 0x13fe <vfprintf+0x2ee>
    13e4:	fe 01       	movw	r30, r28
    13e6:	ea 0d       	add	r30, r10
    13e8:	f1 1d       	adc	r31, r1
    13ea:	80 81       	ld	r24, Z
    13ec:	80 33       	cpi	r24, 0x30	; 48
    13ee:	11 f4       	brne	.+4      	; 0x13f4 <vfprintf+0x2e4>
    13f0:	39 7e       	andi	r19, 0xE9	; 233
    13f2:	09 c0       	rjmp	.+18     	; 0x1406 <vfprintf+0x2f6>
    13f4:	32 ff       	sbrs	r19, 2
    13f6:	06 c0       	rjmp	.+12     	; 0x1404 <vfprintf+0x2f4>
    13f8:	b3 94       	inc	r11
    13fa:	b3 94       	inc	r11
    13fc:	04 c0       	rjmp	.+8      	; 0x1406 <vfprintf+0x2f6>
    13fe:	83 2f       	mov	r24, r19
    1400:	86 78       	andi	r24, 0x86	; 134
    1402:	09 f0       	breq	.+2      	; 0x1406 <vfprintf+0x2f6>
    1404:	b3 94       	inc	r11
    1406:	33 fd       	sbrc	r19, 3
    1408:	12 c0       	rjmp	.+36     	; 0x142e <vfprintf+0x31e>
    140a:	30 ff       	sbrs	r19, 0
    140c:	06 c0       	rjmp	.+12     	; 0x141a <vfprintf+0x30a>
    140e:	5a 2c       	mov	r5, r10
    1410:	b3 14       	cp	r11, r3
    1412:	18 f4       	brcc	.+6      	; 0x141a <vfprintf+0x30a>
    1414:	53 0c       	add	r5, r3
    1416:	5b 18       	sub	r5, r11
    1418:	b3 2c       	mov	r11, r3
    141a:	b3 14       	cp	r11, r3
    141c:	60 f4       	brcc	.+24     	; 0x1436 <vfprintf+0x326>
    141e:	b7 01       	movw	r22, r14
    1420:	80 e2       	ldi	r24, 0x20	; 32
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	3c 87       	std	Y+12, r19	; 0x0c
    1426:	fe d1       	rcall	.+1020   	; 0x1824 <fputc>
    1428:	b3 94       	inc	r11
    142a:	3c 85       	ldd	r19, Y+12	; 0x0c
    142c:	f6 cf       	rjmp	.-20     	; 0x141a <vfprintf+0x30a>
    142e:	b3 14       	cp	r11, r3
    1430:	10 f4       	brcc	.+4      	; 0x1436 <vfprintf+0x326>
    1432:	3b 18       	sub	r3, r11
    1434:	01 c0       	rjmp	.+2      	; 0x1438 <vfprintf+0x328>
    1436:	31 2c       	mov	r3, r1
    1438:	34 ff       	sbrs	r19, 4
    143a:	11 c0       	rjmp	.+34     	; 0x145e <vfprintf+0x34e>
    143c:	b7 01       	movw	r22, r14
    143e:	80 e3       	ldi	r24, 0x30	; 48
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	3c 87       	std	Y+12, r19	; 0x0c
    1444:	ef d1       	rcall	.+990    	; 0x1824 <fputc>
    1446:	3c 85       	ldd	r19, Y+12	; 0x0c
    1448:	32 ff       	sbrs	r19, 2
    144a:	16 c0       	rjmp	.+44     	; 0x1478 <vfprintf+0x368>
    144c:	31 fd       	sbrc	r19, 1
    144e:	03 c0       	rjmp	.+6      	; 0x1456 <vfprintf+0x346>
    1450:	88 e7       	ldi	r24, 0x78	; 120
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 c0       	rjmp	.+4      	; 0x145a <vfprintf+0x34a>
    1456:	88 e5       	ldi	r24, 0x58	; 88
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	b7 01       	movw	r22, r14
    145c:	0c c0       	rjmp	.+24     	; 0x1476 <vfprintf+0x366>
    145e:	83 2f       	mov	r24, r19
    1460:	86 78       	andi	r24, 0x86	; 134
    1462:	51 f0       	breq	.+20     	; 0x1478 <vfprintf+0x368>
    1464:	31 ff       	sbrs	r19, 1
    1466:	02 c0       	rjmp	.+4      	; 0x146c <vfprintf+0x35c>
    1468:	8b e2       	ldi	r24, 0x2B	; 43
    146a:	01 c0       	rjmp	.+2      	; 0x146e <vfprintf+0x35e>
    146c:	80 e2       	ldi	r24, 0x20	; 32
    146e:	37 fd       	sbrc	r19, 7
    1470:	8d e2       	ldi	r24, 0x2D	; 45
    1472:	b7 01       	movw	r22, r14
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	d6 d1       	rcall	.+940    	; 0x1824 <fputc>
    1478:	a5 14       	cp	r10, r5
    147a:	30 f4       	brcc	.+12     	; 0x1488 <vfprintf+0x378>
    147c:	b7 01       	movw	r22, r14
    147e:	80 e3       	ldi	r24, 0x30	; 48
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	d0 d1       	rcall	.+928    	; 0x1824 <fputc>
    1484:	5a 94       	dec	r5
    1486:	f8 cf       	rjmp	.-16     	; 0x1478 <vfprintf+0x368>
    1488:	aa 94       	dec	r10
    148a:	f4 01       	movw	r30, r8
    148c:	ea 0d       	add	r30, r10
    148e:	f1 1d       	adc	r31, r1
    1490:	80 81       	ld	r24, Z
    1492:	b7 01       	movw	r22, r14
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	c6 d1       	rcall	.+908    	; 0x1824 <fputc>
    1498:	a1 10       	cpse	r10, r1
    149a:	f6 cf       	rjmp	.-20     	; 0x1488 <vfprintf+0x378>
    149c:	33 20       	and	r3, r3
    149e:	09 f4       	brne	.+2      	; 0x14a2 <vfprintf+0x392>
    14a0:	5d ce       	rjmp	.-838    	; 0x115c <vfprintf+0x4c>
    14a2:	b7 01       	movw	r22, r14
    14a4:	80 e2       	ldi	r24, 0x20	; 32
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	bd d1       	rcall	.+890    	; 0x1824 <fputc>
    14aa:	3a 94       	dec	r3
    14ac:	f7 cf       	rjmp	.-18     	; 0x149c <vfprintf+0x38c>
    14ae:	f7 01       	movw	r30, r14
    14b0:	86 81       	ldd	r24, Z+6	; 0x06
    14b2:	97 81       	ldd	r25, Z+7	; 0x07
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <vfprintf+0x3aa>
    14b6:	8f ef       	ldi	r24, 0xFF	; 255
    14b8:	9f ef       	ldi	r25, 0xFF	; 255
    14ba:	2c 96       	adiw	r28, 0x0c	; 12
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	cd bf       	out	0x3d, r28	; 61
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	1f 91       	pop	r17
    14cc:	0f 91       	pop	r16
    14ce:	ff 90       	pop	r15
    14d0:	ef 90       	pop	r14
    14d2:	df 90       	pop	r13
    14d4:	cf 90       	pop	r12
    14d6:	bf 90       	pop	r11
    14d8:	af 90       	pop	r10
    14da:	9f 90       	pop	r9
    14dc:	8f 90       	pop	r8
    14de:	7f 90       	pop	r7
    14e0:	6f 90       	pop	r6
    14e2:	5f 90       	pop	r5
    14e4:	4f 90       	pop	r4
    14e6:	3f 90       	pop	r3
    14e8:	2f 90       	pop	r2
    14ea:	08 95       	ret

000014ec <strtod>:
    14ec:	6f 92       	push	r6
    14ee:	7f 92       	push	r7
    14f0:	8f 92       	push	r8
    14f2:	9f 92       	push	r9
    14f4:	af 92       	push	r10
    14f6:	bf 92       	push	r11
    14f8:	cf 92       	push	r12
    14fa:	df 92       	push	r13
    14fc:	ef 92       	push	r14
    14fe:	ff 92       	push	r15
    1500:	0f 93       	push	r16
    1502:	1f 93       	push	r17
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	ec 01       	movw	r28, r24
    150a:	7b 01       	movw	r14, r22
    150c:	61 15       	cp	r22, r1
    150e:	71 05       	cpc	r23, r1
    1510:	19 f0       	breq	.+6      	; 0x1518 <strtod+0x2c>
    1512:	db 01       	movw	r26, r22
    1514:	8d 93       	st	X+, r24
    1516:	9c 93       	st	X, r25
    1518:	8e 01       	movw	r16, r28
    151a:	0f 5f       	subi	r16, 0xFF	; 255
    151c:	1f 4f       	sbci	r17, 0xFF	; 255
    151e:	78 80       	ld	r7, Y
    1520:	87 2d       	mov	r24, r7
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	49 d1       	rcall	.+658    	; 0x17b8 <isspace>
    1526:	89 2b       	or	r24, r25
    1528:	11 f0       	breq	.+4      	; 0x152e <strtod+0x42>
    152a:	e8 01       	movw	r28, r16
    152c:	f5 cf       	rjmp	.-22     	; 0x1518 <strtod+0x2c>
    152e:	bd e2       	ldi	r27, 0x2D	; 45
    1530:	7b 12       	cpse	r7, r27
    1532:	05 c0       	rjmp	.+10     	; 0x153e <strtod+0x52>
    1534:	0f 5f       	subi	r16, 0xFF	; 255
    1536:	1f 4f       	sbci	r17, 0xFF	; 255
    1538:	79 80       	ldd	r7, Y+1	; 0x01
    153a:	c1 e0       	ldi	r28, 0x01	; 1
    153c:	08 c0       	rjmp	.+16     	; 0x154e <strtod+0x62>
    153e:	eb e2       	ldi	r30, 0x2B	; 43
    1540:	7e 12       	cpse	r7, r30
    1542:	04 c0       	rjmp	.+8      	; 0x154c <strtod+0x60>
    1544:	8e 01       	movw	r16, r28
    1546:	0e 5f       	subi	r16, 0xFE	; 254
    1548:	1f 4f       	sbci	r17, 0xFF	; 255
    154a:	79 80       	ldd	r7, Y+1	; 0x01
    154c:	c0 e0       	ldi	r28, 0x00	; 0
    154e:	68 01       	movw	r12, r16
    1550:	f1 e0       	ldi	r31, 0x01	; 1
    1552:	cf 1a       	sub	r12, r31
    1554:	d1 08       	sbc	r13, r1
    1556:	43 e0       	ldi	r20, 0x03	; 3
    1558:	50 e0       	ldi	r21, 0x00	; 0
    155a:	64 e9       	ldi	r22, 0x94	; 148
    155c:	70 e0       	ldi	r23, 0x00	; 0
    155e:	c6 01       	movw	r24, r12
    1560:	33 d1       	rcall	.+614    	; 0x17c8 <strncasecmp_P>
    1562:	89 2b       	or	r24, r25
    1564:	e9 f4       	brne	.+58     	; 0x15a0 <strtod+0xb4>
    1566:	68 01       	movw	r12, r16
    1568:	22 e0       	ldi	r18, 0x02	; 2
    156a:	c2 0e       	add	r12, r18
    156c:	d1 1c       	adc	r13, r1
    156e:	45 e0       	ldi	r20, 0x05	; 5
    1570:	50 e0       	ldi	r21, 0x00	; 0
    1572:	6f e8       	ldi	r22, 0x8F	; 143
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	c6 01       	movw	r24, r12
    1578:	27 d1       	rcall	.+590    	; 0x17c8 <strncasecmp_P>
    157a:	89 2b       	or	r24, r25
    157c:	21 f4       	brne	.+8      	; 0x1586 <strtod+0x9a>
    157e:	68 01       	movw	r12, r16
    1580:	87 e0       	ldi	r24, 0x07	; 7
    1582:	c8 0e       	add	r12, r24
    1584:	d1 1c       	adc	r13, r1
    1586:	e1 14       	cp	r14, r1
    1588:	f1 04       	cpc	r15, r1
    158a:	19 f0       	breq	.+6      	; 0x1592 <strtod+0xa6>
    158c:	d7 01       	movw	r26, r14
    158e:	cd 92       	st	X+, r12
    1590:	dc 92       	st	X, r13
    1592:	c1 11       	cpse	r28, r1
    1594:	f9 c0       	rjmp	.+498    	; 0x1788 <strtod+0x29c>
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	80 e8       	ldi	r24, 0x80	; 128
    159c:	9f e7       	ldi	r25, 0x7F	; 127
    159e:	fd c0       	rjmp	.+506    	; 0x179a <strtod+0x2ae>
    15a0:	43 e0       	ldi	r20, 0x03	; 3
    15a2:	50 e0       	ldi	r21, 0x00	; 0
    15a4:	6c e8       	ldi	r22, 0x8C	; 140
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	c6 01       	movw	r24, r12
    15aa:	0e d1       	rcall	.+540    	; 0x17c8 <strncasecmp_P>
    15ac:	89 2b       	or	r24, r25
    15ae:	51 f4       	brne	.+20     	; 0x15c4 <strtod+0xd8>
    15b0:	e1 14       	cp	r14, r1
    15b2:	f1 04       	cpc	r15, r1
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <strtod+0xcc>
    15b6:	ed c0       	rjmp	.+474    	; 0x1792 <strtod+0x2a6>
    15b8:	0e 5f       	subi	r16, 0xFE	; 254
    15ba:	1f 4f       	sbci	r17, 0xFF	; 255
    15bc:	f7 01       	movw	r30, r14
    15be:	11 83       	std	Z+1, r17	; 0x01
    15c0:	00 83       	st	Z, r16
    15c2:	e7 c0       	rjmp	.+462    	; 0x1792 <strtod+0x2a6>
    15c4:	68 01       	movw	r12, r16
    15c6:	60 e0       	ldi	r22, 0x00	; 0
    15c8:	70 e0       	ldi	r23, 0x00	; 0
    15ca:	cb 01       	movw	r24, r22
    15cc:	00 e0       	ldi	r16, 0x00	; 0
    15ce:	10 e0       	ldi	r17, 0x00	; 0
    15d0:	f6 01       	movw	r30, r12
    15d2:	d0 ed       	ldi	r29, 0xD0	; 208
    15d4:	d7 0d       	add	r29, r7
    15d6:	da 30       	cpi	r29, 0x0A	; 10
    15d8:	50 f5       	brcc	.+84     	; 0x162e <strtod+0x142>
    15da:	2c 2f       	mov	r18, r28
    15dc:	22 60       	ori	r18, 0x02	; 2
    15de:	62 2e       	mov	r6, r18
    15e0:	2c 2f       	mov	r18, r28
    15e2:	28 70       	andi	r18, 0x08	; 8
    15e4:	c2 ff       	sbrs	r28, 2
    15e6:	05 c0       	rjmp	.+10     	; 0x15f2 <strtod+0x106>
    15e8:	21 11       	cpse	r18, r1
    15ea:	27 c0       	rjmp	.+78     	; 0x163a <strtod+0x14e>
    15ec:	0f 5f       	subi	r16, 0xFF	; 255
    15ee:	1f 4f       	sbci	r17, 0xFF	; 255
    15f0:	24 c0       	rjmp	.+72     	; 0x163a <strtod+0x14e>
    15f2:	22 23       	and	r18, r18
    15f4:	11 f0       	breq	.+4      	; 0x15fa <strtod+0x10e>
    15f6:	01 50       	subi	r16, 0x01	; 1
    15f8:	11 09       	sbc	r17, r1
    15fa:	a5 e0       	ldi	r26, 0x05	; 5
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	9b 01       	movw	r18, r22
    1600:	ac 01       	movw	r20, r24
    1602:	c9 d1       	rcall	.+914    	; 0x1996 <__muluhisi3>
    1604:	4b 01       	movw	r8, r22
    1606:	5c 01       	movw	r10, r24
    1608:	88 0c       	add	r8, r8
    160a:	99 1c       	adc	r9, r9
    160c:	aa 1c       	adc	r10, r10
    160e:	bb 1c       	adc	r11, r11
    1610:	c5 01       	movw	r24, r10
    1612:	b4 01       	movw	r22, r8
    1614:	6d 0f       	add	r22, r29
    1616:	71 1d       	adc	r23, r1
    1618:	81 1d       	adc	r24, r1
    161a:	91 1d       	adc	r25, r1
    161c:	68 39       	cpi	r22, 0x98	; 152
    161e:	a9 e9       	ldi	r26, 0x99	; 153
    1620:	7a 07       	cpc	r23, r26
    1622:	8a 07       	cpc	r24, r26
    1624:	a9 e1       	ldi	r26, 0x19	; 25
    1626:	9a 07       	cpc	r25, r26
    1628:	40 f0       	brcs	.+16     	; 0x163a <strtod+0x14e>
    162a:	c6 60       	ori	r28, 0x06	; 6
    162c:	05 c0       	rjmp	.+10     	; 0x1638 <strtod+0x14c>
    162e:	de 3f       	cpi	r29, 0xFE	; 254
    1630:	51 f4       	brne	.+20     	; 0x1646 <strtod+0x15a>
    1632:	c3 fd       	sbrc	r28, 3
    1634:	44 c0       	rjmp	.+136    	; 0x16be <strtod+0x1d2>
    1636:	c8 60       	ori	r28, 0x08	; 8
    1638:	6c 2e       	mov	r6, r28
    163a:	bf ef       	ldi	r27, 0xFF	; 255
    163c:	cb 1a       	sub	r12, r27
    163e:	db 0a       	sbc	r13, r27
    1640:	70 80       	ld	r7, Z
    1642:	c6 2d       	mov	r28, r6
    1644:	c5 cf       	rjmp	.-118    	; 0x15d0 <strtod+0xe4>
    1646:	2d 2f       	mov	r18, r29
    1648:	2f 7d       	andi	r18, 0xDF	; 223
    164a:	25 31       	cpi	r18, 0x15	; 21
    164c:	c1 f5       	brne	.+112    	; 0x16be <strtod+0x1d2>
    164e:	40 81       	ld	r20, Z
    1650:	4d 32       	cpi	r20, 0x2D	; 45
    1652:	11 f4       	brne	.+4      	; 0x1658 <strtod+0x16c>
    1654:	c0 61       	ori	r28, 0x10	; 16
    1656:	06 c0       	rjmp	.+12     	; 0x1664 <strtod+0x178>
    1658:	4b 32       	cpi	r20, 0x2B	; 43
    165a:	21 f0       	breq	.+8      	; 0x1664 <strtod+0x178>
    165c:	31 96       	adiw	r30, 0x01	; 1
    165e:	21 e0       	ldi	r18, 0x01	; 1
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	06 c0       	rjmp	.+12     	; 0x1670 <strtod+0x184>
    1664:	32 96       	adiw	r30, 0x02	; 2
    1666:	d6 01       	movw	r26, r12
    1668:	11 96       	adiw	r26, 0x01	; 1
    166a:	4c 91       	ld	r20, X
    166c:	22 e0       	ldi	r18, 0x02	; 2
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	a0 ed       	ldi	r26, 0xD0	; 208
    1672:	a4 0f       	add	r26, r20
    1674:	aa 30       	cpi	r26, 0x0A	; 10
    1676:	18 f0       	brcs	.+6      	; 0x167e <strtod+0x192>
    1678:	e2 1b       	sub	r30, r18
    167a:	f3 0b       	sbc	r31, r19
    167c:	20 c0       	rjmp	.+64     	; 0x16be <strtod+0x1d2>
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	50 e0       	ldi	r21, 0x00	; 0
    1682:	40 38       	cpi	r20, 0x80	; 128
    1684:	bc e0       	ldi	r27, 0x0C	; 12
    1686:	5b 07       	cpc	r21, r27
    1688:	5c f4       	brge	.+22     	; 0x16a0 <strtod+0x1b4>
    168a:	9a 01       	movw	r18, r20
    168c:	22 0f       	add	r18, r18
    168e:	33 1f       	adc	r19, r19
    1690:	22 0f       	add	r18, r18
    1692:	33 1f       	adc	r19, r19
    1694:	42 0f       	add	r20, r18
    1696:	53 1f       	adc	r21, r19
    1698:	44 0f       	add	r20, r20
    169a:	55 1f       	adc	r21, r21
    169c:	4a 0f       	add	r20, r26
    169e:	51 1d       	adc	r21, r1
    16a0:	31 96       	adiw	r30, 0x01	; 1
    16a2:	df 01       	movw	r26, r30
    16a4:	11 97       	sbiw	r26, 0x01	; 1
    16a6:	2c 91       	ld	r18, X
    16a8:	a0 ed       	ldi	r26, 0xD0	; 208
    16aa:	a2 0f       	add	r26, r18
    16ac:	aa 30       	cpi	r26, 0x0A	; 10
    16ae:	48 f3       	brcs	.-46     	; 0x1682 <strtod+0x196>
    16b0:	c4 ff       	sbrs	r28, 4
    16b2:	03 c0       	rjmp	.+6      	; 0x16ba <strtod+0x1ce>
    16b4:	51 95       	neg	r21
    16b6:	41 95       	neg	r20
    16b8:	51 09       	sbc	r21, r1
    16ba:	04 0f       	add	r16, r20
    16bc:	15 1f       	adc	r17, r21
    16be:	c1 ff       	sbrs	r28, 1
    16c0:	07 c0       	rjmp	.+14     	; 0x16d0 <strtod+0x1e4>
    16c2:	e1 14       	cp	r14, r1
    16c4:	f1 04       	cpc	r15, r1
    16c6:	21 f0       	breq	.+8      	; 0x16d0 <strtod+0x1e4>
    16c8:	31 97       	sbiw	r30, 0x01	; 1
    16ca:	d7 01       	movw	r26, r14
    16cc:	ed 93       	st	X+, r30
    16ce:	fc 93       	st	X, r31
    16d0:	3a db       	rcall	.-2444   	; 0xd46 <__floatunsisf>
    16d2:	c3 70       	andi	r28, 0x03	; 3
    16d4:	c3 30       	cpi	r28, 0x03	; 3
    16d6:	19 f0       	breq	.+6      	; 0x16de <strtod+0x1f2>
    16d8:	6b 01       	movw	r12, r22
    16da:	7c 01       	movw	r14, r24
    16dc:	06 c0       	rjmp	.+12     	; 0x16ea <strtod+0x1fe>
    16de:	6b 01       	movw	r12, r22
    16e0:	7c 01       	movw	r14, r24
    16e2:	f7 fa       	bst	r15, 7
    16e4:	f0 94       	com	r15
    16e6:	f7 f8       	bld	r15, 7
    16e8:	f0 94       	com	r15
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	a9 01       	movw	r20, r18
    16f0:	c7 01       	movw	r24, r14
    16f2:	b6 01       	movw	r22, r12
    16f4:	2d d1       	rcall	.+602    	; 0x1950 <__cmpsf2>
    16f6:	88 23       	and	r24, r24
    16f8:	09 f4       	brne	.+2      	; 0x16fc <strtod+0x210>
    16fa:	43 c0       	rjmp	.+134    	; 0x1782 <strtod+0x296>
    16fc:	17 ff       	sbrs	r17, 7
    16fe:	06 c0       	rjmp	.+12     	; 0x170c <strtod+0x220>
    1700:	11 95       	neg	r17
    1702:	01 95       	neg	r16
    1704:	11 09       	sbc	r17, r1
    1706:	cb ea       	ldi	r28, 0xAB	; 171
    1708:	d0 e0       	ldi	r29, 0x00	; 0
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <strtod+0x224>
    170c:	c3 ec       	ldi	r28, 0xC3	; 195
    170e:	d0 e0       	ldi	r29, 0x00	; 0
    1710:	5e 01       	movw	r10, r28
    1712:	b8 e1       	ldi	r27, 0x18	; 24
    1714:	ab 1a       	sub	r10, r27
    1716:	b1 08       	sbc	r11, r1
    1718:	46 01       	movw	r8, r12
    171a:	be 2d       	mov	r27, r14
    171c:	af 2d       	mov	r26, r15
    171e:	90 e2       	ldi	r25, 0x20	; 32
    1720:	e9 2e       	mov	r14, r25
    1722:	f1 2c       	mov	r15, r1
    1724:	0e 15       	cp	r16, r14
    1726:	1f 05       	cpc	r17, r15
    1728:	7c f0       	brlt	.+30     	; 0x1748 <strtod+0x25c>
    172a:	fe 01       	movw	r30, r28
    172c:	25 91       	lpm	r18, Z+
    172e:	35 91       	lpm	r19, Z+
    1730:	45 91       	lpm	r20, Z+
    1732:	54 91       	lpm	r21, Z
    1734:	b4 01       	movw	r22, r8
    1736:	8b 2f       	mov	r24, r27
    1738:	9a 2f       	mov	r25, r26
    173a:	93 db       	rcall	.-2266   	; 0xe62 <__mulsf3>
    173c:	4b 01       	movw	r8, r22
    173e:	b8 2f       	mov	r27, r24
    1740:	a9 2f       	mov	r26, r25
    1742:	0e 19       	sub	r16, r14
    1744:	1f 09       	sbc	r17, r15
    1746:	ee cf       	rjmp	.-36     	; 0x1724 <strtod+0x238>
    1748:	24 97       	sbiw	r28, 0x04	; 4
    174a:	f5 94       	asr	r15
    174c:	e7 94       	ror	r14
    174e:	ca 15       	cp	r28, r10
    1750:	db 05       	cpc	r29, r11
    1752:	41 f7       	brne	.-48     	; 0x1724 <strtod+0x238>
    1754:	64 01       	movw	r12, r8
    1756:	eb 2e       	mov	r14, r27
    1758:	fa 2e       	mov	r15, r26
    175a:	8e 2d       	mov	r24, r14
    175c:	88 0f       	add	r24, r24
    175e:	8f 2d       	mov	r24, r15
    1760:	88 1f       	adc	r24, r24
    1762:	8f 3f       	cpi	r24, 0xFF	; 255
    1764:	41 f0       	breq	.+16     	; 0x1776 <strtod+0x28a>
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	a9 01       	movw	r20, r18
    176c:	c7 01       	movw	r24, r14
    176e:	b6 01       	movw	r22, r12
    1770:	ef d0       	rcall	.+478    	; 0x1950 <__cmpsf2>
    1772:	81 11       	cpse	r24, r1
    1774:	06 c0       	rjmp	.+12     	; 0x1782 <strtod+0x296>
    1776:	82 e2       	ldi	r24, 0x22	; 34
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <errno+0x1>
    177e:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <errno>
    1782:	c7 01       	movw	r24, r14
    1784:	b6 01       	movw	r22, r12
    1786:	09 c0       	rjmp	.+18     	; 0x179a <strtod+0x2ae>
    1788:	60 e0       	ldi	r22, 0x00	; 0
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	80 e8       	ldi	r24, 0x80	; 128
    178e:	9f ef       	ldi	r25, 0xFF	; 255
    1790:	04 c0       	rjmp	.+8      	; 0x179a <strtod+0x2ae>
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	70 e0       	ldi	r23, 0x00	; 0
    1796:	80 ec       	ldi	r24, 0xC0	; 192
    1798:	9f e7       	ldi	r25, 0x7F	; 127
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	df 90       	pop	r13
    17a8:	cf 90       	pop	r12
    17aa:	bf 90       	pop	r11
    17ac:	af 90       	pop	r10
    17ae:	9f 90       	pop	r9
    17b0:	8f 90       	pop	r8
    17b2:	7f 90       	pop	r7
    17b4:	6f 90       	pop	r6
    17b6:	08 95       	ret

000017b8 <isspace>:
    17b8:	91 11       	cpse	r25, r1
    17ba:	ce c0       	rjmp	.+412    	; 0x1958 <__ctype_isfalse>
    17bc:	80 32       	cpi	r24, 0x20	; 32
    17be:	19 f0       	breq	.+6      	; 0x17c6 <isspace+0xe>
    17c0:	89 50       	subi	r24, 0x09	; 9
    17c2:	85 50       	subi	r24, 0x05	; 5
    17c4:	d0 f7       	brcc	.-12     	; 0x17ba <isspace+0x2>
    17c6:	08 95       	ret

000017c8 <strncasecmp_P>:
    17c8:	fb 01       	movw	r30, r22
    17ca:	dc 01       	movw	r26, r24
    17cc:	41 50       	subi	r20, 0x01	; 1
    17ce:	50 40       	sbci	r21, 0x00	; 0
    17d0:	88 f0       	brcs	.+34     	; 0x17f4 <strncasecmp_P+0x2c>
    17d2:	8d 91       	ld	r24, X+
    17d4:	81 34       	cpi	r24, 0x41	; 65
    17d6:	1c f0       	brlt	.+6      	; 0x17de <strncasecmp_P+0x16>
    17d8:	8b 35       	cpi	r24, 0x5B	; 91
    17da:	0c f4       	brge	.+2      	; 0x17de <strncasecmp_P+0x16>
    17dc:	80 5e       	subi	r24, 0xE0	; 224
    17de:	65 91       	lpm	r22, Z+
    17e0:	61 34       	cpi	r22, 0x41	; 65
    17e2:	1c f0       	brlt	.+6      	; 0x17ea <strncasecmp_P+0x22>
    17e4:	6b 35       	cpi	r22, 0x5B	; 91
    17e6:	0c f4       	brge	.+2      	; 0x17ea <strncasecmp_P+0x22>
    17e8:	60 5e       	subi	r22, 0xE0	; 224
    17ea:	86 1b       	sub	r24, r22
    17ec:	61 11       	cpse	r22, r1
    17ee:	71 f3       	breq	.-36     	; 0x17cc <strncasecmp_P+0x4>
    17f0:	99 0b       	sbc	r25, r25
    17f2:	08 95       	ret
    17f4:	88 1b       	sub	r24, r24
    17f6:	fc cf       	rjmp	.-8      	; 0x17f0 <strncasecmp_P+0x28>

000017f8 <strnlen_P>:
    17f8:	fc 01       	movw	r30, r24
    17fa:	05 90       	lpm	r0, Z+
    17fc:	61 50       	subi	r22, 0x01	; 1
    17fe:	70 40       	sbci	r23, 0x00	; 0
    1800:	01 10       	cpse	r0, r1
    1802:	d8 f7       	brcc	.-10     	; 0x17fa <strnlen_P+0x2>
    1804:	80 95       	com	r24
    1806:	90 95       	com	r25
    1808:	8e 0f       	add	r24, r30
    180a:	9f 1f       	adc	r25, r31
    180c:	08 95       	ret

0000180e <strnlen>:
    180e:	fc 01       	movw	r30, r24
    1810:	61 50       	subi	r22, 0x01	; 1
    1812:	70 40       	sbci	r23, 0x00	; 0
    1814:	01 90       	ld	r0, Z+
    1816:	01 10       	cpse	r0, r1
    1818:	d8 f7       	brcc	.-10     	; 0x1810 <strnlen+0x2>
    181a:	80 95       	com	r24
    181c:	90 95       	com	r25
    181e:	8e 0f       	add	r24, r30
    1820:	9f 1f       	adc	r25, r31
    1822:	08 95       	ret

00001824 <fputc>:
    1824:	0f 93       	push	r16
    1826:	1f 93       	push	r17
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
    182c:	fb 01       	movw	r30, r22
    182e:	23 81       	ldd	r18, Z+3	; 0x03
    1830:	21 fd       	sbrc	r18, 1
    1832:	03 c0       	rjmp	.+6      	; 0x183a <fputc+0x16>
    1834:	8f ef       	ldi	r24, 0xFF	; 255
    1836:	9f ef       	ldi	r25, 0xFF	; 255
    1838:	28 c0       	rjmp	.+80     	; 0x188a <fputc+0x66>
    183a:	22 ff       	sbrs	r18, 2
    183c:	16 c0       	rjmp	.+44     	; 0x186a <fputc+0x46>
    183e:	46 81       	ldd	r20, Z+6	; 0x06
    1840:	57 81       	ldd	r21, Z+7	; 0x07
    1842:	24 81       	ldd	r18, Z+4	; 0x04
    1844:	35 81       	ldd	r19, Z+5	; 0x05
    1846:	42 17       	cp	r20, r18
    1848:	53 07       	cpc	r21, r19
    184a:	44 f4       	brge	.+16     	; 0x185c <fputc+0x38>
    184c:	a0 81       	ld	r26, Z
    184e:	b1 81       	ldd	r27, Z+1	; 0x01
    1850:	9d 01       	movw	r18, r26
    1852:	2f 5f       	subi	r18, 0xFF	; 255
    1854:	3f 4f       	sbci	r19, 0xFF	; 255
    1856:	31 83       	std	Z+1, r19	; 0x01
    1858:	20 83       	st	Z, r18
    185a:	8c 93       	st	X, r24
    185c:	26 81       	ldd	r18, Z+6	; 0x06
    185e:	37 81       	ldd	r19, Z+7	; 0x07
    1860:	2f 5f       	subi	r18, 0xFF	; 255
    1862:	3f 4f       	sbci	r19, 0xFF	; 255
    1864:	37 83       	std	Z+7, r19	; 0x07
    1866:	26 83       	std	Z+6, r18	; 0x06
    1868:	10 c0       	rjmp	.+32     	; 0x188a <fputc+0x66>
    186a:	eb 01       	movw	r28, r22
    186c:	09 2f       	mov	r16, r25
    186e:	18 2f       	mov	r17, r24
    1870:	00 84       	ldd	r0, Z+8	; 0x08
    1872:	f1 85       	ldd	r31, Z+9	; 0x09
    1874:	e0 2d       	mov	r30, r0
    1876:	09 95       	icall
    1878:	89 2b       	or	r24, r25
    187a:	e1 f6       	brne	.-72     	; 0x1834 <fputc+0x10>
    187c:	8e 81       	ldd	r24, Y+6	; 0x06
    187e:	9f 81       	ldd	r25, Y+7	; 0x07
    1880:	01 96       	adiw	r24, 0x01	; 1
    1882:	9f 83       	std	Y+7, r25	; 0x07
    1884:	8e 83       	std	Y+6, r24	; 0x06
    1886:	81 2f       	mov	r24, r17
    1888:	90 2f       	mov	r25, r16
    188a:	df 91       	pop	r29
    188c:	cf 91       	pop	r28
    188e:	1f 91       	pop	r17
    1890:	0f 91       	pop	r16
    1892:	08 95       	ret

00001894 <__ultoa_invert>:
    1894:	fa 01       	movw	r30, r20
    1896:	aa 27       	eor	r26, r26
    1898:	28 30       	cpi	r18, 0x08	; 8
    189a:	51 f1       	breq	.+84     	; 0x18f0 <__ultoa_invert+0x5c>
    189c:	20 31       	cpi	r18, 0x10	; 16
    189e:	81 f1       	breq	.+96     	; 0x1900 <__ultoa_invert+0x6c>
    18a0:	e8 94       	clt
    18a2:	6f 93       	push	r22
    18a4:	6e 7f       	andi	r22, 0xFE	; 254
    18a6:	6e 5f       	subi	r22, 0xFE	; 254
    18a8:	7f 4f       	sbci	r23, 0xFF	; 255
    18aa:	8f 4f       	sbci	r24, 0xFF	; 255
    18ac:	9f 4f       	sbci	r25, 0xFF	; 255
    18ae:	af 4f       	sbci	r26, 0xFF	; 255
    18b0:	b1 e0       	ldi	r27, 0x01	; 1
    18b2:	3e d0       	rcall	.+124    	; 0x1930 <__ultoa_invert+0x9c>
    18b4:	b4 e0       	ldi	r27, 0x04	; 4
    18b6:	3c d0       	rcall	.+120    	; 0x1930 <__ultoa_invert+0x9c>
    18b8:	67 0f       	add	r22, r23
    18ba:	78 1f       	adc	r23, r24
    18bc:	89 1f       	adc	r24, r25
    18be:	9a 1f       	adc	r25, r26
    18c0:	a1 1d       	adc	r26, r1
    18c2:	68 0f       	add	r22, r24
    18c4:	79 1f       	adc	r23, r25
    18c6:	8a 1f       	adc	r24, r26
    18c8:	91 1d       	adc	r25, r1
    18ca:	a1 1d       	adc	r26, r1
    18cc:	6a 0f       	add	r22, r26
    18ce:	71 1d       	adc	r23, r1
    18d0:	81 1d       	adc	r24, r1
    18d2:	91 1d       	adc	r25, r1
    18d4:	a1 1d       	adc	r26, r1
    18d6:	20 d0       	rcall	.+64     	; 0x1918 <__ultoa_invert+0x84>
    18d8:	09 f4       	brne	.+2      	; 0x18dc <__ultoa_invert+0x48>
    18da:	68 94       	set
    18dc:	3f 91       	pop	r19
    18de:	2a e0       	ldi	r18, 0x0A	; 10
    18e0:	26 9f       	mul	r18, r22
    18e2:	11 24       	eor	r1, r1
    18e4:	30 19       	sub	r19, r0
    18e6:	30 5d       	subi	r19, 0xD0	; 208
    18e8:	31 93       	st	Z+, r19
    18ea:	de f6       	brtc	.-74     	; 0x18a2 <__ultoa_invert+0xe>
    18ec:	cf 01       	movw	r24, r30
    18ee:	08 95       	ret
    18f0:	46 2f       	mov	r20, r22
    18f2:	47 70       	andi	r20, 0x07	; 7
    18f4:	40 5d       	subi	r20, 0xD0	; 208
    18f6:	41 93       	st	Z+, r20
    18f8:	b3 e0       	ldi	r27, 0x03	; 3
    18fa:	0f d0       	rcall	.+30     	; 0x191a <__ultoa_invert+0x86>
    18fc:	c9 f7       	brne	.-14     	; 0x18f0 <__ultoa_invert+0x5c>
    18fe:	f6 cf       	rjmp	.-20     	; 0x18ec <__ultoa_invert+0x58>
    1900:	46 2f       	mov	r20, r22
    1902:	4f 70       	andi	r20, 0x0F	; 15
    1904:	40 5d       	subi	r20, 0xD0	; 208
    1906:	4a 33       	cpi	r20, 0x3A	; 58
    1908:	18 f0       	brcs	.+6      	; 0x1910 <__ultoa_invert+0x7c>
    190a:	49 5d       	subi	r20, 0xD9	; 217
    190c:	31 fd       	sbrc	r19, 1
    190e:	40 52       	subi	r20, 0x20	; 32
    1910:	41 93       	st	Z+, r20
    1912:	02 d0       	rcall	.+4      	; 0x1918 <__ultoa_invert+0x84>
    1914:	a9 f7       	brne	.-22     	; 0x1900 <__ultoa_invert+0x6c>
    1916:	ea cf       	rjmp	.-44     	; 0x18ec <__ultoa_invert+0x58>
    1918:	b4 e0       	ldi	r27, 0x04	; 4
    191a:	a6 95       	lsr	r26
    191c:	97 95       	ror	r25
    191e:	87 95       	ror	r24
    1920:	77 95       	ror	r23
    1922:	67 95       	ror	r22
    1924:	ba 95       	dec	r27
    1926:	c9 f7       	brne	.-14     	; 0x191a <__ultoa_invert+0x86>
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	61 05       	cpc	r22, r1
    192c:	71 05       	cpc	r23, r1
    192e:	08 95       	ret
    1930:	9b 01       	movw	r18, r22
    1932:	ac 01       	movw	r20, r24
    1934:	0a 2e       	mov	r0, r26
    1936:	06 94       	lsr	r0
    1938:	57 95       	ror	r21
    193a:	47 95       	ror	r20
    193c:	37 95       	ror	r19
    193e:	27 95       	ror	r18
    1940:	ba 95       	dec	r27
    1942:	c9 f7       	brne	.-14     	; 0x1936 <__ultoa_invert+0xa2>
    1944:	62 0f       	add	r22, r18
    1946:	73 1f       	adc	r23, r19
    1948:	84 1f       	adc	r24, r20
    194a:	95 1f       	adc	r25, r21
    194c:	a0 1d       	adc	r26, r0
    194e:	08 95       	ret

00001950 <__cmpsf2>:
    1950:	eb da       	rcall	.-2602   	; 0xf28 <__fp_cmp>
    1952:	08 f4       	brcc	.+2      	; 0x1956 <__cmpsf2+0x6>
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	08 95       	ret

00001958 <__ctype_isfalse>:
    1958:	99 27       	eor	r25, r25
    195a:	88 27       	eor	r24, r24

0000195c <__ctype_istrue>:
    195c:	08 95       	ret

0000195e <__divmodsi4>:
    195e:	05 2e       	mov	r0, r21
    1960:	97 fb       	bst	r25, 7
    1962:	16 f4       	brtc	.+4      	; 0x1968 <__divmodsi4+0xa>
    1964:	00 94       	com	r0
    1966:	0f d0       	rcall	.+30     	; 0x1986 <__negsi2>
    1968:	57 fd       	sbrc	r21, 7
    196a:	05 d0       	rcall	.+10     	; 0x1976 <__divmodsi4_neg2>
    196c:	01 db       	rcall	.-2558   	; 0xf70 <__udivmodsi4>
    196e:	07 fc       	sbrc	r0, 7
    1970:	02 d0       	rcall	.+4      	; 0x1976 <__divmodsi4_neg2>
    1972:	46 f4       	brtc	.+16     	; 0x1984 <__divmodsi4_exit>
    1974:	08 c0       	rjmp	.+16     	; 0x1986 <__negsi2>

00001976 <__divmodsi4_neg2>:
    1976:	50 95       	com	r21
    1978:	40 95       	com	r20
    197a:	30 95       	com	r19
    197c:	21 95       	neg	r18
    197e:	3f 4f       	sbci	r19, 0xFF	; 255
    1980:	4f 4f       	sbci	r20, 0xFF	; 255
    1982:	5f 4f       	sbci	r21, 0xFF	; 255

00001984 <__divmodsi4_exit>:
    1984:	08 95       	ret

00001986 <__negsi2>:
    1986:	90 95       	com	r25
    1988:	80 95       	com	r24
    198a:	70 95       	com	r23
    198c:	61 95       	neg	r22
    198e:	7f 4f       	sbci	r23, 0xFF	; 255
    1990:	8f 4f       	sbci	r24, 0xFF	; 255
    1992:	9f 4f       	sbci	r25, 0xFF	; 255
    1994:	08 95       	ret

00001996 <__muluhisi3>:
    1996:	0f d0       	rcall	.+30     	; 0x19b6 <__umulhisi3>
    1998:	a5 9f       	mul	r26, r21
    199a:	90 0d       	add	r25, r0
    199c:	b4 9f       	mul	r27, r20
    199e:	90 0d       	add	r25, r0
    19a0:	a4 9f       	mul	r26, r20
    19a2:	80 0d       	add	r24, r0
    19a4:	91 1d       	adc	r25, r1
    19a6:	11 24       	eor	r1, r1
    19a8:	08 95       	ret

000019aa <__mulshisi3>:
    19aa:	b7 ff       	sbrs	r27, 7
    19ac:	f4 cf       	rjmp	.-24     	; 0x1996 <__muluhisi3>

000019ae <__mulohisi3>:
    19ae:	f3 df       	rcall	.-26     	; 0x1996 <__muluhisi3>
    19b0:	82 1b       	sub	r24, r18
    19b2:	93 0b       	sbc	r25, r19
    19b4:	08 95       	ret

000019b6 <__umulhisi3>:
    19b6:	a2 9f       	mul	r26, r18
    19b8:	b0 01       	movw	r22, r0
    19ba:	b3 9f       	mul	r27, r19
    19bc:	c0 01       	movw	r24, r0
    19be:	a3 9f       	mul	r26, r19
    19c0:	70 0d       	add	r23, r0
    19c2:	81 1d       	adc	r24, r1
    19c4:	11 24       	eor	r1, r1
    19c6:	91 1d       	adc	r25, r1
    19c8:	b2 9f       	mul	r27, r18
    19ca:	70 0d       	add	r23, r0
    19cc:	81 1d       	adc	r24, r1
    19ce:	11 24       	eor	r1, r1
    19d0:	91 1d       	adc	r25, r1
    19d2:	08 95       	ret

000019d4 <_exit>:
    19d4:	f8 94       	cli

000019d6 <__stop_program>:
    19d6:	ff cf       	rjmp	.-2      	; 0x19d6 <__stop_program>
